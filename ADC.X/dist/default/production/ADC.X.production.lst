

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Nov 17 22:29:24 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F1936
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	stringtext5,global,class=STRCODE,delta=2
     9                           	psect	stringtext6,global,class=STRCODE,delta=2
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	dabs	1,0x7E,2
    52  0000                     
    53                           ; Version 1.44
    54                           ; Generated 14/09/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC16F1936 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     	;# 
    88  0001                     	;# 
    89  0002                     	;# 
    90  0003                     	;# 
    91  0004                     	;# 
    92  0005                     	;# 
    93  0006                     	;# 
    94  0007                     	;# 
    95  0008                     	;# 
    96  0009                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000D                     	;# 
   101  000E                     	;# 
   102  0010                     	;# 
   103  0011                     	;# 
   104  0012                     	;# 
   105  0013                     	;# 
   106  0015                     	;# 
   107  0016                     	;# 
   108  0016                     	;# 
   109  0017                     	;# 
   110  0018                     	;# 
   111  0019                     	;# 
   112  001A                     	;# 
   113  001B                     	;# 
   114  001C                     	;# 
   115  001E                     	;# 
   116  001F                     	;# 
   117  008C                     	;# 
   118  008D                     	;# 
   119  008E                     	;# 
   120  0090                     	;# 
   121  0091                     	;# 
   122  0092                     	;# 
   123  0093                     	;# 
   124  0095                     	;# 
   125  0096                     	;# 
   126  0097                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009A                     	;# 
   130  009B                     	;# 
   131  009B                     	;# 
   132  009C                     	;# 
   133  009D                     	;# 
   134  009E                     	;# 
   135  010C                     	;# 
   136  010D                     	;# 
   137  010E                     	;# 
   138  0110                     	;# 
   139  0111                     	;# 
   140  0112                     	;# 
   141  0113                     	;# 
   142  0114                     	;# 
   143  0115                     	;# 
   144  0116                     	;# 
   145  0117                     	;# 
   146  0118                     	;# 
   147  0119                     	;# 
   148  011A                     	;# 
   149  011B                     	;# 
   150  011D                     	;# 
   151  018C                     	;# 
   152  018D                     	;# 
   153  0191                     	;# 
   154  0191                     	;# 
   155  0192                     	;# 
   156  0193                     	;# 
   157  0193                     	;# 
   158  0193                     	;# 
   159  0194                     	;# 
   160  0195                     	;# 
   161  0196                     	;# 
   162  0199                     	;# 
   163  019A                     	;# 
   164  019B                     	;# 
   165  019B                     	;# 
   166  019B                     	;# 
   167  019B                     	;# 
   168  019C                     	;# 
   169  019C                     	;# 
   170  019D                     	;# 
   171  019E                     	;# 
   172  019F                     	;# 
   173  020D                     	;# 
   174  0210                     	;# 
   175  0211                     	;# 
   176  0212                     	;# 
   177  0213                     	;# 
   178  0214                     	;# 
   179  0215                     	;# 
   180  0215                     	;# 
   181  0216                     	;# 
   182  0217                     	;# 
   183  0291                     	;# 
   184  0291                     	;# 
   185  0292                     	;# 
   186  0293                     	;# 
   187  0294                     	;# 
   188  0295                     	;# 
   189  0295                     	;# 
   190  0296                     	;# 
   191  0298                     	;# 
   192  0298                     	;# 
   193  0299                     	;# 
   194  029A                     	;# 
   195  029B                     	;# 
   196  029C                     	;# 
   197  029C                     	;# 
   198  029D                     	;# 
   199  029E                     	;# 
   200  029F                     	;# 
   201  0311                     	;# 
   202  0311                     	;# 
   203  0312                     	;# 
   204  0313                     	;# 
   205  0314                     	;# 
   206  0315                     	;# 
   207  0315                     	;# 
   208  0316                     	;# 
   209  0318                     	;# 
   210  0318                     	;# 
   211  0319                     	;# 
   212  031A                     	;# 
   213  031C                     	;# 
   214  031C                     	;# 
   215  031D                     	;# 
   216  031E                     	;# 
   217  0394                     	;# 
   218  0395                     	;# 
   219  0396                     	;# 
   220  0415                     	;# 
   221  0416                     	;# 
   222  0417                     	;# 
   223  041C                     	;# 
   224  041D                     	;# 
   225  041E                     	;# 
   226  0791                     	;# 
   227  0792                     	;# 
   228  0793                     	;# 
   229  0794                     	;# 
   230  0795                     	;# 
   231  0798                     	;# 
   232  0799                     	;# 
   233  07A0                     	;# 
   234  07A1                     	;# 
   235  07A3                     	;# 
   236  07A4                     	;# 
   237  07A6                     	;# 
   238  07A7                     	;# 
   239  07A9                     	;# 
   240  07AA                     	;# 
   241  0FE4                     	;# 
   242  0FE5                     	;# 
   243  0FE6                     	;# 
   244  0FE7                     	;# 
   245  0FE8                     	;# 
   246  0FE9                     	;# 
   247  0FEA                     	;# 
   248  0FEB                     	;# 
   249  0FED                     	;# 
   250  0FEE                     	;# 
   251  0FEF                     	;# 
   252  0000                     	;# 
   253  0001                     	;# 
   254  0002                     	;# 
   255  0003                     	;# 
   256  0004                     	;# 
   257  0005                     	;# 
   258  0006                     	;# 
   259  0007                     	;# 
   260  0008                     	;# 
   261  0009                     	;# 
   262  000A                     	;# 
   263  000B                     	;# 
   264  000C                     	;# 
   265  000D                     	;# 
   266  000E                     	;# 
   267  0010                     	;# 
   268  0011                     	;# 
   269  0012                     	;# 
   270  0013                     	;# 
   271  0015                     	;# 
   272  0016                     	;# 
   273  0016                     	;# 
   274  0017                     	;# 
   275  0018                     	;# 
   276  0019                     	;# 
   277  001A                     	;# 
   278  001B                     	;# 
   279  001C                     	;# 
   280  001E                     	;# 
   281  001F                     	;# 
   282  008C                     	;# 
   283  008D                     	;# 
   284  008E                     	;# 
   285  0090                     	;# 
   286  0091                     	;# 
   287  0092                     	;# 
   288  0093                     	;# 
   289  0095                     	;# 
   290  0096                     	;# 
   291  0097                     	;# 
   292  0098                     	;# 
   293  0099                     	;# 
   294  009A                     	;# 
   295  009B                     	;# 
   296  009B                     	;# 
   297  009C                     	;# 
   298  009D                     	;# 
   299  009E                     	;# 
   300  010C                     	;# 
   301  010D                     	;# 
   302  010E                     	;# 
   303  0110                     	;# 
   304  0111                     	;# 
   305  0112                     	;# 
   306  0113                     	;# 
   307  0114                     	;# 
   308  0115                     	;# 
   309  0116                     	;# 
   310  0117                     	;# 
   311  0118                     	;# 
   312  0119                     	;# 
   313  011A                     	;# 
   314  011B                     	;# 
   315  011D                     	;# 
   316  018C                     	;# 
   317  018D                     	;# 
   318  0191                     	;# 
   319  0191                     	;# 
   320  0192                     	;# 
   321  0193                     	;# 
   322  0193                     	;# 
   323  0193                     	;# 
   324  0194                     	;# 
   325  0195                     	;# 
   326  0196                     	;# 
   327  0199                     	;# 
   328  019A                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019C                     	;# 
   334  019C                     	;# 
   335  019D                     	;# 
   336  019E                     	;# 
   337  019F                     	;# 
   338  020D                     	;# 
   339  0210                     	;# 
   340  0211                     	;# 
   341  0212                     	;# 
   342  0213                     	;# 
   343  0214                     	;# 
   344  0215                     	;# 
   345  0215                     	;# 
   346  0216                     	;# 
   347  0217                     	;# 
   348  0291                     	;# 
   349  0291                     	;# 
   350  0292                     	;# 
   351  0293                     	;# 
   352  0294                     	;# 
   353  0295                     	;# 
   354  0295                     	;# 
   355  0296                     	;# 
   356  0298                     	;# 
   357  0298                     	;# 
   358  0299                     	;# 
   359  029A                     	;# 
   360  029B                     	;# 
   361  029C                     	;# 
   362  029C                     	;# 
   363  029D                     	;# 
   364  029E                     	;# 
   365  029F                     	;# 
   366  0311                     	;# 
   367  0311                     	;# 
   368  0312                     	;# 
   369  0313                     	;# 
   370  0314                     	;# 
   371  0315                     	;# 
   372  0315                     	;# 
   373  0316                     	;# 
   374  0318                     	;# 
   375  0318                     	;# 
   376  0319                     	;# 
   377  031A                     	;# 
   378  031C                     	;# 
   379  031C                     	;# 
   380  031D                     	;# 
   381  031E                     	;# 
   382  0394                     	;# 
   383  0395                     	;# 
   384  0396                     	;# 
   385  0415                     	;# 
   386  0416                     	;# 
   387  0417                     	;# 
   388  041C                     	;# 
   389  041D                     	;# 
   390  041E                     	;# 
   391  0791                     	;# 
   392  0792                     	;# 
   393  0793                     	;# 
   394  0794                     	;# 
   395  0795                     	;# 
   396  0798                     	;# 
   397  0799                     	;# 
   398  07A0                     	;# 
   399  07A1                     	;# 
   400  07A3                     	;# 
   401  07A4                     	;# 
   402  07A6                     	;# 
   403  07A7                     	;# 
   404  07A9                     	;# 
   405  07AA                     	;# 
   406  0FE4                     	;# 
   407  0FE5                     	;# 
   408  0FE6                     	;# 
   409  0FE7                     	;# 
   410  0FE8                     	;# 
   411  0FE9                     	;# 
   412  0FEA                     	;# 
   413  0FEB                     	;# 
   414  0FED                     	;# 
   415  0FEE                     	;# 
   416  0FEF                     	;# 
   417  0000                     	;# 
   418  0001                     	;# 
   419  0002                     	;# 
   420  0003                     	;# 
   421  0004                     	;# 
   422  0005                     	;# 
   423  0006                     	;# 
   424  0007                     	;# 
   425  0008                     	;# 
   426  0009                     	;# 
   427  000A                     	;# 
   428  000B                     	;# 
   429  000C                     	;# 
   430  000D                     	;# 
   431  000E                     	;# 
   432  0010                     	;# 
   433  0011                     	;# 
   434  0012                     	;# 
   435  0013                     	;# 
   436  0015                     	;# 
   437  0016                     	;# 
   438  0016                     	;# 
   439  0017                     	;# 
   440  0018                     	;# 
   441  0019                     	;# 
   442  001A                     	;# 
   443  001B                     	;# 
   444  001C                     	;# 
   445  001E                     	;# 
   446  001F                     	;# 
   447  008C                     	;# 
   448  008D                     	;# 
   449  008E                     	;# 
   450  0090                     	;# 
   451  0091                     	;# 
   452  0092                     	;# 
   453  0093                     	;# 
   454  0095                     	;# 
   455  0096                     	;# 
   456  0097                     	;# 
   457  0098                     	;# 
   458  0099                     	;# 
   459  009A                     	;# 
   460  009B                     	;# 
   461  009B                     	;# 
   462  009C                     	;# 
   463  009D                     	;# 
   464  009E                     	;# 
   465  010C                     	;# 
   466  010D                     	;# 
   467  010E                     	;# 
   468  0110                     	;# 
   469  0111                     	;# 
   470  0112                     	;# 
   471  0113                     	;# 
   472  0114                     	;# 
   473  0115                     	;# 
   474  0116                     	;# 
   475  0117                     	;# 
   476  0118                     	;# 
   477  0119                     	;# 
   478  011A                     	;# 
   479  011B                     	;# 
   480  011D                     	;# 
   481  018C                     	;# 
   482  018D                     	;# 
   483  0191                     	;# 
   484  0191                     	;# 
   485  0192                     	;# 
   486  0193                     	;# 
   487  0193                     	;# 
   488  0193                     	;# 
   489  0194                     	;# 
   490  0195                     	;# 
   491  0196                     	;# 
   492  0199                     	;# 
   493  019A                     	;# 
   494  019B                     	;# 
   495  019B                     	;# 
   496  019B                     	;# 
   497  019B                     	;# 
   498  019C                     	;# 
   499  019C                     	;# 
   500  019D                     	;# 
   501  019E                     	;# 
   502  019F                     	;# 
   503  020D                     	;# 
   504  0210                     	;# 
   505  0211                     	;# 
   506  0212                     	;# 
   507  0213                     	;# 
   508  0214                     	;# 
   509  0215                     	;# 
   510  0215                     	;# 
   511  0216                     	;# 
   512  0217                     	;# 
   513  0291                     	;# 
   514  0291                     	;# 
   515  0292                     	;# 
   516  0293                     	;# 
   517  0294                     	;# 
   518  0295                     	;# 
   519  0295                     	;# 
   520  0296                     	;# 
   521  0298                     	;# 
   522  0298                     	;# 
   523  0299                     	;# 
   524  029A                     	;# 
   525  029B                     	;# 
   526  029C                     	;# 
   527  029C                     	;# 
   528  029D                     	;# 
   529  029E                     	;# 
   530  029F                     	;# 
   531  0311                     	;# 
   532  0311                     	;# 
   533  0312                     	;# 
   534  0313                     	;# 
   535  0314                     	;# 
   536  0315                     	;# 
   537  0315                     	;# 
   538  0316                     	;# 
   539  0318                     	;# 
   540  0318                     	;# 
   541  0319                     	;# 
   542  031A                     	;# 
   543  031C                     	;# 
   544  031C                     	;# 
   545  031D                     	;# 
   546  031E                     	;# 
   547  0394                     	;# 
   548  0395                     	;# 
   549  0396                     	;# 
   550  0415                     	;# 
   551  0416                     	;# 
   552  0417                     	;# 
   553  041C                     	;# 
   554  041D                     	;# 
   555  041E                     	;# 
   556  0791                     	;# 
   557  0792                     	;# 
   558  0793                     	;# 
   559  0794                     	;# 
   560  0795                     	;# 
   561  0798                     	;# 
   562  0799                     	;# 
   563  07A0                     	;# 
   564  07A1                     	;# 
   565  07A3                     	;# 
   566  07A4                     	;# 
   567  07A6                     	;# 
   568  07A7                     	;# 
   569  07A9                     	;# 
   570  07AA                     	;# 
   571  0FE4                     	;# 
   572  0FE5                     	;# 
   573  0FE6                     	;# 
   574  0FE7                     	;# 
   575  0FE8                     	;# 
   576  0FE9                     	;# 
   577  0FEA                     	;# 
   578  0FEB                     	;# 
   579  0FED                     	;# 
   580  0FEE                     	;# 
   581  0FEF                     	;# 
   582  0000                     	;# 
   583  0001                     	;# 
   584  0002                     	;# 
   585  0003                     	;# 
   586  0004                     	;# 
   587  0005                     	;# 
   588  0006                     	;# 
   589  0007                     	;# 
   590  0008                     	;# 
   591  0009                     	;# 
   592  000A                     	;# 
   593  000B                     	;# 
   594  000C                     	;# 
   595  000D                     	;# 
   596  000E                     	;# 
   597  0010                     	;# 
   598  0011                     	;# 
   599  0012                     	;# 
   600  0013                     	;# 
   601  0015                     	;# 
   602  0016                     	;# 
   603  0016                     	;# 
   604  0017                     	;# 
   605  0018                     	;# 
   606  0019                     	;# 
   607  001A                     	;# 
   608  001B                     	;# 
   609  001C                     	;# 
   610  001E                     	;# 
   611  001F                     	;# 
   612  008C                     	;# 
   613  008D                     	;# 
   614  008E                     	;# 
   615  0090                     	;# 
   616  0091                     	;# 
   617  0092                     	;# 
   618  0093                     	;# 
   619  0095                     	;# 
   620  0096                     	;# 
   621  0097                     	;# 
   622  0098                     	;# 
   623  0099                     	;# 
   624  009A                     	;# 
   625  009B                     	;# 
   626  009B                     	;# 
   627  009C                     	;# 
   628  009D                     	;# 
   629  009E                     	;# 
   630  010C                     	;# 
   631  010D                     	;# 
   632  010E                     	;# 
   633  0110                     	;# 
   634  0111                     	;# 
   635  0112                     	;# 
   636  0113                     	;# 
   637  0114                     	;# 
   638  0115                     	;# 
   639  0116                     	;# 
   640  0117                     	;# 
   641  0118                     	;# 
   642  0119                     	;# 
   643  011A                     	;# 
   644  011B                     	;# 
   645  011D                     	;# 
   646  018C                     	;# 
   647  018D                     	;# 
   648  0191                     	;# 
   649  0191                     	;# 
   650  0192                     	;# 
   651  0193                     	;# 
   652  0193                     	;# 
   653  0193                     	;# 
   654  0194                     	;# 
   655  0195                     	;# 
   656  0196                     	;# 
   657  0199                     	;# 
   658  019A                     	;# 
   659  019B                     	;# 
   660  019B                     	;# 
   661  019B                     	;# 
   662  019B                     	;# 
   663  019C                     	;# 
   664  019C                     	;# 
   665  019D                     	;# 
   666  019E                     	;# 
   667  019F                     	;# 
   668  020D                     	;# 
   669  0210                     	;# 
   670  0211                     	;# 
   671  0212                     	;# 
   672  0213                     	;# 
   673  0214                     	;# 
   674  0215                     	;# 
   675  0215                     	;# 
   676  0216                     	;# 
   677  0217                     	;# 
   678  0291                     	;# 
   679  0291                     	;# 
   680  0292                     	;# 
   681  0293                     	;# 
   682  0294                     	;# 
   683  0295                     	;# 
   684  0295                     	;# 
   685  0296                     	;# 
   686  0298                     	;# 
   687  0298                     	;# 
   688  0299                     	;# 
   689  029A                     	;# 
   690  029B                     	;# 
   691  029C                     	;# 
   692  029C                     	;# 
   693  029D                     	;# 
   694  029E                     	;# 
   695  029F                     	;# 
   696  0311                     	;# 
   697  0311                     	;# 
   698  0312                     	;# 
   699  0313                     	;# 
   700  0314                     	;# 
   701  0315                     	;# 
   702  0315                     	;# 
   703  0316                     	;# 
   704  0318                     	;# 
   705  0318                     	;# 
   706  0319                     	;# 
   707  031A                     	;# 
   708  031C                     	;# 
   709  031C                     	;# 
   710  031D                     	;# 
   711  031E                     	;# 
   712  0394                     	;# 
   713  0395                     	;# 
   714  0396                     	;# 
   715  0415                     	;# 
   716  0416                     	;# 
   717  0417                     	;# 
   718  041C                     	;# 
   719  041D                     	;# 
   720  041E                     	;# 
   721  0791                     	;# 
   722  0792                     	;# 
   723  0793                     	;# 
   724  0794                     	;# 
   725  0795                     	;# 
   726  0798                     	;# 
   727  0799                     	;# 
   728  07A0                     	;# 
   729  07A1                     	;# 
   730  07A3                     	;# 
   731  07A4                     	;# 
   732  07A6                     	;# 
   733  07A7                     	;# 
   734  07A9                     	;# 
   735  07AA                     	;# 
   736  0FE4                     	;# 
   737  0FE5                     	;# 
   738  0FE6                     	;# 
   739  0FE7                     	;# 
   740  0FE8                     	;# 
   741  0FE9                     	;# 
   742  0FEA                     	;# 
   743  0FEB                     	;# 
   744  0FED                     	;# 
   745  0FEE                     	;# 
   746  0FEF                     	;# 
   747  0000                     	;# 
   748  0001                     	;# 
   749  0002                     	;# 
   750  0003                     	;# 
   751  0004                     	;# 
   752  0005                     	;# 
   753  0006                     	;# 
   754  0007                     	;# 
   755  0008                     	;# 
   756  0009                     	;# 
   757  000A                     	;# 
   758  000B                     	;# 
   759  000C                     	;# 
   760  000D                     	;# 
   761  000E                     	;# 
   762  0010                     	;# 
   763  0011                     	;# 
   764  0012                     	;# 
   765  0013                     	;# 
   766  0015                     	;# 
   767  0016                     	;# 
   768  0016                     	;# 
   769  0017                     	;# 
   770  0018                     	;# 
   771  0019                     	;# 
   772  001A                     	;# 
   773  001B                     	;# 
   774  001C                     	;# 
   775  001E                     	;# 
   776  001F                     	;# 
   777  008C                     	;# 
   778  008D                     	;# 
   779  008E                     	;# 
   780  0090                     	;# 
   781  0091                     	;# 
   782  0092                     	;# 
   783  0093                     	;# 
   784  0095                     	;# 
   785  0096                     	;# 
   786  0097                     	;# 
   787  0098                     	;# 
   788  0099                     	;# 
   789  009A                     	;# 
   790  009B                     	;# 
   791  009B                     	;# 
   792  009C                     	;# 
   793  009D                     	;# 
   794  009E                     	;# 
   795  010C                     	;# 
   796  010D                     	;# 
   797  010E                     	;# 
   798  0110                     	;# 
   799  0111                     	;# 
   800  0112                     	;# 
   801  0113                     	;# 
   802  0114                     	;# 
   803  0115                     	;# 
   804  0116                     	;# 
   805  0117                     	;# 
   806  0118                     	;# 
   807  0119                     	;# 
   808  011A                     	;# 
   809  011B                     	;# 
   810  011D                     	;# 
   811  018C                     	;# 
   812  018D                     	;# 
   813  0191                     	;# 
   814  0191                     	;# 
   815  0192                     	;# 
   816  0193                     	;# 
   817  0193                     	;# 
   818  0193                     	;# 
   819  0194                     	;# 
   820  0195                     	;# 
   821  0196                     	;# 
   822  0199                     	;# 
   823  019A                     	;# 
   824  019B                     	;# 
   825  019B                     	;# 
   826  019B                     	;# 
   827  019B                     	;# 
   828  019C                     	;# 
   829  019C                     	;# 
   830  019D                     	;# 
   831  019E                     	;# 
   832  019F                     	;# 
   833  020D                     	;# 
   834  0210                     	;# 
   835  0211                     	;# 
   836  0212                     	;# 
   837  0213                     	;# 
   838  0214                     	;# 
   839  0215                     	;# 
   840  0215                     	;# 
   841  0216                     	;# 
   842  0217                     	;# 
   843  0291                     	;# 
   844  0291                     	;# 
   845  0292                     	;# 
   846  0293                     	;# 
   847  0294                     	;# 
   848  0295                     	;# 
   849  0295                     	;# 
   850  0296                     	;# 
   851  0298                     	;# 
   852  0298                     	;# 
   853  0299                     	;# 
   854  029A                     	;# 
   855  029B                     	;# 
   856  029C                     	;# 
   857  029C                     	;# 
   858  029D                     	;# 
   859  029E                     	;# 
   860  029F                     	;# 
   861  0311                     	;# 
   862  0311                     	;# 
   863  0312                     	;# 
   864  0313                     	;# 
   865  0314                     	;# 
   866  0315                     	;# 
   867  0315                     	;# 
   868  0316                     	;# 
   869  0318                     	;# 
   870  0318                     	;# 
   871  0319                     	;# 
   872  031A                     	;# 
   873  031C                     	;# 
   874  031C                     	;# 
   875  031D                     	;# 
   876  031E                     	;# 
   877  0394                     	;# 
   878  0395                     	;# 
   879  0396                     	;# 
   880  0415                     	;# 
   881  0416                     	;# 
   882  0417                     	;# 
   883  041C                     	;# 
   884  041D                     	;# 
   885  041E                     	;# 
   886  0791                     	;# 
   887  0792                     	;# 
   888  0793                     	;# 
   889  0794                     	;# 
   890  0795                     	;# 
   891  0798                     	;# 
   892  0799                     	;# 
   893  07A0                     	;# 
   894  07A1                     	;# 
   895  07A3                     	;# 
   896  07A4                     	;# 
   897  07A6                     	;# 
   898  07A7                     	;# 
   899  07A9                     	;# 
   900  07AA                     	;# 
   901  0FE4                     	;# 
   902  0FE5                     	;# 
   903  0FE6                     	;# 
   904  0FE7                     	;# 
   905  0FE8                     	;# 
   906  0FE9                     	;# 
   907  0FEA                     	;# 
   908  0FEB                     	;# 
   909  0FED                     	;# 
   910  0FEE                     	;# 
   911  0FEF                     	;# 
   912                           
   913                           	psect	stringtext1
   914  1800                     __pstringtext1:	
   915  1800                     _dpowers:	
   916  1800  3401               	retlw	1
   917  1801  3400               	retlw	0
   918  1802  3400               	retlw	0
   919  1803  3400               	retlw	0
   920  1804  340A               	retlw	10
   921  1805  3400               	retlw	0
   922  1806  3400               	retlw	0
   923  1807  3400               	retlw	0
   924  1808  3464               	retlw	100
   925  1809  3400               	retlw	0
   926  180A  3400               	retlw	0
   927  180B  3400               	retlw	0
   928  180C  34E8               	retlw	232
   929  180D  3403               	retlw	3
   930  180E  3400               	retlw	0
   931  180F  3400               	retlw	0
   932  1810  3410               	retlw	16
   933  1811  3427               	retlw	39
   934  1812  3400               	retlw	0
   935  1813  3400               	retlw	0
   936  1814  34A0               	retlw	160
   937  1815  3486               	retlw	134
   938  1816  3401               	retlw	1
   939  1817  3400               	retlw	0
   940  1818  3440               	retlw	64
   941  1819  3442               	retlw	66
   942  181A  340F               	retlw	15
   943  181B  3400               	retlw	0
   944  181C  3480               	retlw	128
   945  181D  3496               	retlw	150
   946  181E  3498               	retlw	152
   947  181F  3400               	retlw	0
   948  1820  3400               	retlw	0
   949  1821  34E1               	retlw	225
   950  1822  34F5               	retlw	245
   951  1823  3405               	retlw	5
   952  1824  3400               	retlw	0
   953  1825  34CA               	retlw	202
   954  1826  349A               	retlw	154
   955  1827  343B               	retlw	59
   956  1828                     __end_of_dpowers:	
   957                           
   958                           	psect	stringtext2
   959  1828                     __pstringtext2:	
   960  1828                     __powers_:	
   961  1828  3400               	retlw	0
   962  1829  3480               	retlw	128
   963  182A  343F               	retlw	63
   964  182B  3400               	retlw	0
   965  182C  3420               	retlw	32
   966  182D  3441               	retlw	65
   967  182E  3400               	retlw	0
   968  182F  34C8               	retlw	200
   969  1830  3442               	retlw	66
   970  1831  3400               	retlw	0
   971  1832  347A               	retlw	122
   972  1833  3444               	retlw	68
   973  1834  3440               	retlw	64
   974  1835  341C               	retlw	28
   975  1836  3446               	retlw	70
   976  1837  3450               	retlw	80
   977  1838  34C3               	retlw	195
   978  1839  3447               	retlw	71
   979  183A  3424               	retlw	36
   980  183B  3474               	retlw	116
   981  183C  3449               	retlw	73
   982  183D  3497               	retlw	151
   983  183E  3418               	retlw	24
   984  183F  344B               	retlw	75
   985  1840  34BC               	retlw	188
   986  1841  34BE               	retlw	190
   987  1842  344C               	retlw	76
   988  1843  346B               	retlw	107
   989  1844  346E               	retlw	110
   990  1845  344E               	retlw	78
   991  1846  3403               	retlw	3
   992  1847  3415               	retlw	21
   993  1848  3450               	retlw	80
   994  1849  3479               	retlw	121
   995  184A  34AD               	retlw	173
   996  184B  3460               	retlw	96
   997  184C  34F3               	retlw	243
   998  184D  3449               	retlw	73
   999  184E  3471               	retlw	113
  1000  184F                     __end_of__powers_:	
  1001                           
  1002                           	psect	stringtext3
  1003  184F                     __pstringtext3:	
  1004  184F                     __npowers_:	
  1005  184F  3400               	retlw	0
  1006  1850  3480               	retlw	128
  1007  1851  343F               	retlw	63
  1008  1852  34CD               	retlw	205
  1009  1853  34CC               	retlw	204
  1010  1854  343D               	retlw	61
  1011  1855  34D7               	retlw	215
  1012  1856  3423               	retlw	35
  1013  1857  343C               	retlw	60
  1014  1858  3412               	retlw	18
  1015  1859  3483               	retlw	131
  1016  185A  343A               	retlw	58
  1017  185B  34B7               	retlw	183
  1018  185C  34D1               	retlw	209
  1019  185D  3438               	retlw	56
  1020  185E  34C6               	retlw	198
  1021  185F  3427               	retlw	39
  1022  1860  3437               	retlw	55
  1023  1861  3438               	retlw	56
  1024  1862  3486               	retlw	134
  1025  1863  3435               	retlw	53
  1026  1864  34C0               	retlw	192
  1027  1865  34D6               	retlw	214
  1028  1866  3433               	retlw	51
  1029  1867  34CC               	retlw	204
  1030  1868  342B               	retlw	43
  1031  1869  3432               	retlw	50
  1032  186A  3470               	retlw	112
  1033  186B  3489               	retlw	137
  1034  186C  3430               	retlw	48
  1035  186D  34E7               	retlw	231
  1036  186E  34DB               	retlw	219
  1037  186F  342E               	retlw	46
  1038  1870  34E5               	retlw	229
  1039  1871  343C               	retlw	60
  1040  1872  341E               	retlw	30
  1041  1873  3442               	retlw	66
  1042  1874  34A2               	retlw	162
  1043  1875  340D               	retlw	13
  1044  1876                     __end_of__npowers_:	
  1045                           
  1046                           	psect	stringtext4
  1047  1876                     __pstringtext4:	
  1048  1876                     TextLCD_Puts@DDRAM_Start_Address:	
  1049  1876  3480               	retlw	128
  1050  1877  34C0               	retlw	192
  1051  1878  3490               	retlw	144
  1052  1879  34D0               	retlw	208
  1053  187A                     __end_ofTextLCD_Puts@DDRAM_Start_Address:	
  1054  009D                     _ADCON0bits	set	157
  1055  009C                     _ADRESH	set	156
  1056  009B                     _ADRESL	set	155
  1057  009E                     _ADCON1	set	158
  1058  009D                     _ADCON0	set	157
  1059  0095                     _OPTION_REGbits	set	149
  1060  008E                     _TRISC	set	142
  1061  008D                     _TRISB	set	141
  1062  008C                     _TRISA	set	140
  1063  0090                     _TRISE	set	144
  1064  0097                     _WDTCON	set	151
  1065  0098                     _OSCTUNE	set	152
  1066  0099                     _OSCCON	set	153
  1067  04D6                     _PLLR	set	1238
  1068  010E                     _LATCbits	set	270
  1069  011D                     _APFCON	set	285
  1070  010E                     _LATC	set	270
  1071  010D                     _LATB	set	269
  1072  010C                     _LATA	set	268
  1073  0110                     _LATE	set	272
  1074  018C                     _ANSELA	set	396
  1075  018D                     _ANSELB	set	397
  1076  020D                     _WPUB	set	525
  1077  0210                     _WPUE	set	528
  1078  187A                     STR_2:	
  1079  187A  3454               	retlw	84	;'T'
  1080  187B  3465               	retlw	101	;'e'
  1081  187C  346D               	retlw	109	;'m'
  1082  187D  3470               	retlw	112	;'p'
  1083  187E  343D               	retlw	61	;'='
  1084  187F  3425               	retlw	37	;'%'
  1085  1880  342E               	retlw	46	;'.'
  1086  1881  3431               	retlw	49	;'1'
  1087  1882  3466               	retlw	102	;'f'
  1088  1883  3400               	retlw	0
  1089                           
  1090                           	psect	stringtext5
  1091  1884                     __pstringtext5:	
  1092  1884                     STR_1:	
  1093  1884  3456               	retlw	86	;'V'
  1094  1885  346F               	retlw	111	;'o'
  1095  1886  346C               	retlw	108	;'l'
  1096  1887  343D               	retlw	61	;'='
  1097  1888  3425               	retlw	37	;'%'
  1098  1889  342E               	retlw	46	;'.'
  1099  188A  3431               	retlw	49	;'1'
  1100  188B  3466               	retlw	102	;'f'
  1101  188C  3400               	retlw	0
  1102                           
  1103                           	psect	stringtext6
  1104  0000                     __pstringtext6:	
  1105                           
  1106                           ; #config settings
  1107  0000                     
  1108                           	psect	cinit
  1109  07EF                     start_initialization:	
  1110  07EF                     __initialization:	
  1111                           
  1112                           ; Clear objects allocated to BANK0
  1113  07EF  0020               	movlb	0	; select bank0
  1114  07F0  01E8               	clrf	__pbssBANK0& (0+127)
  1115  07F1  01E9               	clrf	(__pbssBANK0+1)& (0+127)
  1116  07F2  01EA               	clrf	(__pbssBANK0+2)& (0+127)
  1117  07F3  01EB               	clrf	(__pbssBANK0+3)& (0+127)
  1118  07F4  01EC               	clrf	(__pbssBANK0+4)& (0+127)
  1119  07F5  01ED               	clrf	(__pbssBANK0+5)& (0+127)
  1120                           
  1121                           ; Clear objects allocated to BANK1
  1122  07F6  30B7               	movlw	low __pbssBANK1
  1123  07F7  0084               	movwf	4
  1124  07F8  3000               	movlw	high __pbssBANK1
  1125  07F9  0085               	movwf	5
  1126  07FA  3011               	movlw	17
  1127  07FB  3196  2649         	fcall	clear_ram0
  1128  07FD                     end_of_initialization:	
  1129                           ;End of C runtime variable initialization code
  1130                           
  1131  07FD                     __end_of__initialization:	
  1132  07FD  0020               	movlb	0
  1133  07FE  318B  2BBC         	ljmp	_main	;jump to C main() function
  1134                           
  1135                           	psect	bssBANK0
  1136  0068                     __pbssBANK0:	
  1137  0068                     _temp:	
  1138  0068                     	ds	3
  1139  006B                     _vol:	
  1140  006B                     	ds	3
  1141                           
  1142                           	psect	bssBANK1
  1143  00B7                     __pbssBANK1:	
  1144  00B7                     _str:	
  1145  00B7                     	ds	17
  1146                           
  1147                           	psect	clrtext
  1148  1649                     clear_ram0:	
  1149                           ;	Called with FSR0 containing the base address, and
  1150                           ;	WREG with the size to clear
  1151                           
  1152  1649  0064               	clrwdt	;clear the watchdog before getting into this loop
  1153  164A                     clrloop0:	
  1154  164A  0180               	clrf	0	;clear RAM location pointed to by FSR
  1155  164B  3101               	addfsr 0,1
  1156  164C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1157  164D  2E4A               	goto	clrloop0	;have we reached the end yet?
  1158  164E  3400               	retlw	0	;all done for this memory range, return
  1159                           
  1160                           	psect	cstackBANK1
  1161  00A0                     __pcstackBANK1:	
  1162  00A0                     _sprintf$755:	
  1163                           
  1164                           ; 3 bytes @ 0x0
  1165  00A0                     	ds	3
  1166  00A3                     sprintf@ap:	
  1167                           
  1168                           ; 1 bytes @ 0x3
  1169  00A3                     	ds	1
  1170  00A4                     sprintf@flag:	
  1171                           
  1172                           ; 2 bytes @ 0x4
  1173  00A4                     	ds	2
  1174  00A6                     sprintf@val:	
  1175                           
  1176                           ; 4 bytes @ 0x6
  1177  00A6                     	ds	4
  1178  00AA                     sprintf@exp:	
  1179                           
  1180                           ; 2 bytes @ 0xA
  1181  00AA                     	ds	2
  1182  00AC                     sprintf@tmpval:	
  1183                           
  1184                           ; 4 bytes @ 0xC
  1185  00AC                     	ds	4
  1186  00B0                     sprintf@prec:	
  1187                           
  1188                           ; 2 bytes @ 0x10
  1189  00B0                     	ds	2
  1190  00B2                     sprintf@sp:	
  1191                           
  1192                           ; 1 bytes @ 0x12
  1193  00B2                     	ds	1
  1194  00B3                     sprintf@fval:	
  1195                           
  1196                           ; 3 bytes @ 0x13
  1197  00B3                     	ds	3
  1198  00B6                     sprintf@c:	
  1199                           
  1200                           ; 1 bytes @ 0x16
  1201  00B6                     	ds	1
  1202                           
  1203                           	psect	cstackCOMMON
  1204  0070                     __pcstackCOMMON:	
  1205  0070                     ?_isdigit:	
  1206  0070                     ?___ftge:	
  1207                           ; 1 bit 
  1208                           
  1209  0070                     ?_PIN_MANAGER_Initialize:	
  1210                           ; 1 bit 
  1211                           
  1212  0070                     ??_PIN_MANAGER_Initialize:	
  1213                           ; 1 bytes @ 0x0
  1214                           
  1215  0070                     ?_OSCILLATOR_Initialize:	
  1216                           ; 1 bytes @ 0x0
  1217                           
  1218  0070                     ??_OSCILLATOR_Initialize:	
  1219                           ; 1 bytes @ 0x0
  1220                           
  1221  0070                     ?_WDT_Initialize:	
  1222                           ; 1 bytes @ 0x0
  1223                           
  1224  0070                     ??_WDT_Initialize:	
  1225                           ; 1 bytes @ 0x0
  1226                           
  1227  0070                     ?_ADC_Initialize:	
  1228                           ; 1 bytes @ 0x0
  1229                           
  1230  0070                     ??_ADC_Initialize:	
  1231                           ; 1 bytes @ 0x0
  1232                           
  1233  0070                     ?_TextLCD_Init:	
  1234                           ; 1 bytes @ 0x0
  1235                           
  1236  0070                     ??_isdigit:	
  1237                           ; 1 bytes @ 0x0
  1238                           
  1239  0070                     ?_SYSTEM_Initialize:	
  1240                           ; 1 bytes @ 0x0
  1241                           
  1242  0070                     ??_SYSTEM_Initialize:	
  1243                           ; 1 bytes @ 0x0
  1244                           
  1245  0070                     ?_main:	
  1246                           ; 1 bytes @ 0x0
  1247                           
  1248  0070                     ?_TextLCD_4Bits_Write:	
  1249                           ; 1 bytes @ 0x0
  1250                           
  1251  0070                     ??_TextLCD_4Bits_Write:	
  1252                           ; 1 bytes @ 0x0
  1253                           
  1254  0070                     ?_TextLCD_Enable:	
  1255                           ; 1 bytes @ 0x0
  1256                           
  1257  0070                     ??_TextLCD_Enable:	
  1258                           ; 1 bytes @ 0x0
  1259                           
  1260  0070                     ?_TextLCD_CMD:	
  1261                           ; 1 bytes @ 0x0
  1262                           
  1263  0070                     ?_TextLCD_PutChar:	
  1264                           ; 1 bytes @ 0x0
  1265                           
  1266  0070                     ?_ADC_GetConversion:	
  1267                           ; 1 bytes @ 0x0
  1268                           
  1269  0070                     ?___awmod:	
  1270                           ; 2 bytes @ 0x0
  1271                           
  1272  0070                     ?___ftpack:	
  1273                           ; 2 bytes @ 0x0
  1274                           
  1275  0070                     ?___ftneg:	
  1276                           ; 3 bytes @ 0x0
  1277                           
  1278  0070                     ?__tdiv_to_l_:	
  1279                           ; 3 bytes @ 0x0
  1280                           
  1281  0070                     ?__div_to_l_:	
  1282                           ; 4 bytes @ 0x0
  1283                           
  1284  0070                     ?___lldiv:	
  1285                           ; 4 bytes @ 0x0
  1286                           
  1287  0070                     ?___llmod:	
  1288                           ; 4 bytes @ 0x0
  1289                           
  1290  0070                     TextLCD_4Bits_Write@nib:	
  1291                           ; 4 bytes @ 0x0
  1292                           
  1293  0070                     _isdigit$520:	
  1294                           ; 1 bytes @ 0x0
  1295                           
  1296  0070                     ___awmod@divisor:	
  1297                           ; 1 bytes @ 0x0
  1298                           
  1299  0070                     __div_to_l_@f1:	
  1300                           ; 2 bytes @ 0x0
  1301                           
  1302  0070                     ___ftpack@arg:	
  1303                           ; 3 bytes @ 0x0
  1304                           
  1305  0070                     __tdiv_to_l_@f1:	
  1306                           ; 3 bytes @ 0x0
  1307                           
  1308  0070                     ___ftge@ff1:	
  1309                           ; 3 bytes @ 0x0
  1310                           
  1311  0070                     ___ftneg@f1:	
  1312                           ; 3 bytes @ 0x0
  1313                           
  1314  0070                     ___lldiv@divisor:	
  1315                           ; 3 bytes @ 0x0
  1316                           
  1317  0070                     ___llmod@divisor:	
  1318                           ; 4 bytes @ 0x0
  1319                           
  1320                           
  1321                           ; 4 bytes @ 0x0
  1322  0070                     	ds	1
  1323  0071                     ??_TextLCD_CMD:	
  1324  0071                     isdigit@c:	
  1325                           ; 1 bytes @ 0x1
  1326                           
  1327                           
  1328                           ; 1 bytes @ 0x1
  1329  0071                     	ds	1
  1330  0072                     ??_ADC_GetConversion:	
  1331  0072                     TextLCD_CMD@cmd:	
  1332                           ; 1 bytes @ 0x2
  1333                           
  1334  0072                     ___awmod@dividend:	
  1335                           ; 1 bytes @ 0x2
  1336                           
  1337                           
  1338                           ; 2 bytes @ 0x2
  1339  0072                     	ds	1
  1340  0073                     ??_TextLCD_Init:	
  1341  0073                     ??_TextLCD_PutChar:	
  1342                           ; 1 bytes @ 0x3
  1343                           
  1344  0073                     ??___ftneg:	
  1345                           ; 1 bytes @ 0x3
  1346                           
  1347  0073                     ADC_GetConversion@channel:	
  1348                           ; 1 bytes @ 0x3
  1349                           
  1350  0073                     TextLCD_PutChar@data:	
  1351                           ; 1 bytes @ 0x3
  1352                           
  1353  0073                     ___ftpack@exp:	
  1354                           ; 1 bytes @ 0x3
  1355                           
  1356  0073                     __div_to_l_@f2:	
  1357                           ; 1 bytes @ 0x3
  1358                           
  1359  0073                     __tdiv_to_l_@f2:	
  1360                           ; 3 bytes @ 0x3
  1361                           
  1362  0073                     ___ftge@ff2:	
  1363                           ; 3 bytes @ 0x3
  1364                           
  1365                           
  1366                           ; 3 bytes @ 0x3
  1367  0073                     	ds	1
  1368  0074                     ?_TextLCD_Puts:	
  1369  0074                     ??___awmod:	
  1370                           ; 1 bytes @ 0x4
  1371                           
  1372  0074                     TextLCD_Puts@idx:	
  1373                           ; 1 bytes @ 0x4
  1374                           
  1375  0074                     ___ftpack@sign:	
  1376                           ; 1 bytes @ 0x4
  1377                           
  1378  0074                     ___lldiv@dividend:	
  1379                           ; 1 bytes @ 0x4
  1380                           
  1381  0074                     ___llmod@dividend:	
  1382                           ; 4 bytes @ 0x4
  1383                           
  1384                           
  1385                           ; 4 bytes @ 0x4
  1386  0074                     	ds	1
  1387  0075                     ??___ftpack:	
  1388  0075                     TextLCD_Puts@data:	
  1389                           ; 1 bytes @ 0x5
  1390                           
  1391  0075                     ___awmod@counter:	
  1392                           ; 1 bytes @ 0x5
  1393                           
  1394                           
  1395                           ; 1 bytes @ 0x5
  1396  0075                     	ds	1
  1397  0076                     ??__tdiv_to_l_:	
  1398  0076                     ??__div_to_l_:	
  1399                           ; 1 bytes @ 0x6
  1400                           
  1401  0076                     ??___ftge:	
  1402                           ; 1 bytes @ 0x6
  1403                           
  1404  0076                     TextLCD_Puts@length_or_type:	
  1405                           ; 1 bytes @ 0x6
  1406                           
  1407  0076                     ___awmod@sign:	
  1408                           ; 1 bytes @ 0x6
  1409                           
  1410                           
  1411                           ; 1 bytes @ 0x6
  1412  0076                     	ds	1
  1413  0077                     ??_TextLCD_Puts:	
  1414  0077                     ?___awdiv:	
  1415                           ; 1 bytes @ 0x7
  1416                           
  1417  0077                     ___awdiv@divisor:	
  1418                           ; 2 bytes @ 0x7
  1419                           
  1420                           
  1421                           ; 2 bytes @ 0x7
  1422  0077                     	ds	1
  1423  0078                     ??___lldiv:	
  1424  0078                     ??___llmod:	
  1425                           ; 1 bytes @ 0x8
  1426                           
  1427  0078                     ?___ftdiv:	
  1428                           ; 1 bytes @ 0x8
  1429                           
  1430  0078                     ?___lltoft:	
  1431                           ; 3 bytes @ 0x8
  1432                           
  1433  0078                     ?___lwtoft:	
  1434                           ; 3 bytes @ 0x8
  1435                           
  1436  0078                     TextLCD_Puts@line:	
  1437                           ; 3 bytes @ 0x8
  1438                           
  1439  0078                     ___lwtoft@c:	
  1440                           ; 1 bytes @ 0x8
  1441                           
  1442  0078                     ___ftdiv@f2:	
  1443                           ; 2 bytes @ 0x8
  1444                           
  1445  0078                     ___lltoft@c:	
  1446                           ; 3 bytes @ 0x8
  1447                           
  1448                           
  1449                           ; 4 bytes @ 0x8
  1450  0078                     	ds	1
  1451  0079                     TextLCD_Puts@address:	
  1452  0079                     ___llmod@counter:	
  1453                           ; 1 bytes @ 0x9
  1454                           
  1455  0079                     ___awdiv@dividend:	
  1456                           ; 1 bytes @ 0x9
  1457                           
  1458  0079                     ___lldiv@quotient:	
  1459                           ; 2 bytes @ 0x9
  1460                           
  1461                           
  1462                           ; 4 bytes @ 0x9
  1463  0079                     	ds	2
  1464  007B                     ??___awdiv:	
  1465  007B                     ??___lwtoft:	
  1466                           ; 1 bytes @ 0xB
  1467                           
  1468  007B                     ___ftdiv@f1:	
  1469                           ; 1 bytes @ 0xB
  1470                           
  1471                           
  1472                           ; 3 bytes @ 0xB
  1473  007B                     	ds	1
  1474  007C                     ??___wmul:	
  1475  007C                     ??___lltoft:	
  1476                           ; 1 bytes @ 0xC
  1477                           
  1478  007C                     ___wmul@product:	
  1479                           ; 1 bytes @ 0xC
  1480                           
  1481                           
  1482                           ; 2 bytes @ 0xC
  1483  007C                     	ds	1
  1484  007D                     ___lldiv@counter:	
  1485  007D                     ___lltoft@exp:	
  1486                           ; 1 bytes @ 0xD
  1487                           
  1488                           
  1489                           ; 1 bytes @ 0xD
  1490  007D                     	ds	1
  1491  007E                     ??___ftsub:	
  1492                           
  1493                           	psect	cstackBANK0
  1494  0020                     __pcstackBANK0:	
  1495                           ; 1 bytes @ 0xE
  1496                           
  1497  0020                     ??___ftdiv:	
  1498  0020                     ___awdiv@counter:	
  1499                           ; 1 bytes @ 0x0
  1500                           
  1501  0020                     __div_to_l_@quot:	
  1502                           ; 1 bytes @ 0x0
  1503                           
  1504  0020                     __tdiv_to_l_@quot:	
  1505                           ; 4 bytes @ 0x0
  1506                           
  1507                           
  1508                           ; 4 bytes @ 0x0
  1509  0020                     	ds	1
  1510  0021                     ___awdiv@sign:	
  1511                           
  1512                           ; 1 bytes @ 0x1
  1513  0021                     	ds	1
  1514  0022                     ___awdiv@quotient:	
  1515                           
  1516                           ; 2 bytes @ 0x2
  1517  0022                     	ds	2
  1518  0024                     ?___wmul:	
  1519  0024                     __div_to_l_@cntr:	
  1520                           ; 2 bytes @ 0x4
  1521                           
  1522  0024                     ___ftdiv@cntr:	
  1523                           ; 1 bytes @ 0x4
  1524                           
  1525  0024                     __tdiv_to_l_@cntr:	
  1526                           ; 1 bytes @ 0x4
  1527                           
  1528  0024                     ___wmul@multiplier:	
  1529                           ; 1 bytes @ 0x4
  1530                           
  1531                           
  1532                           ; 2 bytes @ 0x4
  1533  0024                     	ds	1
  1534  0025                     __div_to_l_@exp1:	
  1535  0025                     __tdiv_to_l_@exp1:	
  1536                           ; 1 bytes @ 0x5
  1537                           
  1538  0025                     ___ftdiv@f3:	
  1539                           ; 1 bytes @ 0x5
  1540                           
  1541                           
  1542                           ; 3 bytes @ 0x5
  1543  0025                     	ds	1
  1544  0026                     ___wmul@multiplicand:	
  1545                           
  1546                           ; 2 bytes @ 0x6
  1547  0026                     	ds	2
  1548  0028                     ?___ftmul:	
  1549  0028                     ___ftdiv@exp:	
  1550                           ; 3 bytes @ 0x8
  1551                           
  1552  0028                     ___ftmul@f1:	
  1553                           ; 1 bytes @ 0x8
  1554                           
  1555                           
  1556                           ; 3 bytes @ 0x8
  1557  0028                     	ds	1
  1558  0029                     ___ftdiv@sign:	
  1559                           
  1560                           ; 1 bytes @ 0x9
  1561  0029                     	ds	2
  1562  002B                     ___ftmul@f2:	
  1563                           
  1564                           ; 3 bytes @ 0xB
  1565  002B                     	ds	3
  1566  002E                     ??___ftmul:	
  1567                           
  1568                           ; 1 bytes @ 0xE
  1569  002E                     	ds	4
  1570  0032                     ___ftmul@exp:	
  1571                           
  1572                           ; 1 bytes @ 0x12
  1573  0032                     	ds	1
  1574  0033                     ___ftmul@f3_as_product:	
  1575                           
  1576                           ; 3 bytes @ 0x13
  1577  0033                     	ds	3
  1578  0036                     ___ftmul@cntr:	
  1579                           
  1580                           ; 1 bytes @ 0x16
  1581  0036                     	ds	1
  1582  0037                     ___ftmul@sign:	
  1583                           
  1584                           ; 1 bytes @ 0x17
  1585  0037                     	ds	1
  1586  0038                     ?_fround:	
  1587  0038                     ?_scale:	
  1588                           ; 3 bytes @ 0x18
  1589                           
  1590                           
  1591                           ; 3 bytes @ 0x18
  1592  0038                     	ds	3
  1593  003B                     ??_fround:	
  1594  003B                     ??_scale:	
  1595                           ; 1 bytes @ 0x1B
  1596                           
  1597                           
  1598                           ; 1 bytes @ 0x1B
  1599  003B                     	ds	2
  1600  003D                     _scale$754:	
  1601                           
  1602                           ; 3 bytes @ 0x1D
  1603  003D                     	ds	2
  1604  003F                     _fround$753:	
  1605                           
  1606                           ; 3 bytes @ 0x1F
  1607  003F                     	ds	1
  1608  0040                     scale@scl:	
  1609                           
  1610                           ; 1 bytes @ 0x20
  1611  0040                     	ds	1
  1612  0041                     ?___fttol:	
  1613  0041                     ___fttol@f1:	
  1614                           ; 4 bytes @ 0x21
  1615                           
  1616                           
  1617                           ; 3 bytes @ 0x21
  1618  0041                     	ds	1
  1619  0042                     _fround$752:	
  1620                           
  1621                           ; 3 bytes @ 0x22
  1622  0042                     	ds	3
  1623  0045                     ??___fttol:	
  1624  0045                     fround@prec:	
  1625                           ; 1 bytes @ 0x25
  1626                           
  1627                           
  1628                           ; 1 bytes @ 0x25
  1629  0045                     	ds	1
  1630  0046                     ?___ftadd:	
  1631  0046                     ___ftadd@f1:	
  1632                           ; 3 bytes @ 0x26
  1633                           
  1634                           
  1635                           ; 3 bytes @ 0x26
  1636  0046                     	ds	3
  1637  0049                     ___fttol@sign1:	
  1638  0049                     ___ftadd@f2:	
  1639                           ; 1 bytes @ 0x29
  1640                           
  1641                           
  1642                           ; 3 bytes @ 0x29
  1643  0049                     	ds	1
  1644  004A                     ___fttol@lval:	
  1645                           
  1646                           ; 4 bytes @ 0x2A
  1647  004A                     	ds	2
  1648  004C                     ??___ftadd:	
  1649                           
  1650                           ; 1 bytes @ 0x2C
  1651  004C                     	ds	2
  1652  004E                     ___fttol@exp1:	
  1653                           
  1654                           ; 1 bytes @ 0x2E
  1655  004E                     	ds	2
  1656  0050                     ___ftadd@sign:	
  1657                           
  1658                           ; 1 bytes @ 0x30
  1659  0050                     	ds	1
  1660  0051                     ___ftadd@exp2:	
  1661                           
  1662                           ; 1 bytes @ 0x31
  1663  0051                     	ds	1
  1664  0052                     ___ftadd@exp1:	
  1665                           
  1666                           ; 1 bytes @ 0x32
  1667  0052                     	ds	1
  1668  0053                     ?___ftsub:	
  1669  0053                     ___ftsub@f2:	
  1670                           ; 3 bytes @ 0x33
  1671                           
  1672                           
  1673                           ; 3 bytes @ 0x33
  1674  0053                     	ds	3
  1675  0056                     ___ftsub@f1:	
  1676                           
  1677                           ; 3 bytes @ 0x36
  1678  0056                     	ds	3
  1679  0059                     ?_sprintf:	
  1680  0059                     sprintf@f:	
  1681                           ; 2 bytes @ 0x39
  1682                           
  1683                           
  1684                           ; 2 bytes @ 0x39
  1685  0059                     	ds	5
  1686  005E                     ??_sprintf:	
  1687                           
  1688                           ; 1 bytes @ 0x3E
  1689  005E                     	ds	6
  1690  0064                     ??_main:	
  1691                           
  1692                           ; 1 bytes @ 0x44
  1693  0064                     	ds	2
  1694  0066                     main@adc_value:	
  1695                           
  1696                           ; 2 bytes @ 0x46
  1697  0066                     	ds	2
  1698                           
  1699                           	psect	maintext
  1700  0BBC                     __pmaintext:	
  1701 ;;
  1702 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1703 ;;
  1704 ;; *************** function _main *****************
  1705 ;; Defined at:
  1706 ;;		line 7 in file "main.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;		None
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;  adc_value       2   70[BANK0 ] unsigned int 
  1711 ;; Return value:  Size  Location     Type
  1712 ;;                  1    wreg      void 
  1713 ;; Registers used:
  1714 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1715 ;; Tracked objects:
  1716 ;;		On entry : B1F/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1720 ;;      Params:         0       0       0       0       0       0       0       0
  1721 ;;      Locals:         0       2       0       0       0       0       0       0
  1722 ;;      Temps:          0       2       0       0       0       0       0       0
  1723 ;;      Totals:         0       4       0       0       0       0       0       0
  1724 ;;Total ram usage:        4 bytes
  1725 ;; Hardware stack levels required when called:    4
  1726 ;; This function calls:
  1727 ;;		_ADC_GetConversion
  1728 ;;		_SYSTEM_Initialize
  1729 ;;		_TextLCD_Init
  1730 ;;		_TextLCD_Puts
  1731 ;;		___ftdiv
  1732 ;;		___ftmul
  1733 ;;		___lwtoft
  1734 ;;		_sprintf
  1735 ;; This function is called by:
  1736 ;;		Startup code after reset
  1737 ;; This function uses a non-reentrant model
  1738 ;;
  1739                           
  1740                           
  1741                           ;psect for function _main
  1742  0BBC                     _main:	
  1743                           
  1744                           ;main.c: 9: SYSTEM_Initialize();
  1745                           
  1746                           ;incstack = 0
  1747                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1748  0BBC  3196  266F  318B   	fcall	_SYSTEM_Initialize
  1749                           
  1750                           ;main.c: 10: TextLCD_Init();
  1751  0BBF  3188  2035  318B   	fcall	_TextLCD_Init
  1752  0BC2                     l51:	
  1753                           ;main.c: 11: while(1)
  1754                           
  1755                           
  1756                           ;main.c: 12: {
  1757                           ;main.c: 13: adc_result_t adc_value=ADC_GetConversion(VOLTAGE);
  1758  0BC2  3000               	movlw	0
  1759  0BC3  3196  26B1  318B   	fcall	_ADC_GetConversion
  1760  0BC6  0871               	movf	?_ADC_GetConversion+1,w
  1761  0BC7  0020               	movlb	0	; select bank0
  1762  0BC8  00E7               	movwf	main@adc_value+1
  1763  0BC9  0870               	movf	?_ADC_GetConversion,w
  1764  0BCA  00E6               	movwf	main@adc_value
  1765                           
  1766                           ;main.c: 14: vol=adc_value;
  1767  0BCB  0867               	movf	main@adc_value+1,w
  1768  0BCC  00F9               	movwf	___lwtoft@c+1
  1769  0BCD  0866               	movf	main@adc_value,w
  1770  0BCE  00F8               	movwf	___lwtoft@c
  1771  0BCF  3196  2689  318B   	fcall	___lwtoft
  1772  0BD2  0878               	movf	?___lwtoft,w
  1773  0BD3  0020               	movlb	0	; select bank0
  1774  0BD4  00EB               	movwf	_vol
  1775  0BD5  0879               	movf	?___lwtoft+1,w
  1776  0BD6  00EC               	movwf	_vol+1
  1777  0BD7  087A               	movf	?___lwtoft+2,w
  1778  0BD8  00ED               	movwf	_vol+2
  1779                           
  1780                           ;main.c: 15: vol*=5000;
  1781  0BD9  3040               	movlw	64
  1782  0BDA  00A8               	movwf	___ftmul@f1
  1783  0BDB  309C               	movlw	156
  1784  0BDC  00A9               	movwf	___ftmul@f1+1
  1785  0BDD  3045               	movlw	69
  1786  0BDE  00AA               	movwf	___ftmul@f1+2
  1787  0BDF  086B               	movf	_vol,w
  1788  0BE0  00AB               	movwf	___ftmul@f2
  1789  0BE1  086C               	movf	_vol+1,w
  1790  0BE2  00AC               	movwf	___ftmul@f2+1
  1791  0BE3  086D               	movf	_vol+2,w
  1792  0BE4  00AD               	movwf	___ftmul@f2+2
  1793  0BE5  318B  2308  318B   	fcall	___ftmul
  1794  0BE8  0020               	movlb	0	; select bank0
  1795  0BE9  0828               	movf	?___ftmul,w
  1796  0BEA  00EB               	movwf	_vol
  1797  0BEB  0829               	movf	?___ftmul+1,w
  1798  0BEC  00EC               	movwf	_vol+1
  1799  0BED  082A               	movf	?___ftmul+2,w
  1800  0BEE  00ED               	movwf	_vol+2
  1801                           
  1802                           ;main.c: 16: vol/=1023;
  1803  0BEF  30C0               	movlw	192
  1804  0BF0  00F8               	movwf	___ftdiv@f2
  1805  0BF1  307F               	movlw	127
  1806  0BF2  00F9               	movwf	___ftdiv@f2+1
  1807  0BF3  3044               	movlw	68
  1808  0BF4  00FA               	movwf	___ftdiv@f2+2
  1809  0BF5  086B               	movf	_vol,w
  1810  0BF6  00FB               	movwf	___ftdiv@f1
  1811  0BF7  086C               	movf	_vol+1,w
  1812  0BF8  00FC               	movwf	___ftdiv@f1+1
  1813  0BF9  086D               	movf	_vol+2,w
  1814  0BFA  00FD               	movwf	___ftdiv@f1+2
  1815  0BFB  318A  2260  318B   	fcall	___ftdiv
  1816  0BFE  0878               	movf	?___ftdiv,w
  1817  0BFF  0020               	movlb	0	; select bank0
  1818  0C00  00EB               	movwf	_vol
  1819  0C01  0879               	movf	?___ftdiv+1,w
  1820  0C02  00EC               	movwf	_vol+1
  1821  0C03  087A               	movf	?___ftdiv+2,w
  1822  0C04  00ED               	movwf	_vol+2
  1823                           
  1824                           ;main.c: 18: adc_value=ADC_GetConversion(TEMP);
  1825  0C05  3001               	movlw	1
  1826  0C06  3196  26B1  318B   	fcall	_ADC_GetConversion
  1827  0C09  0871               	movf	?_ADC_GetConversion+1,w
  1828  0C0A  0020               	movlb	0	; select bank0
  1829  0C0B  00E7               	movwf	main@adc_value+1
  1830  0C0C  0870               	movf	?_ADC_GetConversion,w
  1831  0C0D  00E6               	movwf	main@adc_value
  1832                           
  1833                           ;main.c: 19: temp=adc_value;
  1834  0C0E  0867               	movf	main@adc_value+1,w
  1835  0C0F  00F9               	movwf	___lwtoft@c+1
  1836  0C10  0866               	movf	main@adc_value,w
  1837  0C11  00F8               	movwf	___lwtoft@c
  1838  0C12  3196  2689  318B   	fcall	___lwtoft
  1839  0C15  0878               	movf	?___lwtoft,w
  1840  0C16  0020               	movlb	0	; select bank0
  1841  0C17  00E8               	movwf	_temp
  1842  0C18  0879               	movf	?___lwtoft+1,w
  1843  0C19  00E9               	movwf	_temp+1
  1844  0C1A  087A               	movf	?___lwtoft+2,w
  1845  0C1B  00EA               	movwf	_temp+2
  1846                           
  1847                           ;main.c: 20: temp*=500;
  1848  0C1C  3000               	movlw	0
  1849  0C1D  00A8               	movwf	___ftmul@f1
  1850  0C1E  30FA               	movlw	250
  1851  0C1F  00A9               	movwf	___ftmul@f1+1
  1852  0C20  3043               	movlw	67
  1853  0C21  00AA               	movwf	___ftmul@f1+2
  1854  0C22  0868               	movf	_temp,w
  1855  0C23  00AB               	movwf	___ftmul@f2
  1856  0C24  0869               	movf	_temp+1,w
  1857  0C25  00AC               	movwf	___ftmul@f2+1
  1858  0C26  086A               	movf	_temp+2,w
  1859  0C27  00AD               	movwf	___ftmul@f2+2
  1860  0C28  318B  2308  318B   	fcall	___ftmul
  1861  0C2B  0020               	movlb	0	; select bank0
  1862  0C2C  0828               	movf	?___ftmul,w
  1863  0C2D  00E8               	movwf	_temp
  1864  0C2E  0829               	movf	?___ftmul+1,w
  1865  0C2F  00E9               	movwf	_temp+1
  1866  0C30  082A               	movf	?___ftmul+2,w
  1867  0C31  00EA               	movwf	_temp+2
  1868                           
  1869                           ;main.c: 21: temp/=1023;
  1870  0C32  30C0               	movlw	192
  1871  0C33  00F8               	movwf	___ftdiv@f2
  1872  0C34  307F               	movlw	127
  1873  0C35  00F9               	movwf	___ftdiv@f2+1
  1874  0C36  3044               	movlw	68
  1875  0C37  00FA               	movwf	___ftdiv@f2+2
  1876  0C38  0868               	movf	_temp,w
  1877  0C39  00FB               	movwf	___ftdiv@f1
  1878  0C3A  0869               	movf	_temp+1,w
  1879  0C3B  00FC               	movwf	___ftdiv@f1+1
  1880  0C3C  086A               	movf	_temp+2,w
  1881  0C3D  00FD               	movwf	___ftdiv@f1+2
  1882  0C3E  318A  2260  318B   	fcall	___ftdiv
  1883  0C41  0878               	movf	?___ftdiv,w
  1884  0C42  0020               	movlb	0	; select bank0
  1885  0C43  00E8               	movwf	_temp
  1886  0C44  0879               	movf	?___ftdiv+1,w
  1887  0C45  00E9               	movwf	_temp+1
  1888  0C46  087A               	movf	?___ftdiv+2,w
  1889  0C47  00EA               	movwf	_temp+2
  1890                           
  1891                           ;main.c: 23: sprintf(str, "Vol=%.1f", vol);
  1892  0C48  3084               	movlw	low (STR_1| (0+32768))
  1893  0C49  00D9               	movwf	sprintf@f
  1894  0C4A  3098               	movlw	high (STR_1| (0+32768))
  1895  0C4B  00DA               	movwf	sprintf@f+1
  1896  0C4C  086B               	movf	_vol,w
  1897  0C4D  00DB               	movwf	?_sprintf+2
  1898  0C4E  086C               	movf	_vol+1,w
  1899  0C4F  00DC               	movwf	?_sprintf+3
  1900  0C50  086D               	movf	_vol+2,w
  1901  0C51  00DD               	movwf	?_sprintf+4
  1902  0C52  30B7               	movlw	(low (_str| 0))& (0+255)
  1903  0C53  3183  2303  318B   	fcall	_sprintf
  1904                           
  1905                           ;main.c: 24: TextLCD_Puts(0, 0, str, 0);
  1906  0C56  01F4               	clrf	TextLCD_Puts@idx
  1907  0C57  30B7               	movlw	(low (_str| 0))& (0+255)
  1908  0C58  0020               	movlb	0	; select bank0
  1909  0C59  00E4               	movwf	??_main
  1910  0C5A  0864               	movf	??_main,w
  1911  0C5B  00F5               	movwf	TextLCD_Puts@data
  1912  0C5C  01F6               	clrf	TextLCD_Puts@length_or_type
  1913  0C5D  3000               	movlw	0
  1914  0C5E  3189  2121  318B   	fcall	_TextLCD_Puts
  1915                           
  1916                           ;main.c: 25: sprintf(str, "Temp=%.1f", temp);
  1917  0C61  307A               	movlw	low (STR_2| (0+32768))
  1918  0C62  0020               	movlb	0	; select bank0
  1919  0C63  00D9               	movwf	sprintf@f
  1920  0C64  3098               	movlw	high (STR_2| (0+32768))
  1921  0C65  00DA               	movwf	sprintf@f+1
  1922  0C66  0868               	movf	_temp,w
  1923  0C67  00DB               	movwf	?_sprintf+2
  1924  0C68  0869               	movf	_temp+1,w
  1925  0C69  00DC               	movwf	?_sprintf+3
  1926  0C6A  086A               	movf	_temp+2,w
  1927  0C6B  00DD               	movwf	?_sprintf+4
  1928  0C6C  30B7               	movlw	(low (_str| 0))& (0+255)
  1929  0C6D  3183  2303  318B   	fcall	_sprintf
  1930                           
  1931                           ;main.c: 26: TextLCD_Puts(1, 0, str, 0);
  1932  0C70  01F4               	clrf	TextLCD_Puts@idx
  1933  0C71  30B7               	movlw	(low (_str| 0))& (0+255)
  1934  0C72  0020               	movlb	0	; select bank0
  1935  0C73  00E4               	movwf	??_main
  1936  0C74  0864               	movf	??_main,w
  1937  0C75  00F5               	movwf	TextLCD_Puts@data
  1938  0C76  01F6               	clrf	TextLCD_Puts@length_or_type
  1939  0C77  3001               	movlw	1
  1940  0C78  3189  2121  318B   	fcall	_TextLCD_Puts
  1941                           
  1942                           ;main.c: 28: _delay((unsigned long)((100)*(32000000/4000.0)));
  1943  0C7B  3005               	movlw	5
  1944  0C7C  0020               	movlb	0	; select bank0
  1945  0C7D  00E5               	movwf	??_main+1
  1946  0C7E  300F               	movlw	15
  1947  0C7F  00E4               	movwf	??_main
  1948  0C80  30F1               	movlw	241
  1949  0C81                     u3657:	
  1950  0C81  0B89               	decfsz	9,f
  1951  0C82  2C81               	goto	u3657
  1952  0C83  0BE4               	decfsz	??_main,f
  1953  0C84  2C81               	goto	u3657
  1954  0C85  0BE5               	decfsz	??_main+1,f
  1955  0C86  2C81               	goto	u3657
  1956  0C87  2BC2               	goto	l51
  1957  0C88                     __end_of_main:	
  1958                           
  1959                           	psect	text1
  1960  0303                     __ptext1:	
  1961 ;; *************** function _sprintf *****************
  1962 ;; Defined at:
  1963 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;  sp              1    wreg     PTR unsigned char 
  1966 ;;		 -> str(17), 
  1967 ;;  f               2   57[BANK0 ] PTR const unsigned char 
  1968 ;;		 -> STR_2(10), STR_1(9), 
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;  sp              1   18[BANK1 ] PTR unsigned char 
  1971 ;;		 -> str(17), 
  1972 ;;  tmpval          4   12[BANK1 ] struct .
  1973 ;;  val             4    6[BANK1 ] unsigned long 
  1974 ;;  fval            3   19[BANK1 ] unsigned long 
  1975 ;;  prec            2   16[BANK1 ] int 
  1976 ;;  exp             2   10[BANK1 ] int 
  1977 ;;  flag            2    4[BANK1 ] unsigned short 
  1978 ;;  cp              2    0        PTR const unsigned char 
  1979 ;;  len             2    0        unsigned int 
  1980 ;;  width           2    0        int 
  1981 ;;  c               1   22[BANK1 ] char 
  1982 ;;  ap              1    3[BANK1 ] PTR void [1]
  1983 ;;		 -> ?_sprintf(2), 
  1984 ;;  d               1    0        unsigned char 
  1985 ;; Return value:  Size  Location     Type
  1986 ;;                  2   57[BANK0 ] int 
  1987 ;; Registers used:
  1988 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1989 ;; Tracked objects:
  1990 ;;		On entry : 0/0
  1991 ;;		On exit  : 0/0
  1992 ;;		Unchanged: 0/0
  1993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1994 ;;      Params:         0       5       0       0       0       0       0       0
  1995 ;;      Locals:         0       0      23       0       0       0       0       0
  1996 ;;      Temps:          0       6       0       0       0       0       0       0
  1997 ;;      Totals:         0      11      23       0       0       0       0       0
  1998 ;;Total ram usage:       34 bytes
  1999 ;; Hardware stack levels used:    1
  2000 ;; Hardware stack levels required when called:    3
  2001 ;; This function calls:
  2002 ;;		___awdiv
  2003 ;;		___ftadd
  2004 ;;		___ftge
  2005 ;;		___ftmul
  2006 ;;		___ftneg
  2007 ;;		___ftsub
  2008 ;;		___fttol
  2009 ;;		___lldiv
  2010 ;;		___llmod
  2011 ;;		___lltoft
  2012 ;;		___wmul
  2013 ;;		__div_to_l_
  2014 ;;		__tdiv_to_l_
  2015 ;;		_fround
  2016 ;;		_isdigit
  2017 ;;		_scale
  2018 ;; This function is called by:
  2019 ;;		_main
  2020 ;; This function uses a non-reentrant model
  2021 ;;
  2022                           
  2023                           
  2024                           ;psect for function _sprintf
  2025  0303                     _sprintf:	
  2026                           
  2027                           ;incstack = 0
  2028                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2029                           ;sprintf@sp stored from wreg
  2030  0303  0021               	movlb	1	; select bank1
  2031  0304  00B2               	movwf	sprintf@sp^(0+128)
  2032                           
  2033                           ;doprnt.c: 494: va_list ap;
  2034                           ;doprnt.c: 499: signed char c;
  2035                           ;doprnt.c: 501: int width;
  2036                           ;doprnt.c: 504: int prec;
  2037                           ;doprnt.c: 508: unsigned short flag;
  2038                           ;doprnt.c: 515: char d;
  2039                           ;doprnt.c: 516: double fval;
  2040                           ;doprnt.c: 517: int exp;
  2041                           ;doprnt.c: 523: union {
  2042                           ;doprnt.c: 524: unsigned long vd;
  2043                           ;doprnt.c: 525: double integ;
  2044                           ;doprnt.c: 526: } tmpval;
  2045                           ;doprnt.c: 528: unsigned long val;
  2046                           ;doprnt.c: 529: unsigned len;
  2047                           ;doprnt.c: 530: const char * cp;
  2048                           ;doprnt.c: 533: *ap = __va_start();
  2049  0305  305B               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  2050  0306  0020               	movlb	0	; select bank0
  2051  0307  00DE               	movwf	??_sprintf
  2052  0308  085E               	movf	??_sprintf,w
  2053  0309  0021               	movlb	1	; select bank1
  2054  030A  00A3               	movwf	sprintf@ap^(0+128)
  2055  030B                     l2559:	
  2056                           ;doprnt.c: 536: while(c = *f++) {
  2057                           
  2058  030B  0020               	movlb	0	; select bank0
  2059  030C  085A               	movf	sprintf@f+1,w
  2060  030D  00DF               	movwf	??_sprintf+1
  2061  030E  0859               	movf	sprintf@f,w
  2062  030F  00DE               	movwf	??_sprintf
  2063  0310  0AD9               	incf	sprintf@f,f
  2064  0311  1903               	skipnz
  2065  0312  0ADA               	incf	sprintf@f+1,f
  2066  0313  085E               	movf	??_sprintf,w
  2067  0314  0084               	movwf	4
  2068  0315  085F               	movf	??_sprintf+1,w
  2069  0316  0085               	movwf	5
  2070  0317  0800               	movf	0,w	;code access
  2071  0318  00E0               	movwf	??_sprintf+2
  2072  0319  0860               	movf	??_sprintf+2,w
  2073  031A  0021               	movlb	1	; select bank1
  2074  031B  00B6               	movwf	sprintf@c^(0+128)
  2075  031C  0836               	movf	sprintf@c^(0+128),w
  2076  031D  1903               	btfsc	3,2
  2077  031E  2FEA               	goto	l2561
  2078                           
  2079                           ;doprnt.c: 538: if(c != '%')
  2080  031F  3025               	movlw	37
  2081  0320  0636               	xorwf	sprintf@c^(0+128),w
  2082  0321  1903               	btfsc	3,2
  2083  0322  2B26               	goto	l2375
  2084                           
  2085                           ;doprnt.c: 540: {
  2086                           ;doprnt.c: 541: ((*sp++ = (c)));
  2087  0323  0836               	movf	sprintf@c^(0+128),w
  2088  0324  0020               	movlb	0	; select bank0
  2089  0325  2FDC               	goto	L5
  2090  0326                     l2375:	
  2091                           ;doprnt.c: 542: continue;
  2092                           
  2093                           
  2094                           ;doprnt.c: 543: }
  2095                           ;doprnt.c: 548: flag = 0;
  2096  0326  01A4               	clrf	sprintf@flag^(0+128)
  2097  0327  01A5               	clrf	(sprintf@flag+1)^(0+128)
  2098                           
  2099                           ;doprnt.c: 611: if(*f == '.') {
  2100  0328  0020               	movlb	0	; select bank0
  2101  0329  0859               	movf	sprintf@f,w
  2102  032A  0084               	movwf	4
  2103  032B  085A               	movf	sprintf@f+1,w
  2104  032C  0085               	movwf	5
  2105  032D  0012               	moviw fsr0++
  2106  032E  3A2E               	xorlw	46
  2107  032F  1D03               	btfss	3,2
  2108  0330  2B73               	goto	l2391
  2109                           
  2110                           ;doprnt.c: 612: flag |= 0x4000;
  2111  0331  0021               	movlb	1	; select bank1
  2112  0332  1725               	bsf	(sprintf@flag^(0+128)+1),6
  2113                           
  2114                           ;doprnt.c: 613: f++;
  2115  0333  3001               	movlw	1
  2116  0334  0020               	movlb	0	; select bank0
  2117  0335  07D9               	addwf	sprintf@f,f
  2118  0336  3000               	movlw	0
  2119  0337  3DDA               	addwfc	sprintf@f+1,f
  2120                           
  2121                           ;doprnt.c: 620: {
  2122                           ;doprnt.c: 621: prec = 0;
  2123  0338  0021               	movlb	1	; select bank1
  2124  0339  01B0               	clrf	sprintf@prec^(0+128)
  2125  033A  01B1               	clrf	(sprintf@prec+1)^(0+128)
  2126  033B                     l2389:	
  2127                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2128                           
  2129  033B  0020               	movlb	0	; select bank0
  2130  033C  0859               	movf	sprintf@f,w
  2131  033D  0084               	movwf	4
  2132  033E  085A               	movf	sprintf@f+1,w
  2133  033F  0085               	movwf	5
  2134  0340  0800               	movf	0,w	;code access
  2135  0341  3196  267B  3183   	fcall	_isdigit
  2136  0344  1C03               	btfss	3,0
  2137  0345  2B7A               	goto	l2397
  2138                           
  2139                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2140  0346  0020               	movlb	0	; select bank0
  2141  0347  0859               	movf	sprintf@f,w
  2142  0348  0084               	movwf	4
  2143  0349  085A               	movf	sprintf@f+1,w
  2144  034A  0085               	movwf	5
  2145  034B  0800               	movf	0,w	;code access
  2146  034C  00DE               	movwf	??_sprintf
  2147  034D  01DF               	clrf	??_sprintf+1
  2148  034E  0021               	movlb	1	; select bank1
  2149  034F  0831               	movf	(sprintf@prec+1)^(0+128),w
  2150  0350  0020               	movlb	0	; select bank0
  2151  0351  00A5               	movwf	___wmul@multiplier+1
  2152  0352  0021               	movlb	1	; select bank1
  2153  0353  0830               	movf	sprintf@prec^(0+128),w
  2154  0354  0020               	movlb	0	; select bank0
  2155  0355  00A4               	movwf	___wmul@multiplier
  2156  0356  300A               	movlw	10
  2157  0357  00A6               	movwf	___wmul@multiplicand
  2158  0358  3000               	movlw	0
  2159  0359  00A7               	movwf	___wmul@multiplicand+1
  2160  035A  3196  26CA  3183   	fcall	___wmul
  2161  035D  0020               	movlb	0	; select bank0
  2162  035E  085E               	movf	??_sprintf,w
  2163  035F  0724               	addwf	?___wmul,w
  2164  0360  00E0               	movwf	??_sprintf+2
  2165  0361  085F               	movf	??_sprintf+1,w
  2166  0362  3D25               	addwfc	?___wmul+1,w
  2167  0363  00E1               	movwf	??_sprintf+3
  2168  0364  0860               	movf	??_sprintf+2,w
  2169  0365  3ED0               	addlw	208
  2170  0366  0021               	movlb	1	; select bank1
  2171  0367  00B0               	movwf	sprintf@prec^(0+128)
  2172  0368  30FF               	movlw	255
  2173  0369  0020               	movlb	0	; select bank0
  2174  036A  3D61               	addwfc	??_sprintf+3,w
  2175  036B  0021               	movlb	1	; select bank1
  2176  036C  00B1               	movwf	(sprintf@prec+1)^(0+128)
  2177  036D  3001               	movlw	1
  2178  036E  0020               	movlb	0	; select bank0
  2179  036F  07D9               	addwf	sprintf@f,f
  2180  0370  3000               	movlw	0
  2181  0371  3DDA               	addwfc	sprintf@f+1,f
  2182  0372  2B3B               	goto	l2389
  2183  0373                     l2391:	
  2184                           ;doprnt.c: 624: }
  2185                           ;doprnt.c: 625: } else {
  2186                           
  2187                           
  2188                           ;doprnt.c: 626: prec = 0;
  2189  0373  0021               	movlb	1	; select bank1
  2190  0374  01B0               	clrf	sprintf@prec^(0+128)
  2191  0375  01B1               	clrf	(sprintf@prec+1)^(0+128)
  2192                           
  2193                           ;doprnt.c: 628: flag |= 0x1000;
  2194  0376  1625               	bsf	(sprintf@flag^(0+128)+1),4
  2195                           
  2196                           ;doprnt.c: 630: }
  2197                           ;doprnt.c: 635: switch(c = *f++) {
  2198  0377  2B7A               	goto	l2397
  2199  0378                     l205:	
  2200                           ;doprnt.c: 662: case 'f':
  2201                           
  2202                           ;doprnt.c: 638: goto alldone;
  2203                           
  2204                           ;doprnt.c: 637: case 0:
  2205                           
  2206                           
  2207                           ;doprnt.c: 663: flag |= 0x400;
  2208  0378  1525               	bsf	(sprintf@flag^(0+128)+1),2
  2209                           
  2210                           ;doprnt.c: 664: break;
  2211  0379  2B90               	goto	l2399
  2212  037A                     l2397:	
  2213                           ;doprnt.c: 822: }
  2214                           
  2215                           ;doprnt.c: 813: continue;
  2216                           
  2217                           ;doprnt.c: 802: default:
  2218                           
  2219  037A  0020               	movlb	0	; select bank0
  2220  037B  085A               	movf	sprintf@f+1,w
  2221  037C  00DF               	movwf	??_sprintf+1
  2222  037D  0859               	movf	sprintf@f,w
  2223  037E  00DE               	movwf	??_sprintf
  2224  037F  0AD9               	incf	sprintf@f,f
  2225  0380  1903               	skipnz
  2226  0381  0ADA               	incf	sprintf@f+1,f
  2227  0382  085E               	movf	??_sprintf,w
  2228  0383  0084               	movwf	4
  2229  0384  085F               	movf	??_sprintf+1,w
  2230  0385  0085               	movwf	5
  2231  0386  0800               	movf	0,w	;code access
  2232  0387  0021               	movlb	1	; select bank1
  2233  0388  00B6               	movwf	sprintf@c^(0+128)
  2234                           
  2235                           ; Switch size 1, requested type "space"
  2236                           ; Number of cases is 2, Range of values is 0 to 102
  2237                           ; switch strategies available:
  2238                           ; Name         Instructions Cycles
  2239                           ; simple_byte            7     4 (average)
  2240                           ; direct_byte          212     6 (fixed)
  2241                           ; jumptable            260     6 (fixed)
  2242                           ;	Chosen strategy is simple_byte
  2243  0389  3A00               	xorlw	0	; case 0
  2244  038A  1903               	skipnz
  2245  038B  2FEA               	goto	l2561
  2246  038C  3A66               	xorlw	102	; case 102
  2247  038D  1903               	skipnz
  2248  038E  2B78               	goto	l205
  2249  038F  2B0B               	goto	l2559
  2250  0390                     l2399:	
  2251                           
  2252                           ;doprnt.c: 825: if(flag & (0x700)) {
  2253  0390  3000               	movlw	0
  2254  0391  0524               	andwf	sprintf@flag^(0+128),w
  2255  0392  0020               	movlb	0	; select bank0
  2256  0393  00DE               	movwf	??_sprintf
  2257  0394  3007               	movlw	7
  2258  0395  0021               	movlb	1	; select bank1
  2259  0396  0525               	andwf	(sprintf@flag+1)^(0+128),w
  2260  0397  0020               	movlb	0	; select bank0
  2261  0398  00DF               	movwf	??_sprintf+1
  2262  0399  085E               	movf	??_sprintf,w
  2263  039A  045F               	iorwf	??_sprintf+1,w
  2264  039B  1903               	btfsc	3,2
  2265  039C  2F84               	goto	l2543
  2266                           
  2267                           ;doprnt.c: 827: if(flag & 0x1000)
  2268  039D  0021               	movlb	1	; select bank1
  2269  039E  1E25               	btfss	(sprintf@flag+1)^(0+128),4
  2270  039F  2BA4               	goto	l2405
  2271                           
  2272                           ;doprnt.c: 829: prec = 6;
  2273  03A0  3006               	movlw	6
  2274  03A1  00B0               	movwf	sprintf@prec^(0+128)
  2275  03A2  3000               	movlw	0
  2276  03A3  00B1               	movwf	(sprintf@prec^(0+128)+1)
  2277  03A4                     l2405:	
  2278                           
  2279                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2280  03A4  0823               	movf	sprintf@ap^(0+128),w
  2281  03A5  0086               	movwf	6
  2282  03A6  0187               	clrf	7
  2283  03A7  3F40               	moviw [0]fsr1
  2284  03A8  00B3               	movwf	sprintf@fval^(0+128)
  2285  03A9  3F41               	moviw [1]fsr1
  2286  03AA  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2287  03AB  3F42               	moviw [2]fsr1
  2288  03AC  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2289  03AD  3003               	movlw	3
  2290  03AE  0020               	movlb	0	; select bank0
  2291  03AF  00DE               	movwf	??_sprintf
  2292  03B0  085E               	movf	??_sprintf,w
  2293  03B1  0021               	movlb	1	; select bank1
  2294  03B2  07A3               	addwf	sprintf@ap^(0+128),f
  2295                           
  2296                           ;doprnt.c: 831: if(fval < 0.0) {
  2297  03B3  0833               	movf	sprintf@fval^(0+128),w
  2298  03B4  00F0               	movwf	___ftge@ff1
  2299  03B5  0834               	movf	(sprintf@fval+1)^(0+128),w
  2300  03B6  00F1               	movwf	___ftge@ff1+1
  2301  03B7  0835               	movf	(sprintf@fval+2)^(0+128),w
  2302  03B8  00F2               	movwf	___ftge@ff1+2
  2303  03B9  3000               	movlw	0
  2304  03BA  00F3               	movwf	___ftge@ff2
  2305  03BB  3000               	movlw	0
  2306  03BC  00F4               	movwf	___ftge@ff2+1
  2307  03BD  3000               	movlw	0
  2308  03BE  00F5               	movwf	___ftge@ff2+2
  2309  03BF  3197  273E  3183   	fcall	___ftge
  2310  03C2  1803               	btfsc	3,0
  2311  03C3  2BD9               	goto	l2415
  2312                           
  2313                           ;doprnt.c: 832: fval = -fval;
  2314  03C4  0021               	movlb	1	; select bank1
  2315  03C5  0833               	movf	sprintf@fval^(0+128),w
  2316  03C6  00F0               	movwf	___ftneg@f1
  2317  03C7  0834               	movf	(sprintf@fval+1)^(0+128),w
  2318  03C8  00F1               	movwf	___ftneg@f1+1
  2319  03C9  0835               	movf	(sprintf@fval+2)^(0+128),w
  2320  03CA  00F2               	movwf	___ftneg@f1+2
  2321  03CB  3196  265E  3183   	fcall	___ftneg
  2322  03CE  0870               	movf	?___ftneg,w
  2323  03CF  0021               	movlb	1	; select bank1
  2324  03D0  00B3               	movwf	sprintf@fval^(0+128)
  2325  03D1  0871               	movf	?___ftneg+1,w
  2326  03D2  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2327  03D3  0872               	movf	?___ftneg+2,w
  2328  03D4  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2329                           
  2330                           ;doprnt.c: 833: flag |= 0x03;
  2331  03D5  3003               	movlw	3
  2332  03D6  04A4               	iorwf	sprintf@flag^(0+128),f
  2333  03D7  3000               	movlw	0
  2334  03D8  04A5               	iorwf	(sprintf@flag+1)^(0+128),f
  2335  03D9                     l2415:	
  2336                           
  2337                           ;doprnt.c: 834: }
  2338                           ;doprnt.c: 835: exp = 0;
  2339  03D9  0021               	movlb	1	; select bank1
  2340  03DA  01AA               	clrf	sprintf@exp^(0+128)
  2341  03DB  01AB               	clrf	(sprintf@exp+1)^(0+128)
  2342                           
  2343                           ;doprnt.c: 836: if( fval!=0) {
  2344  03DC  0835               	movf	(sprintf@fval+2)^(0+128),w
  2345  03DD  0434               	iorwf	(sprintf@fval+1)^(0+128),w
  2346  03DE  0433               	iorwf	sprintf@fval^(0+128),w
  2347  03DF  1903               	skipnz
  2348  03E0  2C99               	goto	l211
  2349                           
  2350                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2351  03E1  30B3               	movlw	low (sprintf@fval| 0)
  2352  03E2  0086               	movwf	6
  2353  03E3  0187               	clrf	7
  2354  03E4  3F40               	moviw [0]fsr1
  2355  03E5  0020               	movlb	0	; select bank0
  2356  03E6  00DE               	movwf	??_sprintf
  2357  03E7  3F41               	moviw [1]fsr1
  2358  03E8  00DF               	movwf	??_sprintf+1
  2359  03E9  3F42               	moviw [2]fsr1
  2360  03EA  00E0               	movwf	??_sprintf+2
  2361  03EB  3F43               	moviw [3]fsr1
  2362  03EC  00E1               	movwf	??_sprintf+3
  2363  03ED  300F               	movlw	15
  2364  03EE                     u3275:	
  2365  03EE  36E1               	lsrf	??_sprintf+3,f
  2366  03EF  0CE0               	rrf	??_sprintf+2,f
  2367  03F0  0CDF               	rrf	??_sprintf+1,f
  2368  03F1  0CDE               	rrf	??_sprintf,f
  2369  03F2  0B89               	decfsz	9,f
  2370  03F3  2BEE               	goto	u3275
  2371  03F4  30FF               	movlw	255
  2372  03F5  055E               	andwf	??_sprintf,w
  2373  03F6  00E2               	movwf	??_sprintf+4
  2374  03F7  3000               	movlw	0
  2375  03F8  055F               	andwf	??_sprintf+1,w
  2376  03F9  00E3               	movwf	??_sprintf+5
  2377  03FA  0862               	movf	??_sprintf+4,w
  2378  03FB  3E82               	addlw	130
  2379  03FC  0021               	movlb	1	; select bank1
  2380  03FD  00AA               	movwf	sprintf@exp^(0+128)
  2381  03FE  30FF               	movlw	255
  2382  03FF  0020               	movlb	0	; select bank0
  2383  0400  3D63               	addwfc	??_sprintf+5,w
  2384  0401  0021               	movlb	1	; select bank1
  2385  0402  00AB               	movwf	(sprintf@exp+1)^(0+128)
  2386                           
  2387                           ;doprnt.c: 838: exp--;
  2388  0403  30FF               	movlw	255
  2389  0404  07AA               	addwf	sprintf@exp^(0+128),f
  2390  0405  30FF               	movlw	255
  2391  0406  3DAB               	addwfc	(sprintf@exp+1)^(0+128),f
  2392                           
  2393                           ;doprnt.c: 839: exp *= 3;
  2394  0407  3003               	movlw	3
  2395  0408  0020               	movlb	0	; select bank0
  2396  0409  00A4               	movwf	___wmul@multiplier
  2397  040A  3000               	movlw	0
  2398  040B  00A5               	movwf	___wmul@multiplier+1
  2399  040C  0021               	movlb	1	; select bank1
  2400  040D  082B               	movf	(sprintf@exp+1)^(0+128),w
  2401  040E  0020               	movlb	0	; select bank0
  2402  040F  00A7               	movwf	___wmul@multiplicand+1
  2403  0410  0021               	movlb	1	; select bank1
  2404  0411  082A               	movf	sprintf@exp^(0+128),w
  2405  0412  0020               	movlb	0	; select bank0
  2406  0413  00A6               	movwf	___wmul@multiplicand
  2407  0414  3196  26CA  3183   	fcall	___wmul
  2408  0417  0020               	movlb	0	; select bank0
  2409  0418  0825               	movf	?___wmul+1,w
  2410  0419  0021               	movlb	1	; select bank1
  2411  041A  00AB               	movwf	(sprintf@exp+1)^(0+128)
  2412  041B  0020               	movlb	0	; select bank0
  2413  041C  0824               	movf	?___wmul,w
  2414  041D  0021               	movlb	1	; select bank1
  2415  041E  00AA               	movwf	sprintf@exp^(0+128)
  2416                           
  2417                           ;doprnt.c: 840: exp /= 10;
  2418  041F  300A               	movlw	10
  2419  0420  00F7               	movwf	___awdiv@divisor
  2420  0421  3000               	movlw	0
  2421  0422  00F8               	movwf	___awdiv@divisor+1
  2422  0423  082B               	movf	(sprintf@exp+1)^(0+128),w
  2423  0424  00FA               	movwf	___awdiv@dividend+1
  2424  0425  082A               	movf	sprintf@exp^(0+128),w
  2425  0426  00F9               	movwf	___awdiv@dividend
  2426  0427  3188  20CF  3183   	fcall	___awdiv
  2427  042A  0878               	movf	?___awdiv+1,w
  2428  042B  0021               	movlb	1	; select bank1
  2429  042C  00AB               	movwf	(sprintf@exp+1)^(0+128)
  2430  042D  0877               	movf	?___awdiv,w
  2431  042E  00AA               	movwf	sprintf@exp^(0+128)
  2432                           
  2433                           ;doprnt.c: 841: if(exp < 0)
  2434  042F  1FAB               	btfss	(sprintf@exp+1)^(0+128),7
  2435  0430  2C35               	goto	l2431
  2436                           
  2437                           ;doprnt.c: 842: exp--;
  2438  0431  30FF               	movlw	255
  2439  0432  07AA               	addwf	sprintf@exp^(0+128),f
  2440  0433  30FF               	movlw	255
  2441  0434  3DAB               	addwfc	(sprintf@exp+1)^(0+128),f
  2442  0435                     l2431:	
  2443                           
  2444                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2445  0435  032A               	decf	sprintf@exp^(0+128),w
  2446  0436  3AFF               	xorlw	255
  2447  0437  3180  20BF  3183   	fcall	_scale
  2448  043A  0020               	movlb	0	; select bank0
  2449  043B  0838               	movf	?_scale,w
  2450  043C  0021               	movlb	1	; select bank1
  2451  043D  00AC               	movwf	sprintf@tmpval^(0+128)
  2452  043E  0020               	movlb	0	; select bank0
  2453  043F  0839               	movf	?_scale+1,w
  2454  0440  0021               	movlb	1	; select bank1
  2455  0441  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  2456  0442  0020               	movlb	0	; select bank0
  2457  0443  083A               	movf	?_scale+2,w
  2458  0444  0021               	movlb	1	; select bank1
  2459  0445  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  2460                           
  2461                           ;doprnt.c: 847: tmpval.integ *= fval;
  2462  0446  0833               	movf	sprintf@fval^(0+128),w
  2463  0447  0020               	movlb	0	; select bank0
  2464  0448  00A8               	movwf	___ftmul@f1
  2465  0449  0021               	movlb	1	; select bank1
  2466  044A  0834               	movf	(sprintf@fval+1)^(0+128),w
  2467  044B  0020               	movlb	0	; select bank0
  2468  044C  00A9               	movwf	___ftmul@f1+1
  2469  044D  0021               	movlb	1	; select bank1
  2470  044E  0835               	movf	(sprintf@fval+2)^(0+128),w
  2471  044F  0020               	movlb	0	; select bank0
  2472  0450  00AA               	movwf	___ftmul@f1+2
  2473  0451  0021               	movlb	1	; select bank1
  2474  0452  082C               	movf	sprintf@tmpval^(0+128),w
  2475  0453  0020               	movlb	0	; select bank0
  2476  0454  00AB               	movwf	___ftmul@f2
  2477  0455  0021               	movlb	1	; select bank1
  2478  0456  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  2479  0457  0020               	movlb	0	; select bank0
  2480  0458  00AC               	movwf	___ftmul@f2+1
  2481  0459  0021               	movlb	1	; select bank1
  2482  045A  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  2483  045B  0020               	movlb	0	; select bank0
  2484  045C  00AD               	movwf	___ftmul@f2+2
  2485  045D  318B  2308  3183   	fcall	___ftmul
  2486  0460  0020               	movlb	0	; select bank0
  2487  0461  0828               	movf	?___ftmul,w
  2488  0462  0021               	movlb	1	; select bank1
  2489  0463  00AC               	movwf	sprintf@tmpval^(0+128)
  2490  0464  0020               	movlb	0	; select bank0
  2491  0465  0829               	movf	?___ftmul+1,w
  2492  0466  0021               	movlb	1	; select bank1
  2493  0467  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  2494  0468  0020               	movlb	0	; select bank0
  2495  0469  082A               	movf	?___ftmul+2,w
  2496  046A  0021               	movlb	1	; select bank1
  2497  046B  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  2498                           
  2499                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2500  046C  082C               	movf	sprintf@tmpval^(0+128),w
  2501  046D  00F0               	movwf	___ftge@ff1
  2502  046E  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  2503  046F  00F1               	movwf	___ftge@ff1+1
  2504  0470  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  2505  0471  00F2               	movwf	___ftge@ff1+2
  2506  0472  3000               	movlw	0
  2507  0473  00F3               	movwf	___ftge@ff2
  2508  0474  3080               	movlw	128
  2509  0475  00F4               	movwf	___ftge@ff2+1
  2510  0476  303F               	movlw	63
  2511  0477  00F5               	movwf	___ftge@ff2+2
  2512  0478  3197  273E  3183   	fcall	___ftge
  2513  047B  1803               	btfsc	3,0
  2514  047C  2C82               	goto	l2439
  2515                           
  2516                           ;doprnt.c: 849: exp--;
  2517  047D  30FF               	movlw	255
  2518  047E  0021               	movlb	1	; select bank1
  2519  047F  07AA               	addwf	sprintf@exp^(0+128),f
  2520  0480  30FF               	movlw	255
  2521  0481  2C98               	goto	L1
  2522  0482                     l2439:	
  2523                           
  2524                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2525  0482  0021               	movlb	1	; select bank1
  2526  0483  082C               	movf	sprintf@tmpval^(0+128),w
  2527  0484  00F0               	movwf	___ftge@ff1
  2528  0485  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  2529  0486  00F1               	movwf	___ftge@ff1+1
  2530  0487  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  2531  0488  00F2               	movwf	___ftge@ff1+2
  2532  0489  3000               	movlw	0
  2533  048A  00F3               	movwf	___ftge@ff2
  2534  048B  3020               	movlw	32
  2535  048C  00F4               	movwf	___ftge@ff2+1
  2536  048D  3041               	movlw	65
  2537  048E  00F5               	movwf	___ftge@ff2+2
  2538  048F  3197  273E  3183   	fcall	___ftge
  2539  0492  1C03               	btfss	3,0
  2540  0493  2C99               	goto	l211
  2541                           
  2542                           ;doprnt.c: 851: exp++;
  2543  0494  3001               	movlw	1
  2544  0495  0021               	movlb	1	; select bank1
  2545  0496  07AA               	addwf	sprintf@exp^(0+128),f
  2546  0497  3000               	movlw	0
  2547  0498                     L1:	
  2548  0498  3DAB               	addwfc	(sprintf@exp+1)^(0+128),f
  2549  0499                     l211:	
  2550                           
  2551                           ;doprnt.c: 852: }
  2552                           ;doprnt.c: 1112: if(prec <= 12)
  2553  0499  0021               	movlb	1	; select bank1
  2554  049A  0831               	movf	(sprintf@prec+1)^(0+128),w
  2555  049B  3A80               	xorlw	128
  2556  049C  0020               	movlb	0	; select bank0
  2557  049D  00DE               	movwf	??_sprintf
  2558  049E  3080               	movlw	128
  2559  049F  025E               	subwf	??_sprintf,w
  2560  04A0  1D03               	skipz
  2561  04A1  2CA5               	goto	u3315
  2562  04A2  300D               	movlw	13
  2563  04A3  0021               	movlb	1	; select bank1
  2564  04A4  0230               	subwf	sprintf@prec^(0+128),w
  2565  04A5                     u3315:	
  2566  04A5  1803               	skipnc
  2567  04A6  2CCE               	goto	l2445
  2568                           
  2569                           ;doprnt.c: 1113: fval += fround(prec);
  2570  04A7  0021               	movlb	1	; select bank1
  2571  04A8  0830               	movf	sprintf@prec^(0+128),w
  2572  04A9  318E  269B  3183   	fcall	_fround
  2573  04AC  0020               	movlb	0	; select bank0
  2574  04AD  0838               	movf	?_fround,w
  2575  04AE  00C6               	movwf	___ftadd@f1
  2576  04AF  0839               	movf	?_fround+1,w
  2577  04B0  00C7               	movwf	___ftadd@f1+1
  2578  04B1  083A               	movf	?_fround+2,w
  2579  04B2  00C8               	movwf	___ftadd@f1+2
  2580  04B3  0021               	movlb	1	; select bank1
  2581  04B4  0833               	movf	sprintf@fval^(0+128),w
  2582  04B5  0020               	movlb	0	; select bank0
  2583  04B6  00C9               	movwf	___ftadd@f2
  2584  04B7  0021               	movlb	1	; select bank1
  2585  04B8  0834               	movf	(sprintf@fval+1)^(0+128),w
  2586  04B9  0020               	movlb	0	; select bank0
  2587  04BA  00CA               	movwf	___ftadd@f2+1
  2588  04BB  0021               	movlb	1	; select bank1
  2589  04BC  0835               	movf	(sprintf@fval+2)^(0+128),w
  2590  04BD  0020               	movlb	0	; select bank0
  2591  04BE  00CB               	movwf	___ftadd@f2+2
  2592  04BF  318C  2488  3183   	fcall	___ftadd
  2593  04C2  0020               	movlb	0	; select bank0
  2594  04C3  0846               	movf	?___ftadd,w
  2595  04C4  0021               	movlb	1	; select bank1
  2596  04C5  00B3               	movwf	sprintf@fval^(0+128)
  2597  04C6  0020               	movlb	0	; select bank0
  2598  04C7  0847               	movf	?___ftadd+1,w
  2599  04C8  0021               	movlb	1	; select bank1
  2600  04C9  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2601  04CA  0020               	movlb	0	; select bank0
  2602  04CB  0848               	movf	?___ftadd+2,w
  2603  04CC  0021               	movlb	1	; select bank1
  2604  04CD  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2605  04CE                     l2445:	
  2606                           
  2607                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2608  04CE  0021               	movlb	1	; select bank1
  2609  04CF  082B               	movf	(sprintf@exp+1)^(0+128),w
  2610  04D0  3A80               	xorlw	128
  2611  04D1  0020               	movlb	0	; select bank0
  2612  04D2  00DE               	movwf	??_sprintf
  2613  04D3  3080               	movlw	128
  2614  04D4  025E               	subwf	??_sprintf,w
  2615  04D5  1D03               	skipz
  2616  04D6  2CDA               	goto	u3325
  2617  04D7  300A               	movlw	10
  2618  04D8  0021               	movlb	1	; select bank1
  2619  04D9  022A               	subwf	sprintf@exp^(0+128),w
  2620  04DA                     u3325:	
  2621  04DA  1803               	skipnc
  2622  04DB  2D05               	goto	l2453
  2623  04DC  0021               	movlb	1	; select bank1
  2624  04DD  0835               	movf	(sprintf@fval+2)^(0+128),w
  2625  04DE  0434               	iorwf	(sprintf@fval+1)^(0+128),w
  2626  04DF  0433               	iorwf	sprintf@fval^(0+128),w
  2627  04E0  1903               	skipnz
  2628  04E1  2D4D               	goto	l2467
  2629  04E2  0833               	movf	sprintf@fval^(0+128),w
  2630  04E3  0020               	movlb	0	; select bank0
  2631  04E4  00C1               	movwf	___fttol@f1
  2632  04E5  0021               	movlb	1	; select bank1
  2633  04E6  0834               	movf	(sprintf@fval+1)^(0+128),w
  2634  04E7  0020               	movlb	0	; select bank0
  2635  04E8  00C2               	movwf	___fttol@f1+1
  2636  04E9  0021               	movlb	1	; select bank1
  2637  04EA  0835               	movf	(sprintf@fval+2)^(0+128),w
  2638  04EB  0020               	movlb	0	; select bank0
  2639  04EC  00C3               	movwf	___fttol@f1+2
  2640  04ED  3189  21D9  3183   	fcall	___fttol
  2641  04F0  0020               	movlb	0	; select bank0
  2642  04F1  0844               	movf	?___fttol+3,w
  2643  04F2  0443               	iorwf	?___fttol+2,w
  2644  04F3  0442               	iorwf	?___fttol+1,w
  2645  04F4  0441               	iorwf	?___fttol,w
  2646  04F5  1D03               	skipz
  2647  04F6  2D4D               	goto	l2467
  2648  04F7  0021               	movlb	1	; select bank1
  2649  04F8  082B               	movf	(sprintf@exp+1)^(0+128),w
  2650  04F9  3A80               	xorlw	128
  2651  04FA  0020               	movlb	0	; select bank0
  2652  04FB  00DE               	movwf	??_sprintf
  2653  04FC  3080               	movlw	128
  2654  04FD  025E               	subwf	??_sprintf,w
  2655  04FE  1D03               	skipz
  2656  04FF  2D03               	goto	u3355
  2657  0500  3002               	movlw	2
  2658  0501  0021               	movlb	1	; select bank1
  2659  0502  022A               	subwf	sprintf@exp^(0+128),w
  2660  0503                     u3355:	
  2661  0503  1C03               	skipc
  2662  0504  2D4D               	goto	l2467
  2663  0505                     l2453:	
  2664                           
  2665                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2666  0505  0021               	movlb	1	; select bank1
  2667  0506  082C               	movf	sprintf@tmpval^(0+128),w
  2668  0507  00F0               	movwf	___ftge@ff1
  2669  0508  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  2670  0509  00F1               	movwf	___ftge@ff1+1
  2671  050A  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  2672  050B  00F2               	movwf	___ftge@ff1+2
  2673  050C  3070               	movlw	112
  2674  050D  00F3               	movwf	___ftge@ff2
  2675  050E  3089               	movlw	137
  2676  050F  00F4               	movwf	___ftge@ff2+1
  2677  0510  3040               	movlw	64
  2678  0511  00F5               	movwf	___ftge@ff2+2
  2679  0512  3197  273E  3183   	fcall	___ftge
  2680  0515  1803               	btfsc	3,0
  2681  0516  2D19               	goto	l2457
  2682                           
  2683                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2684  0517  30F7               	movlw	247
  2685  0518  2D1A               	goto	L2
  2686  0519                     l2457:	
  2687                           ;doprnt.c: 1122: }else{
  2688                           
  2689                           
  2690                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2691  0519  30F8               	movlw	248
  2692  051A                     L2:	
  2693  051A  0021               	movlb	1	; select bank1
  2694  051B  07AA               	addwf	sprintf@exp^(0+128),f
  2695  051C  30FF               	movlw	255
  2696  051D  3DAB               	addwfc	(sprintf@exp+1)^(0+128),f
  2697                           
  2698                           ;doprnt.c: 1124: }
  2699                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2700  051E  082A               	movf	sprintf@exp^(0+128),w
  2701  051F  3180  20BF  3183   	fcall	_scale
  2702  0522  0020               	movlb	0	; select bank0
  2703  0523  0838               	movf	?_scale,w
  2704  0524  0021               	movlb	1	; select bank1
  2705  0525  00AC               	movwf	sprintf@tmpval^(0+128)
  2706  0526  0020               	movlb	0	; select bank0
  2707  0527  0839               	movf	?_scale+1,w
  2708  0528  0021               	movlb	1	; select bank1
  2709  0529  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  2710  052A  0020               	movlb	0	; select bank0
  2711  052B  083A               	movf	?_scale+2,w
  2712  052C  0021               	movlb	1	; select bank1
  2713  052D  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  2714                           
  2715                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2716  052E  0833               	movf	sprintf@fval^(0+128),w
  2717  052F  00F0               	movwf	__tdiv_to_l_@f1
  2718  0530  0834               	movf	(sprintf@fval+1)^(0+128),w
  2719  0531  00F1               	movwf	__tdiv_to_l_@f1+1
  2720  0532  0835               	movf	(sprintf@fval+2)^(0+128),w
  2721  0533  00F2               	movwf	__tdiv_to_l_@f1+2
  2722  0534  082C               	movf	sprintf@tmpval^(0+128),w
  2723  0535  00F3               	movwf	__tdiv_to_l_@f2
  2724  0536  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  2725  0537  00F4               	movwf	__tdiv_to_l_@f2+1
  2726  0538  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  2727  0539  00F5               	movwf	__tdiv_to_l_@f2+2
  2728  053A  3180  2009  3183   	fcall	__tdiv_to_l_
  2729  053D  0873               	movf	?__tdiv_to_l_+3,w
  2730  053E  0021               	movlb	1	; select bank1
  2731  053F  00A9               	movwf	(sprintf@val+3)^(0+128)
  2732  0540  0872               	movf	?__tdiv_to_l_+2,w
  2733  0541  00A8               	movwf	(sprintf@val+2)^(0+128)
  2734  0542  0871               	movf	?__tdiv_to_l_+1,w
  2735  0543  00A7               	movwf	(sprintf@val+1)^(0+128)
  2736  0544  0870               	movf	?__tdiv_to_l_,w
  2737  0545  00A6               	movwf	sprintf@val^(0+128)
  2738                           
  2739                           ;doprnt.c: 1129: fval = 0.0;
  2740  0546  3000               	movlw	0
  2741  0547  00B3               	movwf	sprintf@fval^(0+128)
  2742  0548  3000               	movlw	0
  2743  0549  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2744  054A  3000               	movlw	0
  2745  054B  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2746                           
  2747                           ;doprnt.c: 1130: } else {
  2748  054C  2D9B               	goto	l2471
  2749  054D                     l2467:	
  2750                           
  2751                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2752  054D  0021               	movlb	1	; select bank1
  2753  054E  0833               	movf	sprintf@fval^(0+128),w
  2754  054F  0020               	movlb	0	; select bank0
  2755  0550  00C1               	movwf	___fttol@f1
  2756  0551  0021               	movlb	1	; select bank1
  2757  0552  0834               	movf	(sprintf@fval+1)^(0+128),w
  2758  0553  0020               	movlb	0	; select bank0
  2759  0554  00C2               	movwf	___fttol@f1+1
  2760  0555  0021               	movlb	1	; select bank1
  2761  0556  0835               	movf	(sprintf@fval+2)^(0+128),w
  2762  0557  0020               	movlb	0	; select bank0
  2763  0558  00C3               	movwf	___fttol@f1+2
  2764  0559  3189  21D9  3183   	fcall	___fttol
  2765  055C  0020               	movlb	0	; select bank0
  2766  055D  0844               	movf	?___fttol+3,w
  2767  055E  0021               	movlb	1	; select bank1
  2768  055F  00A9               	movwf	(sprintf@val+3)^(0+128)
  2769  0560  0020               	movlb	0	; select bank0
  2770  0561  0843               	movf	?___fttol+2,w
  2771  0562  0021               	movlb	1	; select bank1
  2772  0563  00A8               	movwf	(sprintf@val+2)^(0+128)
  2773  0564  0020               	movlb	0	; select bank0
  2774  0565  0842               	movf	?___fttol+1,w
  2775  0566  0021               	movlb	1	; select bank1
  2776  0567  00A7               	movwf	(sprintf@val+1)^(0+128)
  2777  0568  0020               	movlb	0	; select bank0
  2778  0569  0841               	movf	?___fttol,w
  2779  056A  0021               	movlb	1	; select bank1
  2780  056B  00A6               	movwf	sprintf@val^(0+128)
  2781                           
  2782                           ;doprnt.c: 1132: fval -= (double)val;
  2783  056C  0829               	movf	(sprintf@val+3)^(0+128),w
  2784  056D  00FB               	movwf	___lltoft@c+3
  2785  056E  0828               	movf	(sprintf@val+2)^(0+128),w
  2786  056F  00FA               	movwf	___lltoft@c+2
  2787  0570  0827               	movf	(sprintf@val+1)^(0+128),w
  2788  0571  00F9               	movwf	___lltoft@c+1
  2789  0572  0826               	movf	sprintf@val^(0+128),w
  2790  0573  00F8               	movwf	___lltoft@c
  2791  0574  3188  200D  3183   	fcall	___lltoft
  2792  0577  0878               	movf	?___lltoft,w
  2793  0578  0020               	movlb	0	; select bank0
  2794  0579  00D3               	movwf	___ftsub@f2
  2795  057A  0879               	movf	?___lltoft+1,w
  2796  057B  00D4               	movwf	___ftsub@f2+1
  2797  057C  087A               	movf	?___lltoft+2,w
  2798  057D  00D5               	movwf	___ftsub@f2+2
  2799  057E  0021               	movlb	1	; select bank1
  2800  057F  0833               	movf	sprintf@fval^(0+128),w
  2801  0580  0020               	movlb	0	; select bank0
  2802  0581  00D6               	movwf	___ftsub@f1
  2803  0582  0021               	movlb	1	; select bank1
  2804  0583  0834               	movf	(sprintf@fval+1)^(0+128),w
  2805  0584  0020               	movlb	0	; select bank0
  2806  0585  00D7               	movwf	___ftsub@f1+1
  2807  0586  0021               	movlb	1	; select bank1
  2808  0587  0835               	movf	(sprintf@fval+2)^(0+128),w
  2809  0588  0020               	movlb	0	; select bank0
  2810  0589  00D8               	movwf	___ftsub@f1+2
  2811  058A  3197  2720  3183   	fcall	___ftsub
  2812  058D  0020               	movlb	0	; select bank0
  2813  058E  0853               	movf	?___ftsub,w
  2814  058F  0021               	movlb	1	; select bank1
  2815  0590  00B3               	movwf	sprintf@fval^(0+128)
  2816  0591  0020               	movlb	0	; select bank0
  2817  0592  0854               	movf	?___ftsub+1,w
  2818  0593  0021               	movlb	1	; select bank1
  2819  0594  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2820  0595  0020               	movlb	0	; select bank0
  2821  0596  0855               	movf	?___ftsub+2,w
  2822  0597  0021               	movlb	1	; select bank1
  2823  0598  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2824                           
  2825                           ;doprnt.c: 1133: exp = 0;
  2826  0599  01AA               	clrf	sprintf@exp^(0+128)
  2827  059A  01AB               	clrf	(sprintf@exp+1)^(0+128)
  2828  059B                     l2471:	
  2829                           
  2830                           ;doprnt.c: 1134: }
  2831                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2832  059B  01B6               	clrf	sprintf@c^(0+128)
  2833  059C  0AB6               	incf	sprintf@c^(0+128),f
  2834  059D  300A               	movlw	10
  2835  059E  0636               	xorwf	sprintf@c^(0+128),w
  2836  059F  1903               	btfsc	3,2
  2837  05A0  2DD8               	goto	l2483
  2838  05A1                     l2477:	
  2839                           
  2840                           ;doprnt.c: 1137: if(val < dpowers[c])
  2841  05A1  0836               	movf	sprintf@c^(0+128),w
  2842  05A2  0020               	movlb	0	; select bank0
  2843  05A3  00DE               	movwf	??_sprintf
  2844  05A4  01DF               	clrf	??_sprintf+1
  2845  05A5  35DE               	lslf	??_sprintf,f
  2846  05A6  0DDF               	rlf	??_sprintf+1,f
  2847  05A7  35DE               	lslf	??_sprintf,f
  2848  05A8  0DDF               	rlf	??_sprintf+1,f
  2849  05A9  3000               	movlw	low (_dpowers| (0+32768))
  2850  05AA  075E               	addwf	??_sprintf,w
  2851  05AB  0084               	movwf	4
  2852  05AC  3098               	movlw	high (_dpowers| (0+32768))
  2853  05AD  3D5F               	addwfc	??_sprintf+1,w
  2854  05AE  0085               	movwf	5
  2855  05AF  3F00               	moviw [0]fsr0
  2856  05B0  00E0               	movwf	??_sprintf+2
  2857  05B1  3F01               	moviw [1]fsr0
  2858  05B2  00E1               	movwf	??_sprintf+3
  2859  05B3  3F02               	moviw [2]fsr0
  2860  05B4  00E2               	movwf	??_sprintf+4
  2861  05B5  3F03               	moviw [3]fsr0
  2862  05B6  00E3               	movwf	??_sprintf+5
  2863  05B7  0863               	movf	??_sprintf+5,w
  2864  05B8  0021               	movlb	1	; select bank1
  2865  05B9  0229               	subwf	(sprintf@val+3)^(0+128),w
  2866  05BA  1D03               	skipz
  2867  05BB  2DCC               	goto	u3385
  2868  05BC  0020               	movlb	0	; select bank0
  2869  05BD  0862               	movf	??_sprintf+4,w
  2870  05BE  0021               	movlb	1	; select bank1
  2871  05BF  0228               	subwf	(sprintf@val+2)^(0+128),w
  2872  05C0  1D03               	skipz
  2873  05C1  2DCC               	goto	u3385
  2874  05C2  0020               	movlb	0	; select bank0
  2875  05C3  0861               	movf	??_sprintf+3,w
  2876  05C4  0021               	movlb	1	; select bank1
  2877  05C5  0227               	subwf	(sprintf@val+1)^(0+128),w
  2878  05C6  1D03               	skipz
  2879  05C7  2DCC               	goto	u3385
  2880  05C8  0020               	movlb	0	; select bank0
  2881  05C9  0860               	movf	??_sprintf+2,w
  2882  05CA  0021               	movlb	1	; select bank1
  2883  05CB  0226               	subwf	sprintf@val^(0+128),w
  2884  05CC                     u3385:	
  2885  05CC  1C03               	btfss	3,0
  2886  05CD  2DD8               	goto	l2483
  2887                           
  2888                           ;doprnt.c: 1138: break;
  2889  05CE  3001               	movlw	1
  2890  05CF  0020               	movlb	0	; select bank0
  2891  05D0  00DE               	movwf	??_sprintf
  2892  05D1  085E               	movf	??_sprintf,w
  2893  05D2  0021               	movlb	1	; select bank1
  2894  05D3  07B6               	addwf	sprintf@c^(0+128),f
  2895  05D4  300A               	movlw	10
  2896  05D5  0636               	xorwf	sprintf@c^(0+128),w
  2897  05D6  1D03               	btfss	3,2
  2898  05D7  2DA1               	goto	l2477
  2899  05D8                     l2483:	
  2900                           
  2901                           ;doprnt.c: 1175: {
  2902                           ;doprnt.c: 1188: if(flag & 0x03)
  2903  05D8  3003               	movlw	3
  2904  05D9  0524               	andwf	sprintf@flag^(0+128),w
  2905  05DA  0020               	movlb	0	; select bank0
  2906  05DB  00DE               	movwf	??_sprintf
  2907  05DC  3000               	movlw	0
  2908  05DD  0021               	movlb	1	; select bank1
  2909  05DE  0525               	andwf	(sprintf@flag+1)^(0+128),w
  2910  05DF  0020               	movlb	0	; select bank0
  2911  05E0  00DF               	movwf	??_sprintf+1
  2912  05E1  085E               	movf	??_sprintf,w
  2913  05E2  045F               	iorwf	??_sprintf+1,w
  2914  05E3  1903               	btfsc	3,2
  2915  05E4  2DF3               	goto	l2497
  2916                           
  2917                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2918  05E5  302D               	movlw	45
  2919  05E6                     L6:	
  2920  05E6  00DE               	movwf	??_sprintf
  2921  05E7  0021               	movlb	1	; select bank1
  2922  05E8  0832               	movf	sprintf@sp^(0+128),w
  2923  05E9  0086               	movwf	6
  2924  05EA  0187               	clrf	7
  2925  05EB  0020               	movlb	0	; select bank0
  2926  05EC  085E               	movf	??_sprintf,w
  2927  05ED  0081               	movwf	1
  2928  05EE  3001               	movlw	1
  2929  05EF  00DE               	movwf	??_sprintf
  2930  05F0  085E               	movf	??_sprintf,w
  2931  05F1  0021               	movlb	1	; select bank1
  2932  05F2  07B2               	addwf	sprintf@sp^(0+128),f
  2933  05F3                     l2497:	
  2934  05F3  30FF               	movlw	255
  2935  05F4  0020               	movlb	0	; select bank0
  2936  05F5  00DE               	movwf	??_sprintf
  2937  05F6  085E               	movf	??_sprintf,w
  2938  05F7  0021               	movlb	1	; select bank1
  2939  05F8  07B6               	addwf	sprintf@c^(0+128),f
  2940  05F9  0A36               	incf	sprintf@c^(0+128),w
  2941  05FA  1903               	btfsc	3,2
  2942  05FB  2E5A               	goto	l2505
  2943                           
  2944                           ;doprnt.c: 1200: {
  2945                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2946                           
  2947                           ;doprnt.c: 1195: }
  2948                           ;doprnt.c: 1196: while(c--) {
  2949  05FC  0836               	movf	sprintf@c^(0+128),w
  2950  05FD  0020               	movlb	0	; select bank0
  2951  05FE  00DE               	movwf	??_sprintf
  2952  05FF  01DF               	clrf	??_sprintf+1
  2953  0600  35DE               	lslf	??_sprintf,f
  2954  0601  0DDF               	rlf	??_sprintf+1,f
  2955  0602  35DE               	lslf	??_sprintf,f
  2956  0603  0DDF               	rlf	??_sprintf+1,f
  2957  0604  3000               	movlw	low (_dpowers| (0+32768))
  2958  0605  075E               	addwf	??_sprintf,w
  2959  0606  0084               	movwf	4
  2960  0607  3098               	movlw	high (_dpowers| (0+32768))
  2961  0608  3D5F               	addwfc	??_sprintf+1,w
  2962  0609  0085               	movwf	5
  2963  060A  3F00               	moviw [0]fsr0
  2964  060B  00F0               	movwf	___lldiv@divisor
  2965  060C  3F01               	moviw [1]fsr0
  2966  060D  00F1               	movwf	___lldiv@divisor+1
  2967  060E  3F02               	moviw [2]fsr0
  2968  060F  00F2               	movwf	___lldiv@divisor+2
  2969  0610  3F03               	moviw [3]fsr0
  2970  0611  00F3               	movwf	___lldiv@divisor+3
  2971  0612  0021               	movlb	1	; select bank1
  2972  0613  0829               	movf	(sprintf@val+3)^(0+128),w
  2973  0614  00F7               	movwf	___lldiv@dividend+3
  2974  0615  0828               	movf	(sprintf@val+2)^(0+128),w
  2975  0616  00F6               	movwf	___lldiv@dividend+2
  2976  0617  0827               	movf	(sprintf@val+1)^(0+128),w
  2977  0618  00F5               	movwf	___lldiv@dividend+1
  2978  0619  0826               	movf	sprintf@val^(0+128),w
  2979  061A  00F4               	movwf	___lldiv@dividend
  2980  061B  3188  207D  3183   	fcall	___lldiv
  2981  061E  0873               	movf	?___lldiv+3,w
  2982  061F  0021               	movlb	1	; select bank1
  2983  0620  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  2984  0621  0872               	movf	?___lldiv+2,w
  2985  0622  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  2986  0623  0871               	movf	?___lldiv+1,w
  2987  0624  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  2988  0625  0870               	movf	?___lldiv,w
  2989  0626  00AC               	movwf	sprintf@tmpval^(0+128)
  2990                           
  2991                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2992  0627  3000               	movlw	0
  2993  0628  00F3               	movwf	___llmod@divisor+3
  2994  0629  3000               	movlw	0
  2995  062A  00F2               	movwf	___llmod@divisor+2
  2996  062B  3000               	movlw	0
  2997  062C  00F1               	movwf	___llmod@divisor+1
  2998  062D  300A               	movlw	10
  2999  062E  00F0               	movwf	___llmod@divisor
  3000  062F  082F               	movf	(sprintf@tmpval+3)^(0+128),w
  3001  0630  00F7               	movwf	___llmod@dividend+3
  3002  0631  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  3003  0632  00F6               	movwf	___llmod@dividend+2
  3004  0633  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  3005  0634  00F5               	movwf	___llmod@dividend+1
  3006  0635  082C               	movf	sprintf@tmpval^(0+128),w
  3007  0636  00F4               	movwf	___llmod@dividend
  3008  0637  3197  2779  3183   	fcall	___llmod
  3009  063A  0873               	movf	?___llmod+3,w
  3010  063B  0021               	movlb	1	; select bank1
  3011  063C  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  3012  063D  0872               	movf	?___llmod+2,w
  3013  063E  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  3014  063F  0871               	movf	?___llmod+1,w
  3015  0640  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  3016  0641  0870               	movf	?___llmod,w
  3017  0642  00AC               	movwf	sprintf@tmpval^(0+128)
  3018                           
  3019                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3020  0643  082C               	movf	sprintf@tmpval^(0+128),w
  3021  0644  3E30               	addlw	48
  3022  0645  0020               	movlb	0	; select bank0
  3023  0646  2DE6               	goto	L6
  3024  0647                     l2499:	
  3025                           ;doprnt.c: 1204: }
  3026                           ;doprnt.c: 1206: }
  3027                           ;doprnt.c: 1207: while(exp > 0) {
  3028                           
  3029                           
  3030                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3031  0647  3030               	movlw	48
  3032  0648  0020               	movlb	0	; select bank0
  3033  0649  00DE               	movwf	??_sprintf
  3034  064A  0021               	movlb	1	; select bank1
  3035  064B  0832               	movf	sprintf@sp^(0+128),w
  3036  064C  0086               	movwf	6
  3037  064D  0187               	clrf	7
  3038  064E  0020               	movlb	0	; select bank0
  3039  064F  085E               	movf	??_sprintf,w
  3040  0650  0081               	movwf	1
  3041  0651  3001               	movlw	1
  3042  0652  00DE               	movwf	??_sprintf
  3043  0653  085E               	movf	??_sprintf,w
  3044  0654  0021               	movlb	1	; select bank1
  3045  0655  07B2               	addwf	sprintf@sp^(0+128),f
  3046                           
  3047                           ;doprnt.c: 1209: exp--;
  3048  0656  30FF               	movlw	255
  3049  0657  07AA               	addwf	sprintf@exp^(0+128),f
  3050  0658  30FF               	movlw	255
  3051  0659  3DAB               	addwfc	(sprintf@exp+1)^(0+128),f
  3052  065A                     l2505:	
  3053  065A  082B               	movf	(sprintf@exp+1)^(0+128),w
  3054  065B  3A80               	xorlw	128
  3055  065C  0020               	movlb	0	; select bank0
  3056  065D  00DE               	movwf	??_sprintf
  3057  065E  3080               	movlw	128
  3058  065F  025E               	subwf	??_sprintf,w
  3059  0660  1D03               	skipz
  3060  0661  2E65               	goto	u3425
  3061  0662  3001               	movlw	1
  3062  0663  0021               	movlb	1	; select bank1
  3063  0664  022A               	subwf	sprintf@exp^(0+128),w
  3064  0665                     u3425:	
  3065  0665  1803               	skipnc
  3066  0666  2E47               	goto	l2499
  3067                           
  3068                           ;doprnt.c: 1210: }
  3069                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3070  0667  0021               	movlb	1	; select bank1
  3071  0668  0831               	movf	(sprintf@prec+1)^(0+128),w
  3072  0669  3A80               	xorlw	128
  3073  066A  0020               	movlb	0	; select bank0
  3074  066B  00DE               	movwf	??_sprintf
  3075  066C  3080               	movlw	128
  3076  066D  025E               	subwf	??_sprintf,w
  3077  066E  1D03               	skipz
  3078  066F  2E73               	goto	u3435
  3079  0670  3009               	movlw	9
  3080  0671  0021               	movlb	1	; select bank1
  3081  0672  0230               	subwf	sprintf@prec^(0+128),w
  3082  0673                     u3435:	
  3083  0673  1C03               	skipc
  3084  0674  2E77               	goto	l2511
  3085                           
  3086                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3087  0675  3008               	movlw	8
  3088  0676  2E79               	goto	L3
  3089  0677                     l2511:	
  3090                           
  3091                           ;doprnt.c: 1213: else
  3092                           ;doprnt.c: 1214: c = prec;
  3093  0677  0021               	movlb	1	; select bank1
  3094  0678  0830               	movf	sprintf@prec^(0+128),w
  3095  0679                     L3:	
  3096  0679  0020               	movlb	0	; select bank0
  3097  067A  00DE               	movwf	??_sprintf
  3098  067B  085E               	movf	??_sprintf,w
  3099  067C  0021               	movlb	1	; select bank1
  3100  067D  00B6               	movwf	sprintf@c^(0+128)
  3101                           
  3102                           ;doprnt.c: 1215: prec -= c;
  3103  067E  0836               	movf	sprintf@c^(0+128),w
  3104  067F  0020               	movlb	0	; select bank0
  3105  0680  00DE               	movwf	??_sprintf
  3106  0681  01DF               	clrf	??_sprintf+1
  3107  0682  1BDE               	btfsc	??_sprintf,7
  3108  0683  03DF               	decf	??_sprintf+1,f
  3109  0684  085E               	movf	??_sprintf,w
  3110  0685  0021               	movlb	1	; select bank1
  3111  0686  02B0               	subwf	sprintf@prec^(0+128),f
  3112  0687  0020               	movlb	0	; select bank0
  3113  0688  085F               	movf	??_sprintf+1,w
  3114  0689  0021               	movlb	1	; select bank1
  3115  068A  3BB1               	subwfb	(sprintf@prec+1)^(0+128),f
  3116                           
  3117                           ;doprnt.c: 1219: if(c)
  3118  068B  0836               	movf	sprintf@c^(0+128),w
  3119  068C  1903               	btfsc	3,2
  3120  068D  2E9D               	goto	l2519
  3121                           
  3122                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3123  068E  302E               	movlw	46
  3124  068F  0020               	movlb	0	; select bank0
  3125  0690  00DE               	movwf	??_sprintf
  3126  0691  0021               	movlb	1	; select bank1
  3127  0692  0832               	movf	sprintf@sp^(0+128),w
  3128  0693  0086               	movwf	6
  3129  0694  0187               	clrf	7
  3130  0695  0020               	movlb	0	; select bank0
  3131  0696  085E               	movf	??_sprintf,w
  3132  0697  0081               	movwf	1
  3133  0698  3001               	movlw	1
  3134  0699  00DE               	movwf	??_sprintf
  3135  069A  085E               	movf	??_sprintf,w
  3136  069B  0021               	movlb	1	; select bank1
  3137  069C  07B2               	addwf	sprintf@sp^(0+128),f
  3138  069D                     l2519:	
  3139                           
  3140                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3141  069D  0836               	movf	sprintf@c^(0+128),w
  3142  069E  3180  20BF  3183   	fcall	_scale
  3143  06A1  0020               	movlb	0	; select bank0
  3144  06A2  0838               	movf	?_scale,w
  3145  06A3  0021               	movlb	1	; select bank1
  3146  06A4  00A0               	movwf	_sprintf$755^(0+128)
  3147  06A5  0020               	movlb	0	; select bank0
  3148  06A6  0839               	movf	?_scale+1,w
  3149  06A7  0021               	movlb	1	; select bank1
  3150  06A8  00A1               	movwf	(_sprintf$755+1)^(0+128)
  3151  06A9  0020               	movlb	0	; select bank0
  3152  06AA  083A               	movf	?_scale+2,w
  3153  06AB  0021               	movlb	1	; select bank1
  3154  06AC  00A2               	movwf	(_sprintf$755+2)^(0+128)
  3155                           
  3156                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3157  06AD  0820               	movf	_sprintf$755^(0+128),w
  3158  06AE  0020               	movlb	0	; select bank0
  3159  06AF  00AB               	movwf	___ftmul@f2
  3160  06B0  0021               	movlb	1	; select bank1
  3161  06B1  0821               	movf	(_sprintf$755+1)^(0+128),w
  3162  06B2  0020               	movlb	0	; select bank0
  3163  06B3  00AC               	movwf	___ftmul@f2+1
  3164  06B4  0021               	movlb	1	; select bank1
  3165  06B5  0822               	movf	(_sprintf$755+2)^(0+128),w
  3166  06B6  0020               	movlb	0	; select bank0
  3167  06B7  00AD               	movwf	___ftmul@f2+2
  3168  06B8  0021               	movlb	1	; select bank1
  3169  06B9  0833               	movf	sprintf@fval^(0+128),w
  3170  06BA  0020               	movlb	0	; select bank0
  3171  06BB  00A8               	movwf	___ftmul@f1
  3172  06BC  0021               	movlb	1	; select bank1
  3173  06BD  0834               	movf	(sprintf@fval+1)^(0+128),w
  3174  06BE  0020               	movlb	0	; select bank0
  3175  06BF  00A9               	movwf	___ftmul@f1+1
  3176  06C0  0021               	movlb	1	; select bank1
  3177  06C1  0835               	movf	(sprintf@fval+2)^(0+128),w
  3178  06C2  0020               	movlb	0	; select bank0
  3179  06C3  00AA               	movwf	___ftmul@f1+2
  3180  06C4  318B  2308  3183   	fcall	___ftmul
  3181  06C7  0020               	movlb	0	; select bank0
  3182  06C8  0828               	movf	?___ftmul,w
  3183  06C9  00C1               	movwf	___fttol@f1
  3184  06CA  0829               	movf	?___ftmul+1,w
  3185  06CB  00C2               	movwf	___fttol@f1+1
  3186  06CC  082A               	movf	?___ftmul+2,w
  3187  06CD  00C3               	movwf	___fttol@f1+2
  3188  06CE  3189  21D9  3183   	fcall	___fttol
  3189  06D1  0020               	movlb	0	; select bank0
  3190  06D2  0844               	movf	?___fttol+3,w
  3191  06D3  0021               	movlb	1	; select bank1
  3192  06D4  00A9               	movwf	(sprintf@val+3)^(0+128)
  3193  06D5  0020               	movlb	0	; select bank0
  3194  06D6  0843               	movf	?___fttol+2,w
  3195  06D7  0021               	movlb	1	; select bank1
  3196  06D8  00A8               	movwf	(sprintf@val+2)^(0+128)
  3197  06D9  0020               	movlb	0	; select bank0
  3198  06DA  0842               	movf	?___fttol+1,w
  3199  06DB  0021               	movlb	1	; select bank1
  3200  06DC  00A7               	movwf	(sprintf@val+1)^(0+128)
  3201  06DD  0020               	movlb	0	; select bank0
  3202  06DE  0841               	movf	?___fttol,w
  3203  06DF  0021               	movlb	1	; select bank1
  3204  06E0                     L4:	
  3205  06E0  00A6               	movwf	sprintf@val^(0+128)
  3206  06E1  30FF               	movlw	255
  3207  06E2  0020               	movlb	0	; select bank0
  3208  06E3  00DE               	movwf	??_sprintf
  3209  06E4  085E               	movf	??_sprintf,w
  3210  06E5  0021               	movlb	1	; select bank1
  3211  06E6  07B6               	addwf	sprintf@c^(0+128),f
  3212  06E7  0A36               	incf	sprintf@c^(0+128),w
  3213  06E8  1903               	btfsc	3,2
  3214  06E9  2F7F               	goto	l2541
  3215                           
  3216                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3217                           
  3218                           ;doprnt.c: 1228: while(c--) {
  3219  06EA  0836               	movf	sprintf@c^(0+128),w
  3220  06EB  0020               	movlb	0	; select bank0
  3221  06EC  00DE               	movwf	??_sprintf
  3222  06ED  01DF               	clrf	??_sprintf+1
  3223  06EE  35DE               	lslf	??_sprintf,f
  3224  06EF  0DDF               	rlf	??_sprintf+1,f
  3225  06F0  35DE               	lslf	??_sprintf,f
  3226  06F1  0DDF               	rlf	??_sprintf+1,f
  3227  06F2  3000               	movlw	low (_dpowers| (0+32768))
  3228  06F3  075E               	addwf	??_sprintf,w
  3229  06F4  0084               	movwf	4
  3230  06F5  3098               	movlw	high (_dpowers| (0+32768))
  3231  06F6  3D5F               	addwfc	??_sprintf+1,w
  3232  06F7  0085               	movwf	5
  3233  06F8  3F00               	moviw [0]fsr0
  3234  06F9  00F0               	movwf	___lldiv@divisor
  3235  06FA  3F01               	moviw [1]fsr0
  3236  06FB  00F1               	movwf	___lldiv@divisor+1
  3237  06FC  3F02               	moviw [2]fsr0
  3238  06FD  00F2               	movwf	___lldiv@divisor+2
  3239  06FE  3F03               	moviw [3]fsr0
  3240  06FF  00F3               	movwf	___lldiv@divisor+3
  3241  0700  0021               	movlb	1	; select bank1
  3242  0701  0829               	movf	(sprintf@val+3)^(0+128),w
  3243  0702  00F7               	movwf	___lldiv@dividend+3
  3244  0703  0828               	movf	(sprintf@val+2)^(0+128),w
  3245  0704  00F6               	movwf	___lldiv@dividend+2
  3246  0705  0827               	movf	(sprintf@val+1)^(0+128),w
  3247  0706  00F5               	movwf	___lldiv@dividend+1
  3248  0707  0826               	movf	sprintf@val^(0+128),w
  3249  0708  00F4               	movwf	___lldiv@dividend
  3250  0709  3188  207D  3183   	fcall	___lldiv
  3251  070C  0873               	movf	?___lldiv+3,w
  3252  070D  0021               	movlb	1	; select bank1
  3253  070E  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  3254  070F  0872               	movf	?___lldiv+2,w
  3255  0710  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  3256  0711  0871               	movf	?___lldiv+1,w
  3257  0712  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  3258  0713  0870               	movf	?___lldiv,w
  3259  0714  00AC               	movwf	sprintf@tmpval^(0+128)
  3260                           
  3261                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3262  0715  3000               	movlw	0
  3263  0716  00F3               	movwf	___llmod@divisor+3
  3264  0717  3000               	movlw	0
  3265  0718  00F2               	movwf	___llmod@divisor+2
  3266  0719  3000               	movlw	0
  3267  071A  00F1               	movwf	___llmod@divisor+1
  3268  071B  300A               	movlw	10
  3269  071C  00F0               	movwf	___llmod@divisor
  3270  071D  082F               	movf	(sprintf@tmpval+3)^(0+128),w
  3271  071E  00F7               	movwf	___llmod@dividend+3
  3272  071F  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  3273  0720  00F6               	movwf	___llmod@dividend+2
  3274  0721  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  3275  0722  00F5               	movwf	___llmod@dividend+1
  3276  0723  082C               	movf	sprintf@tmpval^(0+128),w
  3277  0724  00F4               	movwf	___llmod@dividend
  3278  0725  3197  2779  3183   	fcall	___llmod
  3279  0728  0873               	movf	?___llmod+3,w
  3280  0729  0021               	movlb	1	; select bank1
  3281  072A  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  3282  072B  0872               	movf	?___llmod+2,w
  3283  072C  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  3284  072D  0871               	movf	?___llmod+1,w
  3285  072E  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  3286  072F  0870               	movf	?___llmod,w
  3287  0730  00AC               	movwf	sprintf@tmpval^(0+128)
  3288                           
  3289                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3290  0731  082C               	movf	sprintf@tmpval^(0+128),w
  3291  0732  3E30               	addlw	48
  3292  0733  0020               	movlb	0	; select bank0
  3293  0734  00DE               	movwf	??_sprintf
  3294  0735  0021               	movlb	1	; select bank1
  3295  0736  0832               	movf	sprintf@sp^(0+128),w
  3296  0737  0086               	movwf	6
  3297  0738  0187               	clrf	7
  3298  0739  0020               	movlb	0	; select bank0
  3299  073A  085E               	movf	??_sprintf,w
  3300  073B  0081               	movwf	1
  3301  073C  3001               	movlw	1
  3302  073D  00DE               	movwf	??_sprintf
  3303  073E  085E               	movf	??_sprintf,w
  3304  073F  0021               	movlb	1	; select bank1
  3305  0740  07B2               	addwf	sprintf@sp^(0+128),f
  3306                           
  3307                           ;doprnt.c: 1232: val %= dpowers[c];
  3308  0741  0836               	movf	sprintf@c^(0+128),w
  3309  0742  0020               	movlb	0	; select bank0
  3310  0743  00DE               	movwf	??_sprintf
  3311  0744  01DF               	clrf	??_sprintf+1
  3312  0745  35DE               	lslf	??_sprintf,f
  3313  0746  0DDF               	rlf	??_sprintf+1,f
  3314  0747  35DE               	lslf	??_sprintf,f
  3315  0748  0DDF               	rlf	??_sprintf+1,f
  3316  0749  3000               	movlw	low (_dpowers| (0+32768))
  3317  074A  075E               	addwf	??_sprintf,w
  3318  074B  0084               	movwf	4
  3319  074C  3098               	movlw	high (_dpowers| (0+32768))
  3320  074D  3D5F               	addwfc	??_sprintf+1,w
  3321  074E  0085               	movwf	5
  3322  074F  3F00               	moviw [0]fsr0
  3323  0750  00F0               	movwf	___llmod@divisor
  3324  0751  3F01               	moviw [1]fsr0
  3325  0752  00F1               	movwf	___llmod@divisor+1
  3326  0753  3F02               	moviw [2]fsr0
  3327  0754  00F2               	movwf	___llmod@divisor+2
  3328  0755  3F03               	moviw [3]fsr0
  3329  0756  00F3               	movwf	___llmod@divisor+3
  3330  0757  0021               	movlb	1	; select bank1
  3331  0758  0829               	movf	(sprintf@val+3)^(0+128),w
  3332  0759  00F7               	movwf	___llmod@dividend+3
  3333  075A  0828               	movf	(sprintf@val+2)^(0+128),w
  3334  075B  00F6               	movwf	___llmod@dividend+2
  3335  075C  0827               	movf	(sprintf@val+1)^(0+128),w
  3336  075D  00F5               	movwf	___llmod@dividend+1
  3337  075E  0826               	movf	sprintf@val^(0+128),w
  3338  075F  00F4               	movwf	___llmod@dividend
  3339  0760  3197  2779  3183   	fcall	___llmod
  3340  0763  0873               	movf	?___llmod+3,w
  3341  0764  0021               	movlb	1	; select bank1
  3342  0765  00A9               	movwf	(sprintf@val+3)^(0+128)
  3343  0766  0872               	movf	?___llmod+2,w
  3344  0767  00A8               	movwf	(sprintf@val+2)^(0+128)
  3345  0768  0871               	movf	?___llmod+1,w
  3346  0769  00A7               	movwf	(sprintf@val+1)^(0+128)
  3347  076A  0870               	movf	?___llmod,w
  3348  076B  2EE0               	goto	L4
  3349  076C                     l2535:	
  3350                           ;doprnt.c: 1233: }
  3351                           ;doprnt.c: 1235: while(prec) {
  3352                           
  3353                           
  3354                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3355  076C  3030               	movlw	48
  3356  076D  0020               	movlb	0	; select bank0
  3357  076E  00DE               	movwf	??_sprintf
  3358  076F  0021               	movlb	1	; select bank1
  3359  0770  0832               	movf	sprintf@sp^(0+128),w
  3360  0771  0086               	movwf	6
  3361  0772  0187               	clrf	7
  3362  0773  0020               	movlb	0	; select bank0
  3363  0774  085E               	movf	??_sprintf,w
  3364  0775  0081               	movwf	1
  3365  0776  3001               	movlw	1
  3366  0777  00DE               	movwf	??_sprintf
  3367  0778  085E               	movf	??_sprintf,w
  3368  0779  0021               	movlb	1	; select bank1
  3369  077A  07B2               	addwf	sprintf@sp^(0+128),f
  3370                           
  3371                           ;doprnt.c: 1237: prec--;
  3372  077B  30FF               	movlw	255
  3373  077C  07B0               	addwf	sprintf@prec^(0+128),f
  3374  077D  30FF               	movlw	255
  3375  077E  3DB1               	addwfc	(sprintf@prec+1)^(0+128),f
  3376  077F                     l2541:	
  3377  077F  0830               	movf	sprintf@prec^(0+128),w
  3378  0780  0431               	iorwf	(sprintf@prec+1)^(0+128),w
  3379  0781  1903               	btfsc	3,2
  3380  0782  2B0B               	goto	l2559
  3381  0783  2F6C               	goto	l2535
  3382  0784                     l2543:	
  3383                           ;doprnt.c: 1238: }
  3384                           ;doprnt.c: 1245: continue;
  3385                           
  3386                           
  3387                           ;doprnt.c: 1246: }
  3388                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3389  0784  0021               	movlb	1	; select bank1
  3390  0785  0830               	movf	sprintf@prec^(0+128),w
  3391  0786  0431               	iorwf	(sprintf@prec+1)^(0+128),w
  3392  0787  1D03               	btfss	3,2
  3393  0788  2F93               	goto	l246
  3394  0789  0829               	movf	(sprintf@val+3)^(0+128),w
  3395  078A  0428               	iorwf	(sprintf@val+2)^(0+128),w
  3396  078B  0427               	iorwf	(sprintf@val+1)^(0+128),w
  3397  078C  0426               	iorwf	sprintf@val^(0+128),w
  3398  078D  1D03               	skipz
  3399  078E  2F93               	goto	l246
  3400                           
  3401                           ;doprnt.c: 1291: prec++;
  3402  078F  3001               	movlw	1
  3403  0790  07B0               	addwf	sprintf@prec^(0+128),f
  3404  0791  3000               	movlw	0
  3405  0792  3DB1               	addwfc	(sprintf@prec+1)^(0+128),f
  3406  0793                     l246:	
  3407                           
  3408                           ;doprnt.c: 1339: if(c < prec)
  3409  0793  0836               	movf	sprintf@c^(0+128),w
  3410  0794  0020               	movlb	0	; select bank0
  3411  0795  00DE               	movwf	??_sprintf
  3412  0796  01DF               	clrf	??_sprintf+1
  3413  0797  1BDE               	btfsc	??_sprintf,7
  3414  0798  03DF               	decf	??_sprintf+1,f
  3415  0799  085F               	movf	??_sprintf+1,w
  3416  079A  3A80               	xorlw	128
  3417  079B  00E0               	movwf	??_sprintf+2
  3418  079C  0021               	movlb	1	; select bank1
  3419  079D  0831               	movf	(sprintf@prec+1)^(0+128),w
  3420  079E  3A80               	xorlw	128
  3421  079F  0020               	movlb	0	; select bank0
  3422  07A0  0260               	subwf	??_sprintf+2,w
  3423  07A1  1D03               	skipz
  3424  07A2  2FA7               	goto	u3495
  3425  07A3  0021               	movlb	1	; select bank1
  3426  07A4  0830               	movf	sprintf@prec^(0+128),w
  3427  07A5  0020               	movlb	0	; select bank0
  3428  07A6  025E               	subwf	??_sprintf,w
  3429  07A7                     u3495:	
  3430  07A7  1803               	skipnc
  3431  07A8  2FB1               	goto	l2551
  3432                           
  3433                           ;doprnt.c: 1340: c = prec;
  3434  07A9  0021               	movlb	1	; select bank1
  3435  07AA  0830               	movf	sprintf@prec^(0+128),w
  3436  07AB  0020               	movlb	0	; select bank0
  3437  07AC  00DE               	movwf	??_sprintf
  3438  07AD  085E               	movf	??_sprintf,w
  3439  07AE  0021               	movlb	1	; select bank1
  3440  07AF  00B6               	movwf	sprintf@c^(0+128)
  3441  07B0  2FCD               	goto	l248
  3442  07B1                     l2551:	
  3443                           
  3444                           ;doprnt.c: 1341: else if(prec < c)
  3445  07B1  0021               	movlb	1	; select bank1
  3446  07B2  0836               	movf	sprintf@c^(0+128),w
  3447  07B3  0020               	movlb	0	; select bank0
  3448  07B4  00DE               	movwf	??_sprintf
  3449  07B5  01DF               	clrf	??_sprintf+1
  3450  07B6  1BDE               	btfsc	??_sprintf,7
  3451  07B7  03DF               	decf	??_sprintf+1,f
  3452  07B8  0021               	movlb	1	; select bank1
  3453  07B9  0831               	movf	(sprintf@prec+1)^(0+128),w
  3454  07BA  3A80               	xorlw	128
  3455  07BB  0020               	movlb	0	; select bank0
  3456  07BC  00E0               	movwf	??_sprintf+2
  3457  07BD  085F               	movf	??_sprintf+1,w
  3458  07BE  3A80               	xorlw	128
  3459  07BF  0260               	subwf	??_sprintf+2,w
  3460  07C0  1D03               	skipz
  3461  07C1  2FC5               	goto	u3505
  3462  07C2  085E               	movf	??_sprintf,w
  3463  07C3  0021               	movlb	1	; select bank1
  3464  07C4  0230               	subwf	sprintf@prec^(0+128),w
  3465  07C5                     u3505:	
  3466  07C5  1803               	skipnc
  3467  07C6  2FCD               	goto	l248
  3468                           
  3469                           ;doprnt.c: 1342: prec = c;
  3470  07C7  0021               	movlb	1	; select bank1
  3471  07C8  0836               	movf	sprintf@c^(0+128),w
  3472  07C9  00B0               	movwf	sprintf@prec^(0+128)
  3473  07CA  01B1               	clrf	(sprintf@prec+1)^(0+128)
  3474  07CB  1BB0               	btfsc	sprintf@prec^(0+128),7
  3475  07CC  03B1               	decf	(sprintf@prec+1)^(0+128),f
  3476  07CD                     l248:	
  3477                           
  3478                           ;doprnt.c: 1422: {
  3479                           ;doprnt.c: 1438: if(flag & 0x03)
  3480  07CD  3003               	movlw	3
  3481  07CE  0021               	movlb	1	; select bank1
  3482  07CF  0524               	andwf	sprintf@flag^(0+128),w
  3483  07D0  0020               	movlb	0	; select bank0
  3484  07D1  00DE               	movwf	??_sprintf
  3485  07D2  3000               	movlw	0
  3486  07D3  0021               	movlb	1	; select bank1
  3487  07D4  0525               	andwf	(sprintf@flag+1)^(0+128),w
  3488  07D5  0020               	movlb	0	; select bank0
  3489  07D6  00DF               	movwf	??_sprintf+1
  3490  07D7  085E               	movf	??_sprintf,w
  3491  07D8  045F               	iorwf	??_sprintf+1,w
  3492  07D9  1903               	btfsc	3,2
  3493  07DA  2B0B               	goto	l2559
  3494                           
  3495                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3496  07DB  302D               	movlw	45
  3497  07DC                     L5:	
  3498  07DC  00DE               	movwf	??_sprintf
  3499  07DD  0021               	movlb	1	; select bank1
  3500  07DE  0832               	movf	sprintf@sp^(0+128),w
  3501  07DF  0086               	movwf	6
  3502  07E0  0187               	clrf	7
  3503  07E1  0020               	movlb	0	; select bank0
  3504  07E2  085E               	movf	??_sprintf,w
  3505  07E3  0081               	movwf	1
  3506  07E4  3001               	movlw	1
  3507  07E5  00DE               	movwf	??_sprintf
  3508  07E6  085E               	movf	??_sprintf,w
  3509  07E7  0021               	movlb	1	; select bank1
  3510  07E8  07B2               	addwf	sprintf@sp^(0+128),f
  3511  07E9  2B0B               	goto	l2559
  3512  07EA                     l2561:	
  3513                           ;doprnt.c: 1469: }
  3514                           ;doprnt.c: 1533: }
  3515                           ;doprnt.c: 1535: alldone:
  3516                           
  3517                           
  3518                           ;doprnt.c: 1538: *sp = 0;
  3519  07EA  0832               	movf	sprintf@sp^(0+128),w
  3520  07EB  0086               	movwf	6
  3521  07EC  0187               	clrf	7
  3522  07ED  0181               	clrf	1
  3523  07EE  0008               	return
  3524  07EF                     __end_of_sprintf:	
  3525                           ;doprnt.c: 1540: return 0;
  3526                           ;	Return value of _sprintf is never used
  3527                           
  3528                           
  3529                           	psect	text2
  3530  00BF                     __ptext2:	
  3531 ;; *************** function _scale *****************
  3532 ;; Defined at:
  3533 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3534 ;; Parameters:    Size  Location     Type
  3535 ;;  scl             1    wreg     char 
  3536 ;; Auto vars:     Size  Location     Type
  3537 ;;  scl             1   32[BANK0 ] char 
  3538 ;; Return value:  Size  Location     Type
  3539 ;;                  3   24[BANK0 ] char 
  3540 ;; Registers used:
  3541 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3542 ;; Tracked objects:
  3543 ;;		On entry : 0/0
  3544 ;;		On exit  : 0/0
  3545 ;;		Unchanged: 0/0
  3546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3547 ;;      Params:         0       3       0       0       0       0       0       0
  3548 ;;      Locals:         0       4       0       0       0       0       0       0
  3549 ;;      Temps:          0       2       0       0       0       0       0       0
  3550 ;;      Totals:         0       9       0       0       0       0       0       0
  3551 ;;Total ram usage:        9 bytes
  3552 ;; Hardware stack levels used:    1
  3553 ;; Hardware stack levels required when called:    2
  3554 ;; This function calls:
  3555 ;;		___awdiv
  3556 ;;		___awmod
  3557 ;;		___ftmul
  3558 ;;		___wmul
  3559 ;; This function is called by:
  3560 ;;		_sprintf
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           
  3565                           ;psect for function _scale
  3566  00BF                     _scale:	
  3567                           
  3568                           ;incstack = 0
  3569                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3570                           ;scale@scl stored from wreg
  3571  00BF  0020               	movlb	0	; select bank0
  3572  00C0  00C0               	movwf	scale@scl
  3573                           
  3574                           ;doprnt.c: 428: if(scl < 0) {
  3575  00C1  1FC0               	btfss	scale@scl,7
  3576  00C2  29E4               	goto	l2073
  3577                           
  3578                           ;doprnt.c: 429: scl = -scl;
  3579  00C3  09C0               	comf	scale@scl,f
  3580  00C4  0AC0               	incf	scale@scl,f
  3581                           
  3582                           ;doprnt.c: 430: if(scl>=110)
  3583  00C5  0840               	movf	scale@scl,w
  3584  00C6  3A80               	xorlw	128
  3585  00C7  3E12               	addlw	-238
  3586  00C8  1C03               	skipc
  3587  00C9  2968               	goto	l2063
  3588                           
  3589                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3590  00CA  300A               	movlw	10
  3591  00CB  00F7               	movwf	___awdiv@divisor
  3592  00CC  3000               	movlw	0
  3593  00CD  00F8               	movwf	___awdiv@divisor+1
  3594  00CE  0840               	movf	scale@scl,w
  3595  00CF  00F2               	movwf	___awmod@dividend
  3596  00D0  01F3               	clrf	___awmod@dividend+1
  3597  00D1  1BF2               	btfsc	___awmod@dividend,7
  3598  00D2  03F3               	decf	___awmod@dividend+1,f
  3599  00D3  3064               	movlw	100
  3600  00D4  00F0               	movwf	___awmod@divisor
  3601  00D5  3000               	movlw	0
  3602  00D6  00F1               	movwf	___awmod@divisor+1
  3603  00D7  3197  27BB  3180   	fcall	___awmod
  3604  00DA  0871               	movf	?___awmod+1,w
  3605  00DB  00FA               	movwf	___awdiv@dividend+1
  3606  00DC  0870               	movf	?___awmod,w
  3607  00DD  00F9               	movwf	___awdiv@dividend
  3608  00DE  3188  20CF  3180   	fcall	___awdiv
  3609  00E1  0877               	movf	?___awdiv,w
  3610  00E2  3E09               	addlw	9
  3611  00E3  0020               	movlb	0	; select bank0
  3612  00E4  00A4               	movwf	___wmul@multiplier
  3613  00E5  3000               	movlw	0
  3614  00E6  3D78               	addwfc	?___awdiv+1,w
  3615  00E7  00A5               	movwf	___wmul@multiplier+1
  3616  00E8  3003               	movlw	3
  3617  00E9  00A6               	movwf	___wmul@multiplicand
  3618  00EA  3000               	movlw	0
  3619  00EB  00A7               	movwf	___wmul@multiplicand+1
  3620  00EC  3196  26CA  3180   	fcall	___wmul
  3621  00EF  0020               	movlb	0	; select bank0
  3622  00F0  0825               	movf	?___wmul+1,w
  3623  00F1  0085               	movwf	5
  3624  00F2  0824               	movf	?___wmul,w
  3625  00F3  0084               	movwf	4
  3626  00F4  304F               	movlw	low (__npowers_| (0+32768))
  3627  00F5  0784               	addwf	4,f
  3628  00F6  3098               	movlw	high (__npowers_| (0+32768))
  3629  00F7  3D85               	addwfc	5,f
  3630  00F8  3F00               	moviw [0]fsr0
  3631  00F9  00A8               	movwf	___ftmul@f1
  3632  00FA  3F01               	moviw [1]fsr0
  3633  00FB  00A9               	movwf	___ftmul@f1+1
  3634  00FC  3F02               	moviw [2]fsr0
  3635  00FD  00AA               	movwf	___ftmul@f1+2
  3636  00FE  3064               	movlw	100
  3637  00FF  00F7               	movwf	___awdiv@divisor
  3638  0100  3000               	movlw	0
  3639  0101  00F8               	movwf	___awdiv@divisor+1
  3640  0102  0840               	movf	scale@scl,w
  3641  0103  00F9               	movwf	___awdiv@dividend
  3642  0104  01FA               	clrf	___awdiv@dividend+1
  3643  0105  1BF9               	btfsc	___awdiv@dividend,7
  3644  0106  03FA               	decf	___awdiv@dividend+1,f
  3645  0107  3188  20CF  3180   	fcall	___awdiv
  3646  010A  0877               	movf	?___awdiv,w
  3647  010B  3E12               	addlw	18
  3648  010C  0020               	movlb	0	; select bank0
  3649  010D  00A4               	movwf	___wmul@multiplier
  3650  010E  3000               	movlw	0
  3651  010F  3D78               	addwfc	?___awdiv+1,w
  3652  0110  00A5               	movwf	___wmul@multiplier+1
  3653  0111  3003               	movlw	3
  3654  0112  00A6               	movwf	___wmul@multiplicand
  3655  0113  3000               	movlw	0
  3656  0114  00A7               	movwf	___wmul@multiplicand+1
  3657  0115  3196  26CA  3180   	fcall	___wmul
  3658  0118  0020               	movlb	0	; select bank0
  3659  0119  0825               	movf	?___wmul+1,w
  3660  011A  0085               	movwf	5
  3661  011B  0824               	movf	?___wmul,w
  3662  011C  0084               	movwf	4
  3663  011D  304F               	movlw	low (__npowers_| (0+32768))
  3664  011E  0784               	addwf	4,f
  3665  011F  3098               	movlw	high (__npowers_| (0+32768))
  3666  0120  3D85               	addwfc	5,f
  3667  0121  3F00               	moviw [0]fsr0
  3668  0122  00AB               	movwf	___ftmul@f2
  3669  0123  3F01               	moviw [1]fsr0
  3670  0124  00AC               	movwf	___ftmul@f2+1
  3671  0125  3F02               	moviw [2]fsr0
  3672  0126  00AD               	movwf	___ftmul@f2+2
  3673  0127  318B  2308  3180   	fcall	___ftmul
  3674  012A  0020               	movlb	0	; select bank0
  3675  012B  0828               	movf	?___ftmul,w
  3676  012C  00BD               	movwf	_scale$754
  3677  012D  0829               	movf	?___ftmul+1,w
  3678  012E  00BE               	movwf	_scale$754+1
  3679  012F  082A               	movf	?___ftmul+2,w
  3680  0130  00BF               	movwf	_scale$754+2
  3681                           
  3682                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3683  0131  0840               	movf	scale@scl,w
  3684  0132  00F2               	movwf	___awmod@dividend
  3685  0133  01F3               	clrf	___awmod@dividend+1
  3686  0134  1BF2               	btfsc	___awmod@dividend,7
  3687  0135  03F3               	decf	___awmod@dividend+1,f
  3688  0136  300A               	movlw	10
  3689  0137  00F0               	movwf	___awmod@divisor
  3690  0138  3000               	movlw	0
  3691  0139  00F1               	movwf	___awmod@divisor+1
  3692  013A  3197  27BB  3180   	fcall	___awmod
  3693  013D  0871               	movf	?___awmod+1,w
  3694  013E  0020               	movlb	0	; select bank0
  3695  013F  00A5               	movwf	___wmul@multiplier+1
  3696  0140  0870               	movf	?___awmod,w
  3697  0141  00A4               	movwf	___wmul@multiplier
  3698  0142  3003               	movlw	3
  3699  0143  00A6               	movwf	___wmul@multiplicand
  3700  0144  3000               	movlw	0
  3701  0145  00A7               	movwf	___wmul@multiplicand+1
  3702  0146  3196  26CA  3180   	fcall	___wmul
  3703  0149  0020               	movlb	0	; select bank0
  3704  014A  0825               	movf	?___wmul+1,w
  3705  014B  0085               	movwf	5
  3706  014C  0824               	movf	?___wmul,w
  3707  014D  0084               	movwf	4
  3708  014E  304F               	movlw	low (__npowers_| (0+32768))
  3709  014F  0784               	addwf	4,f
  3710  0150  3098               	movlw	high (__npowers_| (0+32768))
  3711  0151  3D85               	addwfc	5,f
  3712  0152  3F00               	moviw [0]fsr0
  3713  0153  00A8               	movwf	___ftmul@f1
  3714  0154  3F01               	moviw [1]fsr0
  3715  0155  00A9               	movwf	___ftmul@f1+1
  3716  0156  3F02               	moviw [2]fsr0
  3717  0157  00AA               	movwf	___ftmul@f1+2
  3718  0158  083D               	movf	_scale$754,w
  3719  0159  00AB               	movwf	___ftmul@f2
  3720  015A  083E               	movf	_scale$754+1,w
  3721  015B  00AC               	movwf	___ftmul@f2+1
  3722  015C  083F               	movf	_scale$754+2,w
  3723  015D  00AD               	movwf	___ftmul@f2+2
  3724  015E  318B  2308         	fcall	___ftmul
  3725  0160  0020               	movlb	0	; select bank0
  3726  0161  0828               	movf	?___ftmul,w
  3727  0162  00B8               	movwf	?_scale
  3728  0163  0829               	movf	?___ftmul+1,w
  3729  0164  00B9               	movwf	?_scale+1
  3730  0165  082A               	movf	?___ftmul+2,w
  3731  0166  00BA               	movwf	?_scale+2
  3732  0167  0008               	return
  3733  0168                     l2063:	
  3734                           
  3735                           ;doprnt.c: 432: else if(scl > 10)
  3736  0168  0840               	movf	scale@scl,w
  3737  0169  3A80               	xorlw	128
  3738  016A  3E75               	addlw	-139
  3739  016B  1C03               	skipc
  3740  016C  29C7               	goto	l2069
  3741                           
  3742                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3743  016D  0840               	movf	scale@scl,w
  3744  016E  00F2               	movwf	___awmod@dividend
  3745  016F  01F3               	clrf	___awmod@dividend+1
  3746  0170  1BF2               	btfsc	___awmod@dividend,7
  3747  0171  03F3               	decf	___awmod@dividend+1,f
  3748  0172  300A               	movlw	10
  3749  0173  00F0               	movwf	___awmod@divisor
  3750  0174  3000               	movlw	0
  3751  0175  00F1               	movwf	___awmod@divisor+1
  3752  0176  3197  27BB  3180   	fcall	___awmod
  3753  0179  0871               	movf	?___awmod+1,w
  3754  017A  0020               	movlb	0	; select bank0
  3755  017B  00A5               	movwf	___wmul@multiplier+1
  3756  017C  0870               	movf	?___awmod,w
  3757  017D  00A4               	movwf	___wmul@multiplier
  3758  017E  3003               	movlw	3
  3759  017F  00A6               	movwf	___wmul@multiplicand
  3760  0180  3000               	movlw	0
  3761  0181  00A7               	movwf	___wmul@multiplicand+1
  3762  0182  3196  26CA  3180   	fcall	___wmul
  3763  0185  0020               	movlb	0	; select bank0
  3764  0186  0825               	movf	?___wmul+1,w
  3765  0187  0085               	movwf	5
  3766  0188  0824               	movf	?___wmul,w
  3767  0189  0084               	movwf	4
  3768  018A  304F               	movlw	low (__npowers_| (0+32768))
  3769  018B  0784               	addwf	4,f
  3770  018C  3098               	movlw	high (__npowers_| (0+32768))
  3771  018D  3D85               	addwfc	5,f
  3772  018E  3F00               	moviw [0]fsr0
  3773  018F  00A8               	movwf	___ftmul@f1
  3774  0190  3F01               	moviw [1]fsr0
  3775  0191  00A9               	movwf	___ftmul@f1+1
  3776  0192  3F02               	moviw [2]fsr0
  3777  0193  00AA               	movwf	___ftmul@f1+2
  3778  0194  300A               	movlw	10
  3779  0195  00F7               	movwf	___awdiv@divisor
  3780  0196  3000               	movlw	0
  3781  0197  00F8               	movwf	___awdiv@divisor+1
  3782  0198  0840               	movf	scale@scl,w
  3783  0199  00F9               	movwf	___awdiv@dividend
  3784  019A  01FA               	clrf	___awdiv@dividend+1
  3785  019B  1BF9               	btfsc	___awdiv@dividend,7
  3786  019C  03FA               	decf	___awdiv@dividend+1,f
  3787  019D  3188  20CF  3180   	fcall	___awdiv
  3788  01A0  0877               	movf	?___awdiv,w
  3789  01A1  3E09               	addlw	9
  3790  01A2  0020               	movlb	0	; select bank0
  3791  01A3  00A4               	movwf	___wmul@multiplier
  3792  01A4  3000               	movlw	0
  3793  01A5  3D78               	addwfc	?___awdiv+1,w
  3794  01A6  00A5               	movwf	___wmul@multiplier+1
  3795  01A7  3003               	movlw	3
  3796  01A8  00A6               	movwf	___wmul@multiplicand
  3797  01A9  3000               	movlw	0
  3798  01AA  00A7               	movwf	___wmul@multiplicand+1
  3799  01AB  3196  26CA  3180   	fcall	___wmul
  3800  01AE  0020               	movlb	0	; select bank0
  3801  01AF  0825               	movf	?___wmul+1,w
  3802  01B0  0085               	movwf	5
  3803  01B1  0824               	movf	?___wmul,w
  3804  01B2  0084               	movwf	4
  3805  01B3  304F               	movlw	low (__npowers_| (0+32768))
  3806  01B4  0784               	addwf	4,f
  3807  01B5  3098               	movlw	high (__npowers_| (0+32768))
  3808  01B6  3D85               	addwfc	5,f
  3809  01B7  3F00               	moviw [0]fsr0
  3810  01B8  00AB               	movwf	___ftmul@f2
  3811  01B9  3F01               	moviw [1]fsr0
  3812  01BA  00AC               	movwf	___ftmul@f2+1
  3813  01BB  3F02               	moviw [2]fsr0
  3814  01BC  00AD               	movwf	___ftmul@f2+2
  3815  01BD  318B  2308         	fcall	___ftmul
  3816  01BF  0020               	movlb	0	; select bank0
  3817  01C0  0828               	movf	?___ftmul,w
  3818  01C1  00B8               	movwf	?_scale
  3819  01C2  0829               	movf	?___ftmul+1,w
  3820  01C3  00B9               	movwf	?_scale+1
  3821  01C4  082A               	movf	?___ftmul+2,w
  3822  01C5  00BA               	movwf	?_scale+2
  3823  01C6  0008               	return
  3824  01C7                     l2069:	
  3825                           
  3826                           ;doprnt.c: 434: return _npowers_[scl];
  3827  01C7  0840               	movf	scale@scl,w
  3828  01C8  00BB               	movwf	??_scale
  3829  01C9  01BC               	clrf	??_scale+1
  3830  01CA  083B               	movf	??_scale,w
  3831  01CB  00A4               	movwf	___wmul@multiplier
  3832  01CC  083C               	movf	??_scale+1,w
  3833  01CD  00A5               	movwf	___wmul@multiplier+1
  3834  01CE  3003               	movlw	3
  3835  01CF  00A6               	movwf	___wmul@multiplicand
  3836  01D0  3000               	movlw	0
  3837  01D1  00A7               	movwf	___wmul@multiplicand+1
  3838  01D2  3196  26CA         	fcall	___wmul
  3839  01D4  0020               	movlb	0	; select bank0
  3840  01D5  0825               	movf	?___wmul+1,w
  3841  01D6  0085               	movwf	5
  3842  01D7  0824               	movf	?___wmul,w
  3843  01D8  0084               	movwf	4
  3844  01D9  304F               	movlw	low (__npowers_| (0+32768))
  3845  01DA  0784               	addwf	4,f
  3846  01DB  3098               	movlw	high (__npowers_| (0+32768))
  3847  01DC  3D85               	addwfc	5,f
  3848  01DD  3F00               	moviw [0]fsr0
  3849  01DE  00B8               	movwf	?_scale
  3850  01DF  3F01               	moviw [1]fsr0
  3851  01E0  00B9               	movwf	?_scale+1
  3852  01E1  3F02               	moviw [2]fsr0
  3853  01E2  00BA               	movwf	?_scale+2
  3854  01E3  0008               	return
  3855  01E4                     l2073:	
  3856                           
  3857                           ;doprnt.c: 435: }
  3858                           ;doprnt.c: 436: if(scl>=110)
  3859  01E4  0840               	movf	scale@scl,w
  3860  01E5  3A80               	xorlw	128
  3861  01E6  3E12               	addlw	-238
  3862  01E7  1C03               	skipc
  3863  01E8  2A87               	goto	l2081
  3864                           
  3865                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3866  01E9  300A               	movlw	10
  3867  01EA  00F7               	movwf	___awdiv@divisor
  3868  01EB  3000               	movlw	0
  3869  01EC  00F8               	movwf	___awdiv@divisor+1
  3870  01ED  0840               	movf	scale@scl,w
  3871  01EE  00F2               	movwf	___awmod@dividend
  3872  01EF  01F3               	clrf	___awmod@dividend+1
  3873  01F0  1BF2               	btfsc	___awmod@dividend,7
  3874  01F1  03F3               	decf	___awmod@dividend+1,f
  3875  01F2  3064               	movlw	100
  3876  01F3  00F0               	movwf	___awmod@divisor
  3877  01F4  3000               	movlw	0
  3878  01F5  00F1               	movwf	___awmod@divisor+1
  3879  01F6  3197  27BB  3180   	fcall	___awmod
  3880  01F9  0871               	movf	?___awmod+1,w
  3881  01FA  00FA               	movwf	___awdiv@dividend+1
  3882  01FB  0870               	movf	?___awmod,w
  3883  01FC  00F9               	movwf	___awdiv@dividend
  3884  01FD  3188  20CF  3180   	fcall	___awdiv
  3885  0200  0877               	movf	?___awdiv,w
  3886  0201  3E09               	addlw	9
  3887  0202  0020               	movlb	0	; select bank0
  3888  0203  00A4               	movwf	___wmul@multiplier
  3889  0204  3000               	movlw	0
  3890  0205  3D78               	addwfc	?___awdiv+1,w
  3891  0206  00A5               	movwf	___wmul@multiplier+1
  3892  0207  3003               	movlw	3
  3893  0208  00A6               	movwf	___wmul@multiplicand
  3894  0209  3000               	movlw	0
  3895  020A  00A7               	movwf	___wmul@multiplicand+1
  3896  020B  3196  26CA  3180   	fcall	___wmul
  3897  020E  0020               	movlb	0	; select bank0
  3898  020F  0825               	movf	?___wmul+1,w
  3899  0210  0085               	movwf	5
  3900  0211  0824               	movf	?___wmul,w
  3901  0212  0084               	movwf	4
  3902  0213  3028               	movlw	low (__powers_| (0+32768))
  3903  0214  0784               	addwf	4,f
  3904  0215  3098               	movlw	high (__powers_| (0+32768))
  3905  0216  3D85               	addwfc	5,f
  3906  0217  3F00               	moviw [0]fsr0
  3907  0218  00A8               	movwf	___ftmul@f1
  3908  0219  3F01               	moviw [1]fsr0
  3909  021A  00A9               	movwf	___ftmul@f1+1
  3910  021B  3F02               	moviw [2]fsr0
  3911  021C  00AA               	movwf	___ftmul@f1+2
  3912  021D  3064               	movlw	100
  3913  021E  00F7               	movwf	___awdiv@divisor
  3914  021F  3000               	movlw	0
  3915  0220  00F8               	movwf	___awdiv@divisor+1
  3916  0221  0840               	movf	scale@scl,w
  3917  0222  00F9               	movwf	___awdiv@dividend
  3918  0223  01FA               	clrf	___awdiv@dividend+1
  3919  0224  1BF9               	btfsc	___awdiv@dividend,7
  3920  0225  03FA               	decf	___awdiv@dividend+1,f
  3921  0226  3188  20CF  3180   	fcall	___awdiv
  3922  0229  0877               	movf	?___awdiv,w
  3923  022A  3E12               	addlw	18
  3924  022B  0020               	movlb	0	; select bank0
  3925  022C  00A4               	movwf	___wmul@multiplier
  3926  022D  3000               	movlw	0
  3927  022E  3D78               	addwfc	?___awdiv+1,w
  3928  022F  00A5               	movwf	___wmul@multiplier+1
  3929  0230  3003               	movlw	3
  3930  0231  00A6               	movwf	___wmul@multiplicand
  3931  0232  3000               	movlw	0
  3932  0233  00A7               	movwf	___wmul@multiplicand+1
  3933  0234  3196  26CA  3180   	fcall	___wmul
  3934  0237  0020               	movlb	0	; select bank0
  3935  0238  0825               	movf	?___wmul+1,w
  3936  0239  0085               	movwf	5
  3937  023A  0824               	movf	?___wmul,w
  3938  023B  0084               	movwf	4
  3939  023C  3028               	movlw	low (__powers_| (0+32768))
  3940  023D  0784               	addwf	4,f
  3941  023E  3098               	movlw	high (__powers_| (0+32768))
  3942  023F  3D85               	addwfc	5,f
  3943  0240  3F00               	moviw [0]fsr0
  3944  0241  00AB               	movwf	___ftmul@f2
  3945  0242  3F01               	moviw [1]fsr0
  3946  0243  00AC               	movwf	___ftmul@f2+1
  3947  0244  3F02               	moviw [2]fsr0
  3948  0245  00AD               	movwf	___ftmul@f2+2
  3949  0246  318B  2308  3180   	fcall	___ftmul
  3950  0249  0020               	movlb	0	; select bank0
  3951  024A  0828               	movf	?___ftmul,w
  3952  024B  00BD               	movwf	_scale$754
  3953  024C  0829               	movf	?___ftmul+1,w
  3954  024D  00BE               	movwf	_scale$754+1
  3955  024E  082A               	movf	?___ftmul+2,w
  3956  024F  00BF               	movwf	_scale$754+2
  3957                           
  3958                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3959  0250  0840               	movf	scale@scl,w
  3960  0251  00F2               	movwf	___awmod@dividend
  3961  0252  01F3               	clrf	___awmod@dividend+1
  3962  0253  1BF2               	btfsc	___awmod@dividend,7
  3963  0254  03F3               	decf	___awmod@dividend+1,f
  3964  0255  300A               	movlw	10
  3965  0256  00F0               	movwf	___awmod@divisor
  3966  0257  3000               	movlw	0
  3967  0258  00F1               	movwf	___awmod@divisor+1
  3968  0259  3197  27BB  3180   	fcall	___awmod
  3969  025C  0871               	movf	?___awmod+1,w
  3970  025D  0020               	movlb	0	; select bank0
  3971  025E  00A5               	movwf	___wmul@multiplier+1
  3972  025F  0870               	movf	?___awmod,w
  3973  0260  00A4               	movwf	___wmul@multiplier
  3974  0261  3003               	movlw	3
  3975  0262  00A6               	movwf	___wmul@multiplicand
  3976  0263  3000               	movlw	0
  3977  0264  00A7               	movwf	___wmul@multiplicand+1
  3978  0265  3196  26CA  3180   	fcall	___wmul
  3979  0268  0020               	movlb	0	; select bank0
  3980  0269  0825               	movf	?___wmul+1,w
  3981  026A  0085               	movwf	5
  3982  026B  0824               	movf	?___wmul,w
  3983  026C  0084               	movwf	4
  3984  026D  3028               	movlw	low (__powers_| (0+32768))
  3985  026E  0784               	addwf	4,f
  3986  026F  3098               	movlw	high (__powers_| (0+32768))
  3987  0270  3D85               	addwfc	5,f
  3988  0271  3F00               	moviw [0]fsr0
  3989  0272  00A8               	movwf	___ftmul@f1
  3990  0273  3F01               	moviw [1]fsr0
  3991  0274  00A9               	movwf	___ftmul@f1+1
  3992  0275  3F02               	moviw [2]fsr0
  3993  0276  00AA               	movwf	___ftmul@f1+2
  3994  0277  083D               	movf	_scale$754,w
  3995  0278  00AB               	movwf	___ftmul@f2
  3996  0279  083E               	movf	_scale$754+1,w
  3997  027A  00AC               	movwf	___ftmul@f2+1
  3998  027B  083F               	movf	_scale$754+2,w
  3999  027C  00AD               	movwf	___ftmul@f2+2
  4000  027D  318B  2308         	fcall	___ftmul
  4001  027F  0020               	movlb	0	; select bank0
  4002  0280  0828               	movf	?___ftmul,w
  4003  0281  00B8               	movwf	?_scale
  4004  0282  0829               	movf	?___ftmul+1,w
  4005  0283  00B9               	movwf	?_scale+1
  4006  0284  082A               	movf	?___ftmul+2,w
  4007  0285  00BA               	movwf	?_scale+2
  4008  0286  0008               	return
  4009  0287                     l2081:	
  4010                           
  4011                           ;doprnt.c: 438: else if(scl > 10)
  4012  0287  0840               	movf	scale@scl,w
  4013  0288  3A80               	xorlw	128
  4014  0289  3E75               	addlw	-139
  4015  028A  1C03               	skipc
  4016  028B  2AE6               	goto	l2087
  4017                           
  4018                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4019  028C  0840               	movf	scale@scl,w
  4020  028D  00F2               	movwf	___awmod@dividend
  4021  028E  01F3               	clrf	___awmod@dividend+1
  4022  028F  1BF2               	btfsc	___awmod@dividend,7
  4023  0290  03F3               	decf	___awmod@dividend+1,f
  4024  0291  300A               	movlw	10
  4025  0292  00F0               	movwf	___awmod@divisor
  4026  0293  3000               	movlw	0
  4027  0294  00F1               	movwf	___awmod@divisor+1
  4028  0295  3197  27BB  3180   	fcall	___awmod
  4029  0298  0871               	movf	?___awmod+1,w
  4030  0299  0020               	movlb	0	; select bank0
  4031  029A  00A5               	movwf	___wmul@multiplier+1
  4032  029B  0870               	movf	?___awmod,w
  4033  029C  00A4               	movwf	___wmul@multiplier
  4034  029D  3003               	movlw	3
  4035  029E  00A6               	movwf	___wmul@multiplicand
  4036  029F  3000               	movlw	0
  4037  02A0  00A7               	movwf	___wmul@multiplicand+1
  4038  02A1  3196  26CA  3180   	fcall	___wmul
  4039  02A4  0020               	movlb	0	; select bank0
  4040  02A5  0825               	movf	?___wmul+1,w
  4041  02A6  0085               	movwf	5
  4042  02A7  0824               	movf	?___wmul,w
  4043  02A8  0084               	movwf	4
  4044  02A9  3028               	movlw	low (__powers_| (0+32768))
  4045  02AA  0784               	addwf	4,f
  4046  02AB  3098               	movlw	high (__powers_| (0+32768))
  4047  02AC  3D85               	addwfc	5,f
  4048  02AD  3F00               	moviw [0]fsr0
  4049  02AE  00A8               	movwf	___ftmul@f1
  4050  02AF  3F01               	moviw [1]fsr0
  4051  02B0  00A9               	movwf	___ftmul@f1+1
  4052  02B1  3F02               	moviw [2]fsr0
  4053  02B2  00AA               	movwf	___ftmul@f1+2
  4054  02B3  300A               	movlw	10
  4055  02B4  00F7               	movwf	___awdiv@divisor
  4056  02B5  3000               	movlw	0
  4057  02B6  00F8               	movwf	___awdiv@divisor+1
  4058  02B7  0840               	movf	scale@scl,w
  4059  02B8  00F9               	movwf	___awdiv@dividend
  4060  02B9  01FA               	clrf	___awdiv@dividend+1
  4061  02BA  1BF9               	btfsc	___awdiv@dividend,7
  4062  02BB  03FA               	decf	___awdiv@dividend+1,f
  4063  02BC  3188  20CF  3180   	fcall	___awdiv
  4064  02BF  0877               	movf	?___awdiv,w
  4065  02C0  3E09               	addlw	9
  4066  02C1  0020               	movlb	0	; select bank0
  4067  02C2  00A4               	movwf	___wmul@multiplier
  4068  02C3  3000               	movlw	0
  4069  02C4  3D78               	addwfc	?___awdiv+1,w
  4070  02C5  00A5               	movwf	___wmul@multiplier+1
  4071  02C6  3003               	movlw	3
  4072  02C7  00A6               	movwf	___wmul@multiplicand
  4073  02C8  3000               	movlw	0
  4074  02C9  00A7               	movwf	___wmul@multiplicand+1
  4075  02CA  3196  26CA  3180   	fcall	___wmul
  4076  02CD  0020               	movlb	0	; select bank0
  4077  02CE  0825               	movf	?___wmul+1,w
  4078  02CF  0085               	movwf	5
  4079  02D0  0824               	movf	?___wmul,w
  4080  02D1  0084               	movwf	4
  4081  02D2  3028               	movlw	low (__powers_| (0+32768))
  4082  02D3  0784               	addwf	4,f
  4083  02D4  3098               	movlw	high (__powers_| (0+32768))
  4084  02D5  3D85               	addwfc	5,f
  4085  02D6  3F00               	moviw [0]fsr0
  4086  02D7  00AB               	movwf	___ftmul@f2
  4087  02D8  3F01               	moviw [1]fsr0
  4088  02D9  00AC               	movwf	___ftmul@f2+1
  4089  02DA  3F02               	moviw [2]fsr0
  4090  02DB  00AD               	movwf	___ftmul@f2+2
  4091  02DC  318B  2308         	fcall	___ftmul
  4092  02DE  0020               	movlb	0	; select bank0
  4093  02DF  0828               	movf	?___ftmul,w
  4094  02E0  00B8               	movwf	?_scale
  4095  02E1  0829               	movf	?___ftmul+1,w
  4096  02E2  00B9               	movwf	?_scale+1
  4097  02E3  082A               	movf	?___ftmul+2,w
  4098  02E4  00BA               	movwf	?_scale+2
  4099  02E5  0008               	return
  4100  02E6                     l2087:	
  4101                           
  4102                           ;doprnt.c: 440: return _powers_[scl];
  4103  02E6  0840               	movf	scale@scl,w
  4104  02E7  00BB               	movwf	??_scale
  4105  02E8  01BC               	clrf	??_scale+1
  4106  02E9  083B               	movf	??_scale,w
  4107  02EA  00A4               	movwf	___wmul@multiplier
  4108  02EB  083C               	movf	??_scale+1,w
  4109  02EC  00A5               	movwf	___wmul@multiplier+1
  4110  02ED  3003               	movlw	3
  4111  02EE  00A6               	movwf	___wmul@multiplicand
  4112  02EF  3000               	movlw	0
  4113  02F0  00A7               	movwf	___wmul@multiplicand+1
  4114  02F1  3196  26CA         	fcall	___wmul
  4115  02F3  0020               	movlb	0	; select bank0
  4116  02F4  0825               	movf	?___wmul+1,w
  4117  02F5  0085               	movwf	5
  4118  02F6  0824               	movf	?___wmul,w
  4119  02F7  0084               	movwf	4
  4120  02F8  3028               	movlw	low (__powers_| (0+32768))
  4121  02F9  0784               	addwf	4,f
  4122  02FA  3098               	movlw	high (__powers_| (0+32768))
  4123  02FB  3D85               	addwfc	5,f
  4124  02FC  3F00               	moviw [0]fsr0
  4125  02FD  00B8               	movwf	?_scale
  4126  02FE  3F01               	moviw [1]fsr0
  4127  02FF  00B9               	movwf	?_scale+1
  4128  0300  3F02               	moviw [2]fsr0
  4129  0301  00BA               	movwf	?_scale+2
  4130  0302  0008               	return
  4131  0303                     __end_of_scale:	
  4132                           
  4133                           	psect	text3
  4134  167B                     __ptext3:	
  4135 ;; *************** function _isdigit *****************
  4136 ;; Defined at:
  4137 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;  c               1    wreg     unsigned char 
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;  c               1    1[COMMON] unsigned char 
  4142 ;; Return value:  Size  Location     Type
  4143 ;;		None               void
  4144 ;; Registers used:
  4145 ;;		wreg, status,2, status,0
  4146 ;; Tracked objects:
  4147 ;;		On entry : 0/0
  4148 ;;		On exit  : 0/0
  4149 ;;		Unchanged: 0/0
  4150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4151 ;;      Params:         0       0       0       0       0       0       0       0
  4152 ;;      Locals:         2       0       0       0       0       0       0       0
  4153 ;;      Temps:          0       0       0       0       0       0       0       0
  4154 ;;      Totals:         2       0       0       0       0       0       0       0
  4155 ;;Total ram usage:        2 bytes
  4156 ;; Hardware stack levels used:    1
  4157 ;; This function calls:
  4158 ;;		Nothing
  4159 ;; This function is called by:
  4160 ;;		_sprintf
  4161 ;; This function uses a non-reentrant model
  4162 ;;
  4163                           
  4164                           
  4165                           ;psect for function _isdigit
  4166  167B                     _isdigit:	
  4167                           
  4168                           ;incstack = 0
  4169                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4170                           ;isdigit@c stored from wreg
  4171  167B  00F1               	movwf	isdigit@c
  4172  167C  01F0               	clrf	_isdigit$520
  4173  167D  303A               	movlw	58
  4174  167E  0271               	subwf	isdigit@c,w
  4175  167F  1803               	skipnc
  4176  1680  2E87               	goto	l2099
  4177  1681  3030               	movlw	48
  4178  1682  0271               	subwf	isdigit@c,w
  4179  1683  1C03               	skipc
  4180  1684  2E87               	goto	l2099
  4181  1685  01F0               	clrf	_isdigit$520
  4182  1686  0AF0               	incf	_isdigit$520,f
  4183  1687                     l2099:	
  4184  1687  0C70               	rrf	_isdigit$520,w
  4185  1688  0008               	return
  4186  1689                     __end_of_isdigit:	
  4187                           
  4188                           	psect	text4
  4189  0E9B                     __ptext4:	
  4190 ;; *************** function _fround *****************
  4191 ;; Defined at:
  4192 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;  prec            1    wreg     unsigned char 
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;  prec            1   37[BANK0 ] unsigned char 
  4197 ;; Return value:  Size  Location     Type
  4198 ;;                  3   24[BANK0 ] unsigned char 
  4199 ;; Registers used:
  4200 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4201 ;; Tracked objects:
  4202 ;;		On entry : 0/0
  4203 ;;		On exit  : 0/0
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4206 ;;      Params:         0       3       0       0       0       0       0       0
  4207 ;;      Locals:         0       7       0       0       0       0       0       0
  4208 ;;      Temps:          0       4       0       0       0       0       0       0
  4209 ;;      Totals:         0      14       0       0       0       0       0       0
  4210 ;;Total ram usage:       14 bytes
  4211 ;; Hardware stack levels used:    1
  4212 ;; Hardware stack levels required when called:    2
  4213 ;; This function calls:
  4214 ;;		___awdiv
  4215 ;;		___awmod
  4216 ;;		___ftmul
  4217 ;;		___wmul
  4218 ;; This function is called by:
  4219 ;;		_sprintf
  4220 ;; This function uses a non-reentrant model
  4221 ;;
  4222                           
  4223                           
  4224                           ;psect for function _fround
  4225  0E9B                     _fround:	
  4226                           
  4227                           ;incstack = 0
  4228                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4229                           ;fround@prec stored from wreg
  4230  0E9B  0020               	movlb	0	; select bank0
  4231  0E9C  00C5               	movwf	fround@prec
  4232                           
  4233                           ;doprnt.c: 413: if(prec>=110)
  4234  0E9D  306E               	movlw	110
  4235  0E9E  0245               	subwf	fround@prec,w
  4236  0E9F  1C03               	skipc
  4237  0EA0  2F5B               	goto	l2039
  4238                           
  4239                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4240  0EA1  300A               	movlw	10
  4241  0EA2  00F7               	movwf	___awdiv@divisor
  4242  0EA3  3000               	movlw	0
  4243  0EA4  00F8               	movwf	___awdiv@divisor+1
  4244  0EA5  0845               	movf	fround@prec,w
  4245  0EA6  00BB               	movwf	??_fround
  4246  0EA7  01BC               	clrf	??_fround+1
  4247  0EA8  083B               	movf	??_fround,w
  4248  0EA9  00F2               	movwf	___awmod@dividend
  4249  0EAA  083C               	movf	??_fround+1,w
  4250  0EAB  00F3               	movwf	___awmod@dividend+1
  4251  0EAC  3064               	movlw	100
  4252  0EAD  00F0               	movwf	___awmod@divisor
  4253  0EAE  3000               	movlw	0
  4254  0EAF  00F1               	movwf	___awmod@divisor+1
  4255  0EB0  3197  27BB  318E   	fcall	___awmod
  4256  0EB3  0871               	movf	?___awmod+1,w
  4257  0EB4  00FA               	movwf	___awdiv@dividend+1
  4258  0EB5  0870               	movf	?___awmod,w
  4259  0EB6  00F9               	movwf	___awdiv@dividend
  4260  0EB7  3188  20CF  318E   	fcall	___awdiv
  4261  0EBA  0877               	movf	?___awdiv,w
  4262  0EBB  3E09               	addlw	9
  4263  0EBC  0020               	movlb	0	; select bank0
  4264  0EBD  00A4               	movwf	___wmul@multiplier
  4265  0EBE  3000               	movlw	0
  4266  0EBF  3D78               	addwfc	?___awdiv+1,w
  4267  0EC0  00A5               	movwf	___wmul@multiplier+1
  4268  0EC1  3003               	movlw	3
  4269  0EC2  00A6               	movwf	___wmul@multiplicand
  4270  0EC3  3000               	movlw	0
  4271  0EC4  00A7               	movwf	___wmul@multiplicand+1
  4272  0EC5  3196  26CA  318E   	fcall	___wmul
  4273  0EC8  0020               	movlb	0	; select bank0
  4274  0EC9  0825               	movf	?___wmul+1,w
  4275  0ECA  0085               	movwf	5
  4276  0ECB  0824               	movf	?___wmul,w
  4277  0ECC  0084               	movwf	4
  4278  0ECD  304F               	movlw	low (__npowers_| (0+32768))
  4279  0ECE  0784               	addwf	4,f
  4280  0ECF  3098               	movlw	high (__npowers_| (0+32768))
  4281  0ED0  3D85               	addwfc	5,f
  4282  0ED1  3F00               	moviw [0]fsr0
  4283  0ED2  00A8               	movwf	___ftmul@f1
  4284  0ED3  3F01               	moviw [1]fsr0
  4285  0ED4  00A9               	movwf	___ftmul@f1+1
  4286  0ED5  3F02               	moviw [2]fsr0
  4287  0ED6  00AA               	movwf	___ftmul@f1+2
  4288  0ED7  3064               	movlw	100
  4289  0ED8  00F7               	movwf	___awdiv@divisor
  4290  0ED9  3000               	movlw	0
  4291  0EDA  00F8               	movwf	___awdiv@divisor+1
  4292  0EDB  0845               	movf	fround@prec,w
  4293  0EDC  00BD               	movwf	??_fround+2
  4294  0EDD  01BE               	clrf	??_fround+3
  4295  0EDE  083D               	movf	??_fround+2,w
  4296  0EDF  00F9               	movwf	___awdiv@dividend
  4297  0EE0  083E               	movf	??_fround+3,w
  4298  0EE1  00FA               	movwf	___awdiv@dividend+1
  4299  0EE2  3188  20CF  318E   	fcall	___awdiv
  4300  0EE5  0877               	movf	?___awdiv,w
  4301  0EE6  3E12               	addlw	18
  4302  0EE7  0020               	movlb	0	; select bank0
  4303  0EE8  00A4               	movwf	___wmul@multiplier
  4304  0EE9  3000               	movlw	0
  4305  0EEA  3D78               	addwfc	?___awdiv+1,w
  4306  0EEB  00A5               	movwf	___wmul@multiplier+1
  4307  0EEC  3003               	movlw	3
  4308  0EED  00A6               	movwf	___wmul@multiplicand
  4309  0EEE  3000               	movlw	0
  4310  0EEF  00A7               	movwf	___wmul@multiplicand+1
  4311  0EF0  3196  26CA  318E   	fcall	___wmul
  4312  0EF3  0020               	movlb	0	; select bank0
  4313  0EF4  0825               	movf	?___wmul+1,w
  4314  0EF5  0085               	movwf	5
  4315  0EF6  0824               	movf	?___wmul,w
  4316  0EF7  0084               	movwf	4
  4317  0EF8  304F               	movlw	low (__npowers_| (0+32768))
  4318  0EF9  0784               	addwf	4,f
  4319  0EFA  3098               	movlw	high (__npowers_| (0+32768))
  4320  0EFB  3D85               	addwfc	5,f
  4321  0EFC  3F00               	moviw [0]fsr0
  4322  0EFD  00AB               	movwf	___ftmul@f2
  4323  0EFE  3F01               	moviw [1]fsr0
  4324  0EFF  00AC               	movwf	___ftmul@f2+1
  4325  0F00  3F02               	moviw [2]fsr0
  4326  0F01  00AD               	movwf	___ftmul@f2+2
  4327  0F02  318B  2308  318E   	fcall	___ftmul
  4328  0F05  0020               	movlb	0	; select bank0
  4329  0F06  0828               	movf	?___ftmul,w
  4330  0F07  00C2               	movwf	_fround$752
  4331  0F08  0829               	movf	?___ftmul+1,w
  4332  0F09  00C3               	movwf	_fround$752+1
  4333  0F0A  082A               	movf	?___ftmul+2,w
  4334  0F0B  00C4               	movwf	_fround$752+2
  4335                           
  4336                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4337  0F0C  0845               	movf	fround@prec,w
  4338  0F0D  00BB               	movwf	??_fround
  4339  0F0E  01BC               	clrf	??_fround+1
  4340  0F0F  083B               	movf	??_fround,w
  4341  0F10  00F2               	movwf	___awmod@dividend
  4342  0F11  083C               	movf	??_fround+1,w
  4343  0F12  00F3               	movwf	___awmod@dividend+1
  4344  0F13  300A               	movlw	10
  4345  0F14  00F0               	movwf	___awmod@divisor
  4346  0F15  3000               	movlw	0
  4347  0F16  00F1               	movwf	___awmod@divisor+1
  4348  0F17  3197  27BB  318E   	fcall	___awmod
  4349  0F1A  0871               	movf	?___awmod+1,w
  4350  0F1B  0020               	movlb	0	; select bank0
  4351  0F1C  00A5               	movwf	___wmul@multiplier+1
  4352  0F1D  0870               	movf	?___awmod,w
  4353  0F1E  00A4               	movwf	___wmul@multiplier
  4354  0F1F  3003               	movlw	3
  4355  0F20  00A6               	movwf	___wmul@multiplicand
  4356  0F21  3000               	movlw	0
  4357  0F22  00A7               	movwf	___wmul@multiplicand+1
  4358  0F23  3196  26CA  318E   	fcall	___wmul
  4359  0F26  0020               	movlb	0	; select bank0
  4360  0F27  0825               	movf	?___wmul+1,w
  4361  0F28  0085               	movwf	5
  4362  0F29  0824               	movf	?___wmul,w
  4363  0F2A  0084               	movwf	4
  4364  0F2B  304F               	movlw	low (__npowers_| (0+32768))
  4365  0F2C  0784               	addwf	4,f
  4366  0F2D  3098               	movlw	high (__npowers_| (0+32768))
  4367  0F2E  3D85               	addwfc	5,f
  4368  0F2F  3F00               	moviw [0]fsr0
  4369  0F30  00A8               	movwf	___ftmul@f1
  4370  0F31  3F01               	moviw [1]fsr0
  4371  0F32  00A9               	movwf	___ftmul@f1+1
  4372  0F33  3F02               	moviw [2]fsr0
  4373  0F34  00AA               	movwf	___ftmul@f1+2
  4374  0F35  0842               	movf	_fround$752,w
  4375  0F36  00AB               	movwf	___ftmul@f2
  4376  0F37  0843               	movf	_fround$752+1,w
  4377  0F38  00AC               	movwf	___ftmul@f2+1
  4378  0F39  0844               	movf	_fround$752+2,w
  4379  0F3A  00AD               	movwf	___ftmul@f2+2
  4380  0F3B  318B  2308  318E   	fcall	___ftmul
  4381  0F3E  0020               	movlb	0	; select bank0
  4382  0F3F  0828               	movf	?___ftmul,w
  4383  0F40  00BF               	movwf	_fround$753
  4384  0F41  0829               	movf	?___ftmul+1,w
  4385  0F42  00C0               	movwf	_fround$753+1
  4386  0F43  082A               	movf	?___ftmul+2,w
  4387  0F44  00C1               	movwf	_fround$753+2
  4388                           
  4389                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4390  0F45  3000               	movlw	0
  4391  0F46  00A8               	movwf	___ftmul@f1
  4392  0F47  3000               	movlw	0
  4393  0F48  00A9               	movwf	___ftmul@f1+1
  4394  0F49  303F               	movlw	63
  4395  0F4A  00AA               	movwf	___ftmul@f1+2
  4396  0F4B  083F               	movf	_fround$753,w
  4397  0F4C  00AB               	movwf	___ftmul@f2
  4398  0F4D  0840               	movf	_fround$753+1,w
  4399  0F4E  00AC               	movwf	___ftmul@f2+1
  4400  0F4F  0841               	movf	_fround$753+2,w
  4401  0F50  00AD               	movwf	___ftmul@f2+2
  4402  0F51  318B  2308         	fcall	___ftmul
  4403  0F53  0020               	movlb	0	; select bank0
  4404  0F54  0828               	movf	?___ftmul,w
  4405  0F55  00B8               	movwf	?_fround
  4406  0F56  0829               	movf	?___ftmul+1,w
  4407  0F57  00B9               	movwf	?_fround+1
  4408  0F58  082A               	movf	?___ftmul+2,w
  4409  0F59  00BA               	movwf	?_fround+2
  4410  0F5A  0008               	return
  4411  0F5B                     l2039:	
  4412                           
  4413                           ;doprnt.c: 415: else if(prec > 10)
  4414  0F5B  300B               	movlw	11
  4415  0F5C  0245               	subwf	fround@prec,w
  4416  0F5D  1C03               	skipc
  4417  0F5E  2FD3               	goto	l2047
  4418                           
  4419                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4420  0F5F  0845               	movf	fround@prec,w
  4421  0F60  00BB               	movwf	??_fround
  4422  0F61  01BC               	clrf	??_fround+1
  4423  0F62  083B               	movf	??_fround,w
  4424  0F63  00F2               	movwf	___awmod@dividend
  4425  0F64  083C               	movf	??_fround+1,w
  4426  0F65  00F3               	movwf	___awmod@dividend+1
  4427  0F66  300A               	movlw	10
  4428  0F67  00F0               	movwf	___awmod@divisor
  4429  0F68  3000               	movlw	0
  4430  0F69  00F1               	movwf	___awmod@divisor+1
  4431  0F6A  3197  27BB  318E   	fcall	___awmod
  4432  0F6D  0871               	movf	?___awmod+1,w
  4433  0F6E  0020               	movlb	0	; select bank0
  4434  0F6F  00A5               	movwf	___wmul@multiplier+1
  4435  0F70  0870               	movf	?___awmod,w
  4436  0F71  00A4               	movwf	___wmul@multiplier
  4437  0F72  3003               	movlw	3
  4438  0F73  00A6               	movwf	___wmul@multiplicand
  4439  0F74  3000               	movlw	0
  4440  0F75  00A7               	movwf	___wmul@multiplicand+1
  4441  0F76  3196  26CA  318E   	fcall	___wmul
  4442  0F79  0020               	movlb	0	; select bank0
  4443  0F7A  0825               	movf	?___wmul+1,w
  4444  0F7B  0085               	movwf	5
  4445  0F7C  0824               	movf	?___wmul,w
  4446  0F7D  0084               	movwf	4
  4447  0F7E  304F               	movlw	low (__npowers_| (0+32768))
  4448  0F7F  0784               	addwf	4,f
  4449  0F80  3098               	movlw	high (__npowers_| (0+32768))
  4450  0F81  3D85               	addwfc	5,f
  4451  0F82  3F00               	moviw [0]fsr0
  4452  0F83  00A8               	movwf	___ftmul@f1
  4453  0F84  3F01               	moviw [1]fsr0
  4454  0F85  00A9               	movwf	___ftmul@f1+1
  4455  0F86  3F02               	moviw [2]fsr0
  4456  0F87  00AA               	movwf	___ftmul@f1+2
  4457  0F88  300A               	movlw	10
  4458  0F89  00F7               	movwf	___awdiv@divisor
  4459  0F8A  3000               	movlw	0
  4460  0F8B  00F8               	movwf	___awdiv@divisor+1
  4461  0F8C  0845               	movf	fround@prec,w
  4462  0F8D  00BD               	movwf	??_fround+2
  4463  0F8E  01BE               	clrf	??_fround+3
  4464  0F8F  083D               	movf	??_fround+2,w
  4465  0F90  00F9               	movwf	___awdiv@dividend
  4466  0F91  083E               	movf	??_fround+3,w
  4467  0F92  00FA               	movwf	___awdiv@dividend+1
  4468  0F93  3188  20CF  318E   	fcall	___awdiv
  4469  0F96  0877               	movf	?___awdiv,w
  4470  0F97  3E09               	addlw	9
  4471  0F98  0020               	movlb	0	; select bank0
  4472  0F99  00A4               	movwf	___wmul@multiplier
  4473  0F9A  3000               	movlw	0
  4474  0F9B  3D78               	addwfc	?___awdiv+1,w
  4475  0F9C  00A5               	movwf	___wmul@multiplier+1
  4476  0F9D  3003               	movlw	3
  4477  0F9E  00A6               	movwf	___wmul@multiplicand
  4478  0F9F  3000               	movlw	0
  4479  0FA0  00A7               	movwf	___wmul@multiplicand+1
  4480  0FA1  3196  26CA  318E   	fcall	___wmul
  4481  0FA4  0020               	movlb	0	; select bank0
  4482  0FA5  0825               	movf	?___wmul+1,w
  4483  0FA6  0085               	movwf	5
  4484  0FA7  0824               	movf	?___wmul,w
  4485  0FA8  0084               	movwf	4
  4486  0FA9  304F               	movlw	low (__npowers_| (0+32768))
  4487  0FAA  0784               	addwf	4,f
  4488  0FAB  3098               	movlw	high (__npowers_| (0+32768))
  4489  0FAC  3D85               	addwfc	5,f
  4490  0FAD  3F00               	moviw [0]fsr0
  4491  0FAE  00AB               	movwf	___ftmul@f2
  4492  0FAF  3F01               	moviw [1]fsr0
  4493  0FB0  00AC               	movwf	___ftmul@f2+1
  4494  0FB1  3F02               	moviw [2]fsr0
  4495  0FB2  00AD               	movwf	___ftmul@f2+2
  4496  0FB3  318B  2308  318E   	fcall	___ftmul
  4497  0FB6  0020               	movlb	0	; select bank0
  4498  0FB7  0828               	movf	?___ftmul,w
  4499  0FB8  00C2               	movwf	_fround$752
  4500  0FB9  0829               	movf	?___ftmul+1,w
  4501  0FBA  00C3               	movwf	_fround$752+1
  4502  0FBB  082A               	movf	?___ftmul+2,w
  4503  0FBC  00C4               	movwf	_fround$752+2
  4504                           
  4505                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4506  0FBD  3000               	movlw	0
  4507  0FBE  00A8               	movwf	___ftmul@f1
  4508  0FBF  3000               	movlw	0
  4509  0FC0  00A9               	movwf	___ftmul@f1+1
  4510  0FC1  303F               	movlw	63
  4511  0FC2  00AA               	movwf	___ftmul@f1+2
  4512  0FC3  0842               	movf	_fround$752,w
  4513  0FC4  00AB               	movwf	___ftmul@f2
  4514  0FC5  0843               	movf	_fround$752+1,w
  4515  0FC6  00AC               	movwf	___ftmul@f2+1
  4516  0FC7  0844               	movf	_fround$752+2,w
  4517  0FC8  00AD               	movwf	___ftmul@f2+2
  4518  0FC9  318B  2308         	fcall	___ftmul
  4519  0FCB  0020               	movlb	0	; select bank0
  4520  0FCC  0828               	movf	?___ftmul,w
  4521  0FCD  00B8               	movwf	?_fround
  4522  0FCE  0829               	movf	?___ftmul+1,w
  4523  0FCF  00B9               	movwf	?_fround+1
  4524  0FD0  082A               	movf	?___ftmul+2,w
  4525  0FD1  00BA               	movwf	?_fround+2
  4526  0FD2  0008               	return
  4527  0FD3                     l2047:	
  4528                           
  4529                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4530  0FD3  3000               	movlw	0
  4531  0FD4  00A8               	movwf	___ftmul@f1
  4532  0FD5  3000               	movlw	0
  4533  0FD6  00A9               	movwf	___ftmul@f1+1
  4534  0FD7  303F               	movlw	63
  4535  0FD8  00AA               	movwf	___ftmul@f1+2
  4536  0FD9  0845               	movf	fround@prec,w
  4537  0FDA  00BB               	movwf	??_fround
  4538  0FDB  01BC               	clrf	??_fround+1
  4539  0FDC  083B               	movf	??_fround,w
  4540  0FDD  00A4               	movwf	___wmul@multiplier
  4541  0FDE  083C               	movf	??_fround+1,w
  4542  0FDF  00A5               	movwf	___wmul@multiplier+1
  4543  0FE0  3003               	movlw	3
  4544  0FE1  00A6               	movwf	___wmul@multiplicand
  4545  0FE2  3000               	movlw	0
  4546  0FE3  00A7               	movwf	___wmul@multiplicand+1
  4547  0FE4  3196  26CA  318E   	fcall	___wmul
  4548  0FE7  0020               	movlb	0	; select bank0
  4549  0FE8  0825               	movf	?___wmul+1,w
  4550  0FE9  0085               	movwf	5
  4551  0FEA  0824               	movf	?___wmul,w
  4552  0FEB  0084               	movwf	4
  4553  0FEC  304F               	movlw	low (__npowers_| (0+32768))
  4554  0FED  0784               	addwf	4,f
  4555  0FEE  3098               	movlw	high (__npowers_| (0+32768))
  4556  0FEF  3D85               	addwfc	5,f
  4557  0FF0  3F00               	moviw [0]fsr0
  4558  0FF1  00AB               	movwf	___ftmul@f2
  4559  0FF2  3F01               	moviw [1]fsr0
  4560  0FF3  00AC               	movwf	___ftmul@f2+1
  4561  0FF4  3F02               	moviw [2]fsr0
  4562  0FF5  00AD               	movwf	___ftmul@f2+2
  4563  0FF6  318B  2308         	fcall	___ftmul
  4564  0FF8  0020               	movlb	0	; select bank0
  4565  0FF9  0828               	movf	?___ftmul,w
  4566  0FFA  00B8               	movwf	?_fround
  4567  0FFB  0829               	movf	?___ftmul+1,w
  4568  0FFC  00B9               	movwf	?_fround+1
  4569  0FFD  082A               	movf	?___ftmul+2,w
  4570  0FFE  00BA               	movwf	?_fround+2
  4571  0FFF  0008               	return
  4572  1000                     __end_of_fround:	
  4573                           
  4574                           	psect	text5
  4575  16CA                     __ptext5:	
  4576 ;; *************** function ___wmul *****************
  4577 ;; Defined at:
  4578 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  4579 ;; Parameters:    Size  Location     Type
  4580 ;;  multiplier      2    4[BANK0 ] unsigned int 
  4581 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  4582 ;; Auto vars:     Size  Location     Type
  4583 ;;  product         2   12[COMMON] unsigned int 
  4584 ;; Return value:  Size  Location     Type
  4585 ;;                  2    4[BANK0 ] unsigned int 
  4586 ;; Registers used:
  4587 ;;		wreg, status,2, status,0
  4588 ;; Tracked objects:
  4589 ;;		On entry : 0/0
  4590 ;;		On exit  : 0/0
  4591 ;;		Unchanged: 0/0
  4592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4593 ;;      Params:         0       4       0       0       0       0       0       0
  4594 ;;      Locals:         2       0       0       0       0       0       0       0
  4595 ;;      Temps:          0       0       0       0       0       0       0       0
  4596 ;;      Totals:         2       4       0       0       0       0       0       0
  4597 ;;Total ram usage:        6 bytes
  4598 ;; Hardware stack levels used:    1
  4599 ;; This function calls:
  4600 ;;		Nothing
  4601 ;; This function is called by:
  4602 ;;		_fround
  4603 ;;		_scale
  4604 ;;		_sprintf
  4605 ;; This function uses a non-reentrant model
  4606 ;;
  4607                           
  4608                           
  4609                           ;psect for function ___wmul
  4610  16CA                     ___wmul:	
  4611                           
  4612                           ;incstack = 0
  4613                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4614  16CA  01FC               	clrf	___wmul@product
  4615  16CB  01FD               	clrf	___wmul@product+1
  4616  16CC                     l1777:	
  4617  16CC  0020               	movlb	0	; select bank0
  4618  16CD  1C24               	btfss	___wmul@multiplier,0
  4619  16CE  2ED3               	goto	l336
  4620  16CF  0826               	movf	___wmul@multiplicand,w
  4621  16D0  07FC               	addwf	___wmul@product,f
  4622  16D1  0827               	movf	___wmul@multiplicand+1,w
  4623  16D2  3DFD               	addwfc	___wmul@product+1,f
  4624  16D3                     l336:	
  4625  16D3  3001               	movlw	1
  4626  16D4                     u1975:	
  4627  16D4  35A6               	lslf	___wmul@multiplicand,f
  4628  16D5  0DA7               	rlf	___wmul@multiplicand+1,f
  4629  16D6  0B89               	decfsz	9,f
  4630  16D7  2ED4               	goto	u1975
  4631  16D8  3001               	movlw	1
  4632  16D9                     u1985:	
  4633  16D9  36A5               	lsrf	___wmul@multiplier+1,f
  4634  16DA  0CA4               	rrf	___wmul@multiplier,f
  4635  16DB  0B89               	decfsz	9,f
  4636  16DC  2ED9               	goto	u1985
  4637  16DD  0824               	movf	___wmul@multiplier,w
  4638  16DE  0425               	iorwf	___wmul@multiplier+1,w
  4639  16DF  1D03               	btfss	3,2
  4640  16E0  2ECC               	goto	l1777
  4641  16E1  087D               	movf	___wmul@product+1,w
  4642  16E2  00A5               	movwf	?___wmul+1
  4643  16E3  087C               	movf	___wmul@product,w
  4644  16E4  00A4               	movwf	?___wmul
  4645  16E5  0008               	return
  4646  16E6                     __end_of___wmul:	
  4647                           
  4648                           	psect	text6
  4649  0B08                     __ptext6:	
  4650 ;; *************** function ___ftmul *****************
  4651 ;; Defined at:
  4652 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  4653 ;; Parameters:    Size  Location     Type
  4654 ;;  f1              3    8[BANK0 ] float 
  4655 ;;  f2              3   11[BANK0 ] float 
  4656 ;; Auto vars:     Size  Location     Type
  4657 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  4658 ;;  sign            1   23[BANK0 ] unsigned char 
  4659 ;;  cntr            1   22[BANK0 ] unsigned char 
  4660 ;;  exp             1   18[BANK0 ] unsigned char 
  4661 ;; Return value:  Size  Location     Type
  4662 ;;                  3    8[BANK0 ] float 
  4663 ;; Registers used:
  4664 ;;		wreg, status,2, status,0, pclath, cstack
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4670 ;;      Params:         0       6       0       0       0       0       0       0
  4671 ;;      Locals:         0       6       0       0       0       0       0       0
  4672 ;;      Temps:          0       4       0       0       0       0       0       0
  4673 ;;      Totals:         0      16       0       0       0       0       0       0
  4674 ;;Total ram usage:       16 bytes
  4675 ;; Hardware stack levels used:    1
  4676 ;; Hardware stack levels required when called:    1
  4677 ;; This function calls:
  4678 ;;		___ftpack
  4679 ;; This function is called by:
  4680 ;;		_main
  4681 ;;		_fround
  4682 ;;		_scale
  4683 ;;		_sprintf
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           
  4688                           ;psect for function ___ftmul
  4689  0B08                     ___ftmul:	
  4690                           
  4691                           ;incstack = 0
  4692                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4693  0B08  0020               	movlb	0	; select bank0
  4694  0B09  0828               	movf	___ftmul@f1,w
  4695  0B0A  00AE               	movwf	??___ftmul
  4696  0B0B  0829               	movf	___ftmul@f1+1,w
  4697  0B0C  00AF               	movwf	??___ftmul+1
  4698  0B0D  082A               	movf	___ftmul@f1+2,w
  4699  0B0E  00B0               	movwf	??___ftmul+2
  4700  0B0F  1003               	clrc
  4701  0B10  0D2F               	rlf	??___ftmul+1,w
  4702  0B11  0D30               	rlf	??___ftmul+2,w
  4703  0B12  00B1               	movwf	??___ftmul+3
  4704  0B13  0831               	movf	??___ftmul+3,w
  4705  0B14  00B2               	movwf	___ftmul@exp
  4706  0B15  0832               	movf	___ftmul@exp,w
  4707  0B16  1D03               	btfss	3,2
  4708  0B17  2B1F               	goto	l1947
  4709  0B18  3000               	movlw	0
  4710  0B19  00A8               	movwf	?___ftmul
  4711  0B1A  3000               	movlw	0
  4712  0B1B  00A9               	movwf	?___ftmul+1
  4713  0B1C  3000               	movlw	0
  4714  0B1D  00AA               	movwf	?___ftmul+2
  4715  0B1E  0008               	return
  4716  0B1F                     l1947:	
  4717  0B1F  082B               	movf	___ftmul@f2,w
  4718  0B20  00AE               	movwf	??___ftmul
  4719  0B21  082C               	movf	___ftmul@f2+1,w
  4720  0B22  00AF               	movwf	??___ftmul+1
  4721  0B23  082D               	movf	___ftmul@f2+2,w
  4722  0B24  00B0               	movwf	??___ftmul+2
  4723  0B25  1003               	clrc
  4724  0B26  0D2F               	rlf	??___ftmul+1,w
  4725  0B27  0D30               	rlf	??___ftmul+2,w
  4726  0B28  00B1               	movwf	??___ftmul+3
  4727  0B29  0831               	movf	??___ftmul+3,w
  4728  0B2A  00B7               	movwf	___ftmul@sign
  4729  0B2B  0837               	movf	___ftmul@sign,w
  4730  0B2C  1D03               	btfss	3,2
  4731  0B2D  2B35               	goto	l1953
  4732  0B2E  3000               	movlw	0
  4733  0B2F  00A8               	movwf	?___ftmul
  4734  0B30  3000               	movlw	0
  4735  0B31  00A9               	movwf	?___ftmul+1
  4736  0B32  3000               	movlw	0
  4737  0B33  00AA               	movwf	?___ftmul+2
  4738  0B34  0008               	return
  4739  0B35                     l1953:	
  4740  0B35  0837               	movf	___ftmul@sign,w
  4741  0B36  3E7B               	addlw	123
  4742  0B37  00AE               	movwf	??___ftmul
  4743  0B38  082E               	movf	??___ftmul,w
  4744  0B39  07B2               	addwf	___ftmul@exp,f
  4745  0B3A  0828               	movf	___ftmul@f1,w
  4746  0B3B  00AE               	movwf	??___ftmul
  4747  0B3C  0829               	movf	___ftmul@f1+1,w
  4748  0B3D  00AF               	movwf	??___ftmul+1
  4749  0B3E  082A               	movf	___ftmul@f1+2,w
  4750  0B3F  00B0               	movwf	??___ftmul+2
  4751  0B40  3010               	movlw	16
  4752  0B41                     u2445:	
  4753  0B41  36B0               	lsrf	??___ftmul+2,f
  4754  0B42  0CAF               	rrf	??___ftmul+1,f
  4755  0B43  0CAE               	rrf	??___ftmul,f
  4756  0B44  0B89               	decfsz	9,f
  4757  0B45  2B41               	goto	u2445
  4758  0B46  082E               	movf	??___ftmul,w
  4759  0B47  00B1               	movwf	??___ftmul+3
  4760  0B48  0831               	movf	??___ftmul+3,w
  4761  0B49  00B7               	movwf	___ftmul@sign
  4762  0B4A  082B               	movf	___ftmul@f2,w
  4763  0B4B  00AE               	movwf	??___ftmul
  4764  0B4C  082C               	movf	___ftmul@f2+1,w
  4765  0B4D  00AF               	movwf	??___ftmul+1
  4766  0B4E  082D               	movf	___ftmul@f2+2,w
  4767  0B4F  00B0               	movwf	??___ftmul+2
  4768  0B50  3010               	movlw	16
  4769  0B51                     u2455:	
  4770  0B51  36B0               	lsrf	??___ftmul+2,f
  4771  0B52  0CAF               	rrf	??___ftmul+1,f
  4772  0B53  0CAE               	rrf	??___ftmul,f
  4773  0B54  0B89               	decfsz	9,f
  4774  0B55  2B51               	goto	u2455
  4775  0B56  082E               	movf	??___ftmul,w
  4776  0B57  00B1               	movwf	??___ftmul+3
  4777  0B58  0831               	movf	??___ftmul+3,w
  4778  0B59  06B7               	xorwf	___ftmul@sign,f
  4779  0B5A  3080               	movlw	128
  4780  0B5B  00AE               	movwf	??___ftmul
  4781  0B5C  082E               	movf	??___ftmul,w
  4782  0B5D  05B7               	andwf	___ftmul@sign,f
  4783  0B5E  17A9               	bsf	___ftmul@f1+1,7
  4784  0B5F  17AC               	bsf	___ftmul@f2+1,7
  4785  0B60  30FF               	movlw	255
  4786  0B61  05AB               	andwf	___ftmul@f2,f
  4787  0B62  30FF               	movlw	255
  4788  0B63  05AC               	andwf	___ftmul@f2+1,f
  4789  0B64  3000               	movlw	0
  4790  0B65  05AD               	andwf	___ftmul@f2+2,f
  4791  0B66  3000               	movlw	0
  4792  0B67  00B3               	movwf	___ftmul@f3_as_product
  4793  0B68  3000               	movlw	0
  4794  0B69  00B4               	movwf	___ftmul@f3_as_product+1
  4795  0B6A  3000               	movlw	0
  4796  0B6B  00B5               	movwf	___ftmul@f3_as_product+2
  4797  0B6C  3007               	movlw	7
  4798  0B6D  00AE               	movwf	??___ftmul
  4799  0B6E  082E               	movf	??___ftmul,w
  4800  0B6F  00B6               	movwf	___ftmul@cntr
  4801  0B70                     l1965:	
  4802  0B70  1C28               	btfss	___ftmul@f1,0
  4803  0B71  2B78               	goto	l1969
  4804  0B72  082B               	movf	___ftmul@f2,w
  4805  0B73  07B3               	addwf	___ftmul@f3_as_product,f
  4806  0B74  082C               	movf	___ftmul@f2+1,w
  4807  0B75  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  4808  0B76  082D               	movf	___ftmul@f2+2,w
  4809  0B77  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  4810  0B78                     l1969:	
  4811  0B78  3001               	movlw	1
  4812  0B79                     u2475:	
  4813  0B79  36AA               	lsrf	___ftmul@f1+2,f
  4814  0B7A  0CA9               	rrf	___ftmul@f1+1,f
  4815  0B7B  0CA8               	rrf	___ftmul@f1,f
  4816  0B7C  0B89               	decfsz	9,f
  4817  0B7D  2B79               	goto	u2475
  4818  0B7E  3001               	movlw	1
  4819  0B7F                     u2485:	
  4820  0B7F  35AB               	lslf	___ftmul@f2,f
  4821  0B80  0DAC               	rlf	___ftmul@f2+1,f
  4822  0B81  0DAD               	rlf	___ftmul@f2+2,f
  4823  0B82  0B89               	decfsz	9,f
  4824  0B83  2B7F               	goto	u2485
  4825  0B84  3001               	movlw	1
  4826  0B85  02B6               	subwf	___ftmul@cntr,f
  4827  0B86  1D03               	btfss	3,2
  4828  0B87  2B70               	goto	l1965
  4829  0B88  3009               	movlw	9
  4830  0B89  00AE               	movwf	??___ftmul
  4831  0B8A  082E               	movf	??___ftmul,w
  4832  0B8B  00B6               	movwf	___ftmul@cntr
  4833  0B8C                     l1977:	
  4834  0B8C  1C28               	btfss	___ftmul@f1,0
  4835  0B8D  2B94               	goto	l1981
  4836  0B8E  082B               	movf	___ftmul@f2,w
  4837  0B8F  07B3               	addwf	___ftmul@f3_as_product,f
  4838  0B90  082C               	movf	___ftmul@f2+1,w
  4839  0B91  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  4840  0B92  082D               	movf	___ftmul@f2+2,w
  4841  0B93  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  4842  0B94                     l1981:	
  4843  0B94  3001               	movlw	1
  4844  0B95                     u2515:	
  4845  0B95  36AA               	lsrf	___ftmul@f1+2,f
  4846  0B96  0CA9               	rrf	___ftmul@f1+1,f
  4847  0B97  0CA8               	rrf	___ftmul@f1,f
  4848  0B98  0B89               	decfsz	9,f
  4849  0B99  2B95               	goto	u2515
  4850  0B9A  3001               	movlw	1
  4851  0B9B                     u2525:	
  4852  0B9B  36B5               	lsrf	___ftmul@f3_as_product+2,f
  4853  0B9C  0CB4               	rrf	___ftmul@f3_as_product+1,f
  4854  0B9D  0CB3               	rrf	___ftmul@f3_as_product,f
  4855  0B9E  0B89               	decfsz	9,f
  4856  0B9F  2B9B               	goto	u2525
  4857  0BA0  3001               	movlw	1
  4858  0BA1  02B6               	subwf	___ftmul@cntr,f
  4859  0BA2  1D03               	btfss	3,2
  4860  0BA3  2B8C               	goto	l1977
  4861  0BA4  0833               	movf	___ftmul@f3_as_product,w
  4862  0BA5  00F0               	movwf	___ftpack@arg
  4863  0BA6  0834               	movf	___ftmul@f3_as_product+1,w
  4864  0BA7  00F1               	movwf	___ftpack@arg+1
  4865  0BA8  0835               	movf	___ftmul@f3_as_product+2,w
  4866  0BA9  00F2               	movwf	___ftpack@arg+2
  4867  0BAA  0832               	movf	___ftmul@exp,w
  4868  0BAB  00AE               	movwf	??___ftmul
  4869  0BAC  082E               	movf	??___ftmul,w
  4870  0BAD  00F3               	movwf	___ftpack@exp
  4871  0BAE  0837               	movf	___ftmul@sign,w
  4872  0BAF  00AF               	movwf	??___ftmul+1
  4873  0BB0  082F               	movf	??___ftmul+1,w
  4874  0BB1  00F4               	movwf	___ftpack@sign
  4875  0BB2  3189  2175         	fcall	___ftpack
  4876  0BB4  0870               	movf	?___ftpack,w
  4877  0BB5  0020               	movlb	0	; select bank0
  4878  0BB6  00A8               	movwf	?___ftmul
  4879  0BB7  0871               	movf	?___ftpack+1,w
  4880  0BB8  00A9               	movwf	?___ftmul+1
  4881  0BB9  0872               	movf	?___ftpack+2,w
  4882  0BBA  00AA               	movwf	?___ftmul+2
  4883  0BBB  0008               	return
  4884  0BBC                     __end_of___ftmul:	
  4885                           
  4886                           	psect	text7
  4887  17BB                     __ptext7:	
  4888 ;; *************** function ___awmod *****************
  4889 ;; Defined at:
  4890 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awmod.c"
  4891 ;; Parameters:    Size  Location     Type
  4892 ;;  divisor         2    0[COMMON] int 
  4893 ;;  dividend        2    2[COMMON] int 
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;  sign            1    6[COMMON] unsigned char 
  4896 ;;  counter         1    5[COMMON] unsigned char 
  4897 ;; Return value:  Size  Location     Type
  4898 ;;                  2    0[COMMON] int 
  4899 ;; Registers used:
  4900 ;;		wreg, status,2, status,0
  4901 ;; Tracked objects:
  4902 ;;		On entry : 0/0
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4906 ;;      Params:         4       0       0       0       0       0       0       0
  4907 ;;      Locals:         2       0       0       0       0       0       0       0
  4908 ;;      Temps:          1       0       0       0       0       0       0       0
  4909 ;;      Totals:         7       0       0       0       0       0       0       0
  4910 ;;Total ram usage:        7 bytes
  4911 ;; Hardware stack levels used:    1
  4912 ;; This function calls:
  4913 ;;		Nothing
  4914 ;; This function is called by:
  4915 ;;		_fround
  4916 ;;		_scale
  4917 ;; This function uses a non-reentrant model
  4918 ;;
  4919                           
  4920                           
  4921                           ;psect for function ___awmod
  4922  17BB                     ___awmod:	
  4923                           
  4924                           ;incstack = 0
  4925                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4926  17BB  01F6               	clrf	___awmod@sign
  4927  17BC  1FF3               	btfss	___awmod@dividend+1,7
  4928  17BD  2FC5               	goto	l1841
  4929  17BE  09F2               	comf	___awmod@dividend,f
  4930  17BF  09F3               	comf	___awmod@dividend+1,f
  4931  17C0  0AF2               	incf	___awmod@dividend,f
  4932  17C1  1903               	skipnz
  4933  17C2  0AF3               	incf	___awmod@dividend+1,f
  4934  17C3  01F6               	clrf	___awmod@sign
  4935  17C4  0AF6               	incf	___awmod@sign,f
  4936  17C5                     l1841:	
  4937  17C5  1FF1               	btfss	___awmod@divisor+1,7
  4938  17C6  2FCC               	goto	l1845
  4939  17C7  09F0               	comf	___awmod@divisor,f
  4940  17C8  09F1               	comf	___awmod@divisor+1,f
  4941  17C9  0AF0               	incf	___awmod@divisor,f
  4942  17CA  1903               	skipnz
  4943  17CB  0AF1               	incf	___awmod@divisor+1,f
  4944  17CC                     l1845:	
  4945  17CC  0870               	movf	___awmod@divisor,w
  4946  17CD  0471               	iorwf	___awmod@divisor+1,w
  4947  17CE  1903               	btfsc	3,2
  4948  17CF  2FF3               	goto	l1863
  4949  17D0  01F5               	clrf	___awmod@counter
  4950  17D1  0AF5               	incf	___awmod@counter,f
  4951  17D2                     l1853:	
  4952  17D2  1BF1               	btfsc	___awmod@divisor+1,7
  4953  17D3  2FDE               	goto	l1855
  4954  17D4  3001               	movlw	1
  4955  17D5                     u2135:	
  4956  17D5  35F0               	lslf	___awmod@divisor,f
  4957  17D6  0DF1               	rlf	___awmod@divisor+1,f
  4958  17D7  0B89               	decfsz	9,f
  4959  17D8  2FD5               	goto	u2135
  4960  17D9  3001               	movlw	1
  4961  17DA  00F4               	movwf	??___awmod
  4962  17DB  0874               	movf	??___awmod,w
  4963  17DC  07F5               	addwf	___awmod@counter,f
  4964  17DD  2FD2               	goto	l1853
  4965  17DE                     l1855:	
  4966  17DE  0871               	movf	___awmod@divisor+1,w
  4967  17DF  0273               	subwf	___awmod@dividend+1,w
  4968  17E0  1D03               	skipz
  4969  17E1  2FE4               	goto	u2155
  4970  17E2  0870               	movf	___awmod@divisor,w
  4971  17E3  0272               	subwf	___awmod@dividend,w
  4972  17E4                     u2155:	
  4973  17E4  1C03               	skipc
  4974  17E5  2FEA               	goto	l1859
  4975  17E6  0870               	movf	___awmod@divisor,w
  4976  17E7  02F2               	subwf	___awmod@dividend,f
  4977  17E8  0871               	movf	___awmod@divisor+1,w
  4978  17E9  3BF3               	subwfb	___awmod@dividend+1,f
  4979  17EA                     l1859:	
  4980  17EA  3001               	movlw	1
  4981  17EB                     u2165:	
  4982  17EB  36F1               	lsrf	___awmod@divisor+1,f
  4983  17EC  0CF0               	rrf	___awmod@divisor,f
  4984  17ED  0B89               	decfsz	9,f
  4985  17EE  2FEB               	goto	u2165
  4986  17EF  3001               	movlw	1
  4987  17F0  02F5               	subwf	___awmod@counter,f
  4988  17F1  1D03               	btfss	3,2
  4989  17F2  2FDE               	goto	l1855
  4990  17F3                     l1863:	
  4991  17F3  0876               	movf	___awmod@sign,w
  4992  17F4  1903               	btfsc	3,2
  4993  17F5  2FFB               	goto	l1867
  4994  17F6  09F2               	comf	___awmod@dividend,f
  4995  17F7  09F3               	comf	___awmod@dividend+1,f
  4996  17F8  0AF2               	incf	___awmod@dividend,f
  4997  17F9  1903               	skipnz
  4998  17FA  0AF3               	incf	___awmod@dividend+1,f
  4999  17FB                     l1867:	
  5000  17FB  0873               	movf	___awmod@dividend+1,w
  5001  17FC  00F1               	movwf	?___awmod+1
  5002  17FD  0872               	movf	___awmod@dividend,w
  5003  17FE  00F0               	movwf	?___awmod
  5004  17FF  0008               	return
  5005  1800                     __end_of___awmod:	
  5006                           
  5007                           	psect	text8
  5008  08CF                     __ptext8:	
  5009 ;; *************** function ___awdiv *****************
  5010 ;; Defined at:
  5011 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  5012 ;; Parameters:    Size  Location     Type
  5013 ;;  divisor         2    7[COMMON] int 
  5014 ;;  dividend        2    9[COMMON] int 
  5015 ;; Auto vars:     Size  Location     Type
  5016 ;;  quotient        2    2[BANK0 ] int 
  5017 ;;  sign            1    1[BANK0 ] unsigned char 
  5018 ;;  counter         1    0[BANK0 ] unsigned char 
  5019 ;; Return value:  Size  Location     Type
  5020 ;;                  2    7[COMMON] int 
  5021 ;; Registers used:
  5022 ;;		wreg, status,2, status,0
  5023 ;; Tracked objects:
  5024 ;;		On entry : 0/0
  5025 ;;		On exit  : 0/0
  5026 ;;		Unchanged: 0/0
  5027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5028 ;;      Params:         4       0       0       0       0       0       0       0
  5029 ;;      Locals:         0       4       0       0       0       0       0       0
  5030 ;;      Temps:          1       0       0       0       0       0       0       0
  5031 ;;      Totals:         5       4       0       0       0       0       0       0
  5032 ;;Total ram usage:        9 bytes
  5033 ;; Hardware stack levels used:    1
  5034 ;; This function calls:
  5035 ;;		Nothing
  5036 ;; This function is called by:
  5037 ;;		_fround
  5038 ;;		_scale
  5039 ;;		_sprintf
  5040 ;; This function uses a non-reentrant model
  5041 ;;
  5042                           
  5043                           
  5044                           ;psect for function ___awdiv
  5045  08CF                     ___awdiv:	
  5046                           
  5047                           ;incstack = 0
  5048                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5049  08CF  0020               	movlb	0	; select bank0
  5050  08D0  01A1               	clrf	___awdiv@sign
  5051  08D1  1FF8               	btfss	___awdiv@divisor+1,7
  5052  08D2  28DA               	goto	l1797
  5053  08D3  09F7               	comf	___awdiv@divisor,f
  5054  08D4  09F8               	comf	___awdiv@divisor+1,f
  5055  08D5  0AF7               	incf	___awdiv@divisor,f
  5056  08D6  1903               	skipnz
  5057  08D7  0AF8               	incf	___awdiv@divisor+1,f
  5058  08D8  01A1               	clrf	___awdiv@sign
  5059  08D9  0AA1               	incf	___awdiv@sign,f
  5060  08DA                     l1797:	
  5061  08DA  1FFA               	btfss	___awdiv@dividend+1,7
  5062  08DB  28E5               	goto	l1803
  5063  08DC  09F9               	comf	___awdiv@dividend,f
  5064  08DD  09FA               	comf	___awdiv@dividend+1,f
  5065  08DE  0AF9               	incf	___awdiv@dividend,f
  5066  08DF  1903               	skipnz
  5067  08E0  0AFA               	incf	___awdiv@dividend+1,f
  5068  08E1  3001               	movlw	1
  5069  08E2  00FB               	movwf	??___awdiv
  5070  08E3  087B               	movf	??___awdiv,w
  5071  08E4  06A1               	xorwf	___awdiv@sign,f
  5072  08E5                     l1803:	
  5073  08E5  01A2               	clrf	___awdiv@quotient
  5074  08E6  01A3               	clrf	___awdiv@quotient+1
  5075  08E7  0877               	movf	___awdiv@divisor,w
  5076  08E8  0478               	iorwf	___awdiv@divisor+1,w
  5077  08E9  1903               	btfsc	3,2
  5078  08EA  2914               	goto	l1825
  5079  08EB  01A0               	clrf	___awdiv@counter
  5080  08EC  0AA0               	incf	___awdiv@counter,f
  5081  08ED                     l1813:	
  5082  08ED  1BF8               	btfsc	___awdiv@divisor+1,7
  5083  08EE  28F9               	goto	l1815
  5084  08EF  3001               	movlw	1
  5085  08F0                     u2035:	
  5086  08F0  35F7               	lslf	___awdiv@divisor,f
  5087  08F1  0DF8               	rlf	___awdiv@divisor+1,f
  5088  08F2  0B89               	decfsz	9,f
  5089  08F3  28F0               	goto	u2035
  5090  08F4  3001               	movlw	1
  5091  08F5  00FB               	movwf	??___awdiv
  5092  08F6  087B               	movf	??___awdiv,w
  5093  08F7  07A0               	addwf	___awdiv@counter,f
  5094  08F8  28ED               	goto	l1813
  5095  08F9                     l1815:	
  5096  08F9  3001               	movlw	1
  5097  08FA                     u2055:	
  5098  08FA  35A2               	lslf	___awdiv@quotient,f
  5099  08FB  0DA3               	rlf	___awdiv@quotient+1,f
  5100  08FC  0B89               	decfsz	9,f
  5101  08FD  28FA               	goto	u2055
  5102  08FE  0878               	movf	___awdiv@divisor+1,w
  5103  08FF  027A               	subwf	___awdiv@dividend+1,w
  5104  0900  1D03               	skipz
  5105  0901  2904               	goto	u2065
  5106  0902  0877               	movf	___awdiv@divisor,w
  5107  0903  0279               	subwf	___awdiv@dividend,w
  5108  0904                     u2065:	
  5109  0904  1C03               	skipc
  5110  0905  290B               	goto	l1821
  5111  0906  0877               	movf	___awdiv@divisor,w
  5112  0907  02F9               	subwf	___awdiv@dividend,f
  5113  0908  0878               	movf	___awdiv@divisor+1,w
  5114  0909  3BFA               	subwfb	___awdiv@dividend+1,f
  5115  090A  1422               	bsf	___awdiv@quotient,0
  5116  090B                     l1821:	
  5117  090B  3001               	movlw	1
  5118  090C                     u2075:	
  5119  090C  36F8               	lsrf	___awdiv@divisor+1,f
  5120  090D  0CF7               	rrf	___awdiv@divisor,f
  5121  090E  0B89               	decfsz	9,f
  5122  090F  290C               	goto	u2075
  5123  0910  3001               	movlw	1
  5124  0911  02A0               	subwf	___awdiv@counter,f
  5125  0912  1D03               	btfss	3,2
  5126  0913  28F9               	goto	l1815
  5127  0914                     l1825:	
  5128  0914  0821               	movf	___awdiv@sign,w
  5129  0915  1903               	btfsc	3,2
  5130  0916  291C               	goto	l1829
  5131  0917  09A2               	comf	___awdiv@quotient,f
  5132  0918  09A3               	comf	___awdiv@quotient+1,f
  5133  0919  0AA2               	incf	___awdiv@quotient,f
  5134  091A  1903               	skipnz
  5135  091B  0AA3               	incf	___awdiv@quotient+1,f
  5136  091C                     l1829:	
  5137  091C  0823               	movf	___awdiv@quotient+1,w
  5138  091D  00F8               	movwf	?___awdiv+1
  5139  091E  0822               	movf	___awdiv@quotient,w
  5140  091F  00F7               	movwf	?___awdiv
  5141  0920  0008               	return
  5142  0921                     __end_of___awdiv:	
  5143                           
  5144                           	psect	text9
  5145  0009                     __ptext9:	
  5146 ;; *************** function __tdiv_to_l_ *****************
  5147 ;; Defined at:
  5148 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdivl.c"
  5149 ;; Parameters:    Size  Location     Type
  5150 ;;  f1              3    0[COMMON] float 
  5151 ;;  f2              3    3[COMMON] float 
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;  quot            4    0[BANK0 ] unsigned long 
  5154 ;;  exp1            1    5[BANK0 ] unsigned char 
  5155 ;;  cntr            1    4[BANK0 ] unsigned char 
  5156 ;; Return value:  Size  Location     Type
  5157 ;;                  4    0[COMMON] unsigned long 
  5158 ;; Registers used:
  5159 ;;		wreg, status,2, status,0
  5160 ;; Tracked objects:
  5161 ;;		On entry : 0/0
  5162 ;;		On exit  : 0/0
  5163 ;;		Unchanged: 0/0
  5164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5165 ;;      Params:         6       0       0       0       0       0       0       0
  5166 ;;      Locals:         0       6       0       0       0       0       0       0
  5167 ;;      Temps:          4       0       0       0       0       0       0       0
  5168 ;;      Totals:        10       6       0       0       0       0       0       0
  5169 ;;Total ram usage:       16 bytes
  5170 ;; Hardware stack levels used:    1
  5171 ;; This function calls:
  5172 ;;		Nothing
  5173 ;; This function is called by:
  5174 ;;		_sprintf
  5175 ;; This function uses a non-reentrant model
  5176 ;;
  5177                           
  5178                           
  5179                           ;psect for function __tdiv_to_l_
  5180  0009                     __tdiv_to_l_:	
  5181                           
  5182                           ;incstack = 0
  5183                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  5184  0009  0870               	movf	__tdiv_to_l_@f1,w
  5185  000A  00F6               	movwf	??__tdiv_to_l_
  5186  000B  0871               	movf	__tdiv_to_l_@f1+1,w
  5187  000C  00F7               	movwf	??__tdiv_to_l_+1
  5188  000D  0872               	movf	__tdiv_to_l_@f1+2,w
  5189  000E  00F8               	movwf	??__tdiv_to_l_+2
  5190  000F  1003               	clrc
  5191  0010  0D77               	rlf	??__tdiv_to_l_+1,w
  5192  0011  0D78               	rlf	??__tdiv_to_l_+2,w
  5193  0012  00F9               	movwf	??__tdiv_to_l_+3
  5194  0013  0879               	movf	??__tdiv_to_l_+3,w
  5195  0014  0020               	movlb	0	; select bank0
  5196  0015  00A5               	movwf	__tdiv_to_l_@exp1
  5197  0016  0825               	movf	__tdiv_to_l_@exp1,w
  5198  0017  1D03               	btfss	3,2
  5199  0018  2822               	goto	l2109
  5200  0019  3000               	movlw	0
  5201  001A  00F3               	movwf	?__tdiv_to_l_+3
  5202  001B  3000               	movlw	0
  5203  001C  00F2               	movwf	?__tdiv_to_l_+2
  5204  001D  3000               	movlw	0
  5205  001E  00F1               	movwf	?__tdiv_to_l_+1
  5206  001F  3000               	movlw	0
  5207  0020  00F0               	movwf	?__tdiv_to_l_
  5208  0021  0008               	return
  5209  0022                     l2109:	
  5210  0022  0873               	movf	__tdiv_to_l_@f2,w
  5211  0023  00F6               	movwf	??__tdiv_to_l_
  5212  0024  0874               	movf	__tdiv_to_l_@f2+1,w
  5213  0025  00F7               	movwf	??__tdiv_to_l_+1
  5214  0026  0875               	movf	__tdiv_to_l_@f2+2,w
  5215  0027  00F8               	movwf	??__tdiv_to_l_+2
  5216  0028  1003               	clrc
  5217  0029  0D77               	rlf	??__tdiv_to_l_+1,w
  5218  002A  0D78               	rlf	??__tdiv_to_l_+2,w
  5219  002B  00F9               	movwf	??__tdiv_to_l_+3
  5220  002C  0879               	movf	??__tdiv_to_l_+3,w
  5221  002D  00A4               	movwf	__tdiv_to_l_@cntr
  5222  002E  0824               	movf	__tdiv_to_l_@cntr,w
  5223  002F  1D03               	btfss	3,2
  5224  0030  283A               	goto	l571
  5225  0031  3000               	movlw	0
  5226  0032  00F3               	movwf	?__tdiv_to_l_+3
  5227  0033  3000               	movlw	0
  5228  0034  00F2               	movwf	?__tdiv_to_l_+2
  5229  0035  3000               	movlw	0
  5230  0036  00F1               	movwf	?__tdiv_to_l_+1
  5231  0037  3000               	movlw	0
  5232  0038  00F0               	movwf	?__tdiv_to_l_
  5233  0039  0008               	return
  5234  003A                     l571:	
  5235  003A  17F1               	bsf	__tdiv_to_l_@f1+1,7
  5236  003B  30FF               	movlw	255
  5237  003C  05F0               	andwf	__tdiv_to_l_@f1,f
  5238  003D  30FF               	movlw	255
  5239  003E  05F1               	andwf	__tdiv_to_l_@f1+1,f
  5240  003F  3000               	movlw	0
  5241  0040  05F2               	andwf	__tdiv_to_l_@f1+2,f
  5242  0041  17F4               	bsf	__tdiv_to_l_@f2+1,7
  5243  0042  30FF               	movlw	255
  5244  0043  05F3               	andwf	__tdiv_to_l_@f2,f
  5245  0044  30FF               	movlw	255
  5246  0045  05F4               	andwf	__tdiv_to_l_@f2+1,f
  5247  0046  3000               	movlw	0
  5248  0047  05F5               	andwf	__tdiv_to_l_@f2+2,f
  5249  0048  3000               	movlw	0
  5250  0049  00A3               	movwf	__tdiv_to_l_@quot+3
  5251  004A  3000               	movlw	0
  5252  004B  00A2               	movwf	__tdiv_to_l_@quot+2
  5253  004C  3000               	movlw	0
  5254  004D  00A1               	movwf	__tdiv_to_l_@quot+1
  5255  004E  3000               	movlw	0
  5256  004F  00A0               	movwf	__tdiv_to_l_@quot
  5257  0050  307F               	movlw	127
  5258  0051  02A5               	subwf	__tdiv_to_l_@exp1,f
  5259  0052  3098               	movlw	152
  5260  0053  0724               	addwf	__tdiv_to_l_@cntr,w
  5261  0054  00F6               	movwf	??__tdiv_to_l_
  5262  0055  0876               	movf	??__tdiv_to_l_,w
  5263  0056  02A5               	subwf	__tdiv_to_l_@exp1,f
  5264  0057  3018               	movlw	24
  5265  0058  00F6               	movwf	??__tdiv_to_l_
  5266  0059  0876               	movf	??__tdiv_to_l_,w
  5267  005A  00A4               	movwf	__tdiv_to_l_@cntr
  5268  005B                     l2123:	
  5269  005B  3001               	movlw	1
  5270  005C                     u2665:	
  5271  005C  35A0               	lslf	__tdiv_to_l_@quot,f
  5272  005D  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  5273  005E  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  5274  005F  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  5275  0060  0B89               	decfsz	9,f
  5276  0061  285C               	goto	u2665
  5277  0062  0875               	movf	__tdiv_to_l_@f2+2,w
  5278  0063  0272               	subwf	__tdiv_to_l_@f1+2,w
  5279  0064  1D03               	skipz
  5280  0065  286C               	goto	u2675
  5281  0066  0874               	movf	__tdiv_to_l_@f2+1,w
  5282  0067  0271               	subwf	__tdiv_to_l_@f1+1,w
  5283  0068  1D03               	skipz
  5284  0069  286C               	goto	u2675
  5285  006A  0873               	movf	__tdiv_to_l_@f2,w
  5286  006B  0270               	subwf	__tdiv_to_l_@f1,w
  5287  006C                     u2675:	
  5288  006C  1C03               	skipc
  5289  006D  2875               	goto	l2131
  5290  006E  0873               	movf	__tdiv_to_l_@f2,w
  5291  006F  02F0               	subwf	__tdiv_to_l_@f1,f
  5292  0070  0874               	movf	__tdiv_to_l_@f2+1,w
  5293  0071  3BF1               	subwfb	__tdiv_to_l_@f1+1,f
  5294  0072  0875               	movf	__tdiv_to_l_@f2+2,w
  5295  0073  3BF2               	subwfb	__tdiv_to_l_@f1+2,f
  5296  0074  1420               	bsf	__tdiv_to_l_@quot,0
  5297  0075                     l2131:	
  5298  0075  3001               	movlw	1
  5299  0076                     u2685:	
  5300  0076  35F0               	lslf	__tdiv_to_l_@f1,f
  5301  0077  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  5302  0078  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  5303  0079  0B89               	decfsz	9,f
  5304  007A  2876               	goto	u2685
  5305  007B  3001               	movlw	1
  5306  007C  02A4               	subwf	__tdiv_to_l_@cntr,f
  5307  007D  1D03               	btfss	3,2
  5308  007E  285B               	goto	l2123
  5309  007F  1FA5               	btfss	__tdiv_to_l_@exp1,7
  5310  0080  289D               	goto	l2143
  5311  0081  0825               	movf	__tdiv_to_l_@exp1,w
  5312  0082  3A80               	xorlw	128
  5313  0083  3E97               	addlw	151
  5314  0084  1803               	skipnc
  5315  0085  288F               	goto	l2141
  5316  0086  3000               	movlw	0
  5317  0087  00F3               	movwf	?__tdiv_to_l_+3
  5318  0088  3000               	movlw	0
  5319  0089  00F2               	movwf	?__tdiv_to_l_+2
  5320  008A  3000               	movlw	0
  5321  008B  00F1               	movwf	?__tdiv_to_l_+1
  5322  008C  3000               	movlw	0
  5323  008D  00F0               	movwf	?__tdiv_to_l_
  5324  008E  0008               	return
  5325  008F                     l2141:	
  5326  008F  3001               	movlw	1
  5327  0090                     u2725:	
  5328  0090  36A3               	lsrf	__tdiv_to_l_@quot+3,f
  5329  0091  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  5330  0092  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  5331  0093  0CA0               	rrf	__tdiv_to_l_@quot,f
  5332  0094  0B89               	decfsz	9,f
  5333  0095  2890               	goto	u2725
  5334  0096  3001               	movlw	1
  5335  0097  00F6               	movwf	??__tdiv_to_l_
  5336  0098  0876               	movf	??__tdiv_to_l_,w
  5337  0099  07A5               	addwf	__tdiv_to_l_@exp1,f
  5338  009A  1903               	btfsc	3,2
  5339  009B  28B6               	goto	l2151
  5340  009C  288F               	goto	l2141
  5341  009D                     l2143:	
  5342  009D  3018               	movlw	24
  5343  009E  0225               	subwf	__tdiv_to_l_@exp1,w
  5344  009F  1C03               	skipc
  5345  00A0  28B3               	goto	l581
  5346  00A1  3000               	movlw	0
  5347  00A2  00F3               	movwf	?__tdiv_to_l_+3
  5348  00A3  3000               	movlw	0
  5349  00A4  00F2               	movwf	?__tdiv_to_l_+2
  5350  00A5  3000               	movlw	0
  5351  00A6  00F1               	movwf	?__tdiv_to_l_+1
  5352  00A7  3000               	movlw	0
  5353  00A8  00F0               	movwf	?__tdiv_to_l_
  5354  00A9  0008               	return
  5355  00AA                     l2149:	
  5356  00AA  3001               	movlw	1
  5357  00AB                     u2755:	
  5358  00AB  35A0               	lslf	__tdiv_to_l_@quot,f
  5359  00AC  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  5360  00AD  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  5361  00AE  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  5362  00AF  0B89               	decfsz	9,f
  5363  00B0  28AB               	goto	u2755
  5364  00B1  3001               	movlw	1
  5365  00B2  02A5               	subwf	__tdiv_to_l_@exp1,f
  5366  00B3                     l581:	
  5367  00B3  0825               	movf	__tdiv_to_l_@exp1,w
  5368  00B4  1D03               	btfss	3,2
  5369  00B5  28AA               	goto	l2149
  5370  00B6                     l2151:	
  5371  00B6  0823               	movf	__tdiv_to_l_@quot+3,w
  5372  00B7  00F3               	movwf	?__tdiv_to_l_+3
  5373  00B8  0822               	movf	__tdiv_to_l_@quot+2,w
  5374  00B9  00F2               	movwf	?__tdiv_to_l_+2
  5375  00BA  0821               	movf	__tdiv_to_l_@quot+1,w
  5376  00BB  00F1               	movwf	?__tdiv_to_l_+1
  5377  00BC  0820               	movf	__tdiv_to_l_@quot,w
  5378  00BD  00F0               	movwf	?__tdiv_to_l_
  5379  00BE  0008               	return
  5380  00BF                     __end_of__tdiv_to_l_:	
  5381                           
  5382                           	psect	text10
  5383  0D7E                     __ptext10:	
  5384 ;; *************** function __div_to_l_ *****************
  5385 ;; Defined at:
  5386 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fldivl.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;  f1              3    0[COMMON] unsigned long 
  5389 ;;  f2              3    3[COMMON] unsigned long 
  5390 ;; Auto vars:     Size  Location     Type
  5391 ;;  quot            4    0[BANK0 ] unsigned long 
  5392 ;;  exp1            1    5[BANK0 ] unsigned char 
  5393 ;;  cntr            1    4[BANK0 ] unsigned char 
  5394 ;; Return value:  Size  Location     Type
  5395 ;;                  4    0[COMMON] unsigned long 
  5396 ;; Registers used:
  5397 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5398 ;; Tracked objects:
  5399 ;;		On entry : 0/0
  5400 ;;		On exit  : 0/0
  5401 ;;		Unchanged: 0/0
  5402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5403 ;;      Params:         6       0       0       0       0       0       0       0
  5404 ;;      Locals:         0       6       0       0       0       0       0       0
  5405 ;;      Temps:          8       0       0       0       0       0       0       0
  5406 ;;      Totals:        14       6       0       0       0       0       0       0
  5407 ;;Total ram usage:       20 bytes
  5408 ;; Hardware stack levels used:    1
  5409 ;; This function calls:
  5410 ;;		Nothing
  5411 ;; This function is called by:
  5412 ;;		_sprintf
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           
  5417                           ;psect for function __div_to_l_
  5418  0D7E                     __div_to_l_:	
  5419                           
  5420                           ;incstack = 0
  5421                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  5422  0D7E  3070               	movlw	low (__div_to_l_@f1| 0)
  5423  0D7F  0086               	movwf	6
  5424  0D80  0187               	clrf	7
  5425  0D81  3F40               	moviw [0]fsr1
  5426  0D82  00F6               	movwf	??__div_to_l_
  5427  0D83  3F41               	moviw [1]fsr1
  5428  0D84  00F7               	movwf	??__div_to_l_+1
  5429  0D85  3F42               	moviw [2]fsr1
  5430  0D86  00F8               	movwf	??__div_to_l_+2
  5431  0D87  3F43               	moviw [3]fsr1
  5432  0D88  00F9               	movwf	??__div_to_l_+3
  5433  0D89  1003               	clrc
  5434  0D8A  0D78               	rlf	??__div_to_l_+2,w
  5435  0D8B  0D79               	rlf	??__div_to_l_+3,w
  5436  0D8C  00FA               	movwf	??__div_to_l_+4
  5437  0D8D  087A               	movf	??__div_to_l_+4,w
  5438  0D8E  0020               	movlb	0	; select bank0
  5439  0D8F  00A5               	movwf	__div_to_l_@exp1
  5440  0D90  0825               	movf	__div_to_l_@exp1,w
  5441  0D91  1D03               	btfss	3,2
  5442  0D92  2D9C               	goto	l2161
  5443  0D93  3000               	movlw	0
  5444  0D94  00F3               	movwf	?__div_to_l_+3
  5445  0D95  3000               	movlw	0
  5446  0D96  00F2               	movwf	?__div_to_l_+2
  5447  0D97  3000               	movlw	0
  5448  0D98  00F1               	movwf	?__div_to_l_+1
  5449  0D99  3000               	movlw	0
  5450  0D9A  00F0               	movwf	?__div_to_l_
  5451  0D9B  0008               	return
  5452  0D9C                     l2161:	
  5453  0D9C  3073               	movlw	low (__div_to_l_@f2| 0)
  5454  0D9D  0086               	movwf	6
  5455  0D9E  0187               	clrf	7
  5456  0D9F  3F40               	moviw [0]fsr1
  5457  0DA0  00F6               	movwf	??__div_to_l_
  5458  0DA1  3F41               	moviw [1]fsr1
  5459  0DA2  00F7               	movwf	??__div_to_l_+1
  5460  0DA3  3F42               	moviw [2]fsr1
  5461  0DA4  00F8               	movwf	??__div_to_l_+2
  5462  0DA5  3F43               	moviw [3]fsr1
  5463  0DA6  00F9               	movwf	??__div_to_l_+3
  5464  0DA7  1003               	clrc
  5465  0DA8  0D78               	rlf	??__div_to_l_+2,w
  5466  0DA9  0D79               	rlf	??__div_to_l_+3,w
  5467  0DAA  00FA               	movwf	??__div_to_l_+4
  5468  0DAB  087A               	movf	??__div_to_l_+4,w
  5469  0DAC  00A4               	movwf	__div_to_l_@cntr
  5470  0DAD  0824               	movf	__div_to_l_@cntr,w
  5471  0DAE  1D03               	btfss	3,2
  5472  0DAF  2DB9               	goto	l2167
  5473  0DB0  3000               	movlw	0
  5474  0DB1  00F3               	movwf	?__div_to_l_+3
  5475  0DB2  3000               	movlw	0
  5476  0DB3  00F2               	movwf	?__div_to_l_+2
  5477  0DB4  3000               	movlw	0
  5478  0DB5  00F1               	movwf	?__div_to_l_+1
  5479  0DB6  3000               	movlw	0
  5480  0DB7  00F0               	movwf	?__div_to_l_
  5481  0DB8  0008               	return
  5482  0DB9                     l2167:	
  5483  0DB9  3070               	movlw	low (__div_to_l_@f1| 0)
  5484  0DBA  0086               	movwf	6
  5485  0DBB  0187               	clrf	7
  5486  0DBC  3000               	movlw	0
  5487  0DBD  0481               	iorwf	1,f
  5488  0DBE  3141               	addfsr 1,1
  5489  0DBF  3000               	movlw	0
  5490  0DC0  0481               	iorwf	1,f
  5491  0DC1  3141               	addfsr 1,1
  5492  0DC2  3080               	movlw	128
  5493  0DC3  0481               	iorwf	1,f
  5494  0DC4  3141               	addfsr 1,1
  5495  0DC5  3000               	movlw	0
  5496  0DC6  0481               	iorwf	1,f
  5497  0DC7  3070               	movlw	low (__div_to_l_@f1| 0)
  5498  0DC8  0086               	movwf	6
  5499  0DC9  0187               	clrf	7
  5500  0DCA  30FF               	movlw	255
  5501  0DCB  0581               	andwf	1,f
  5502  0DCC  3141               	addfsr 1,1
  5503  0DCD  30FF               	movlw	255
  5504  0DCE  0581               	andwf	1,f
  5505  0DCF  3141               	addfsr 1,1
  5506  0DD0  30FF               	movlw	255
  5507  0DD1  0581               	andwf	1,f
  5508  0DD2  3141               	addfsr 1,1
  5509  0DD3  3000               	movlw	0
  5510  0DD4  0581               	andwf	1,f
  5511  0DD5  3073               	movlw	low (__div_to_l_@f2| 0)
  5512  0DD6  0086               	movwf	6
  5513  0DD7  0187               	clrf	7
  5514  0DD8  3000               	movlw	0
  5515  0DD9  0481               	iorwf	1,f
  5516  0DDA  3141               	addfsr 1,1
  5517  0DDB  3000               	movlw	0
  5518  0DDC  0481               	iorwf	1,f
  5519  0DDD  3141               	addfsr 1,1
  5520  0DDE  3080               	movlw	128
  5521  0DDF  0481               	iorwf	1,f
  5522  0DE0  3141               	addfsr 1,1
  5523  0DE1  3000               	movlw	0
  5524  0DE2  0481               	iorwf	1,f
  5525  0DE3  3073               	movlw	low (__div_to_l_@f2| 0)
  5526  0DE4  0086               	movwf	6
  5527  0DE5  0187               	clrf	7
  5528  0DE6  30FF               	movlw	255
  5529  0DE7  0581               	andwf	1,f
  5530  0DE8  3141               	addfsr 1,1
  5531  0DE9  30FF               	movlw	255
  5532  0DEA  0581               	andwf	1,f
  5533  0DEB  3141               	addfsr 1,1
  5534  0DEC  30FF               	movlw	255
  5535  0DED  0581               	andwf	1,f
  5536  0DEE  3141               	addfsr 1,1
  5537  0DEF  3000               	movlw	0
  5538  0DF0  0581               	andwf	1,f
  5539  0DF1  3000               	movlw	0
  5540  0DF2  00A3               	movwf	__div_to_l_@quot+3
  5541  0DF3  3000               	movlw	0
  5542  0DF4  00A2               	movwf	__div_to_l_@quot+2
  5543  0DF5  3000               	movlw	0
  5544  0DF6  00A1               	movwf	__div_to_l_@quot+1
  5545  0DF7  3000               	movlw	0
  5546  0DF8  00A0               	movwf	__div_to_l_@quot
  5547  0DF9  307F               	movlw	127
  5548  0DFA  02A5               	subwf	__div_to_l_@exp1,f
  5549  0DFB  30A0               	movlw	160
  5550  0DFC  0724               	addwf	__div_to_l_@cntr,w
  5551  0DFD  00F6               	movwf	??__div_to_l_
  5552  0DFE  0876               	movf	??__div_to_l_,w
  5553  0DFF  02A5               	subwf	__div_to_l_@exp1,f
  5554  0E00  3020               	movlw	32
  5555  0E01  00F6               	movwf	??__div_to_l_
  5556  0E02  0876               	movf	??__div_to_l_,w
  5557  0E03  00A4               	movwf	__div_to_l_@cntr
  5558  0E04                     l2177:	
  5559  0E04  3001               	movlw	1
  5560  0E05                     u2795:	
  5561  0E05  35A0               	lslf	__div_to_l_@quot,f
  5562  0E06  0DA1               	rlf	__div_to_l_@quot+1,f
  5563  0E07  0DA2               	rlf	__div_to_l_@quot+2,f
  5564  0E08  0DA3               	rlf	__div_to_l_@quot+3,f
  5565  0E09  0B89               	decfsz	9,f
  5566  0E0A  2E05               	goto	u2795
  5567  0E0B  3073               	movlw	low (__div_to_l_@f2| 0)
  5568  0E0C  0086               	movwf	6
  5569  0E0D  0187               	clrf	7
  5570  0E0E  3F40               	moviw [0]fsr1
  5571  0E0F  00F6               	movwf	??__div_to_l_
  5572  0E10  3F41               	moviw [1]fsr1
  5573  0E11  00F7               	movwf	??__div_to_l_+1
  5574  0E12  3F42               	moviw [2]fsr1
  5575  0E13  00F8               	movwf	??__div_to_l_+2
  5576  0E14  3F43               	moviw [3]fsr1
  5577  0E15  00F9               	movwf	??__div_to_l_+3
  5578  0E16  3070               	movlw	low (__div_to_l_@f1| 0)
  5579  0E17  0086               	movwf	6
  5580  0E18  0187               	clrf	7
  5581  0E19  3F40               	moviw [0]fsr1
  5582  0E1A  00FA               	movwf	??__div_to_l_+4
  5583  0E1B  3F41               	moviw [1]fsr1
  5584  0E1C  00FB               	movwf	??__div_to_l_+5
  5585  0E1D  3F42               	moviw [2]fsr1
  5586  0E1E  00FC               	movwf	??__div_to_l_+6
  5587  0E1F  3F43               	moviw [3]fsr1
  5588  0E20  00FD               	movwf	??__div_to_l_+7
  5589  0E21  0879               	movf	??__div_to_l_+3,w
  5590  0E22  027D               	subwf	??__div_to_l_+7,w
  5591  0E23  1D03               	skipz
  5592  0E24  2E2F               	goto	u2805
  5593  0E25  0878               	movf	??__div_to_l_+2,w
  5594  0E26  027C               	subwf	??__div_to_l_+6,w
  5595  0E27  1D03               	skipz
  5596  0E28  2E2F               	goto	u2805
  5597  0E29  0877               	movf	??__div_to_l_+1,w
  5598  0E2A  027B               	subwf	??__div_to_l_+5,w
  5599  0E2B  1D03               	skipz
  5600  0E2C  2E2F               	goto	u2805
  5601  0E2D  0876               	movf	??__div_to_l_,w
  5602  0E2E  027A               	subwf	??__div_to_l_+4,w
  5603  0E2F                     u2805:	
  5604  0E2F  1C03               	skipc
  5605  0E30  2E4C               	goto	l2185
  5606  0E31  3073               	movlw	low (__div_to_l_@f2| 0)
  5607  0E32  0086               	movwf	6
  5608  0E33  0187               	clrf	7
  5609  0E34  3F40               	moviw [0]fsr1
  5610  0E35  00F6               	movwf	??__div_to_l_
  5611  0E36  3F41               	moviw [1]fsr1
  5612  0E37  00F7               	movwf	??__div_to_l_+1
  5613  0E38  3F42               	moviw [2]fsr1
  5614  0E39  00F8               	movwf	??__div_to_l_+2
  5615  0E3A  3F43               	moviw [3]fsr1
  5616  0E3B  00F9               	movwf	??__div_to_l_+3
  5617  0E3C  3070               	movlw	low (__div_to_l_@f1| 0)
  5618  0E3D  0086               	movwf	6
  5619  0E3E  0187               	clrf	7
  5620  0E3F  0876               	movf	??__div_to_l_,w
  5621  0E40  0281               	subwf	1,f
  5622  0E41  3141               	addfsr 1,1
  5623  0E42  0877               	movf	??__div_to_l_+1,w
  5624  0E43  3B81               	subwfb	1,f
  5625  0E44  3141               	addfsr 1,1
  5626  0E45  0878               	movf	??__div_to_l_+2,w
  5627  0E46  3B81               	subwfb	1,f
  5628  0E47  3141               	addfsr 1,1
  5629  0E48  0879               	movf	??__div_to_l_+3,w
  5630  0E49  3B81               	subwfb	1,f
  5631  0E4A  317D               	addfsr 1,-3
  5632  0E4B  1420               	bsf	__div_to_l_@quot,0
  5633  0E4C                     l2185:	
  5634  0E4C  3070               	movlw	low (__div_to_l_@f1| 0)
  5635  0E4D  0086               	movwf	6
  5636  0E4E  0187               	clrf	7
  5637  0E4F  3581               	lslf	1,f
  5638  0E50  3141               	addfsr 1,1
  5639  0E51  0D81               	rlf	1,f
  5640  0E52  3141               	addfsr 1,1
  5641  0E53  0D81               	rlf	1,f
  5642  0E54  3141               	addfsr 1,1
  5643  0E55  0D81               	rlf	1,f
  5644  0E56  317D               	addfsr 1,-3
  5645  0E57  3001               	movlw	1
  5646  0E58  02A4               	subwf	__div_to_l_@cntr,f
  5647  0E59  1D03               	btfss	3,2
  5648  0E5A  2E04               	goto	l2177
  5649  0E5B  1FA5               	btfss	__div_to_l_@exp1,7
  5650  0E5C  2E79               	goto	l2197
  5651  0E5D  0825               	movf	__div_to_l_@exp1,w
  5652  0E5E  3A80               	xorlw	128
  5653  0E5F  3E9F               	addlw	159
  5654  0E60  1803               	skipnc
  5655  0E61  2E6B               	goto	l2195
  5656  0E62  3000               	movlw	0
  5657  0E63  00F3               	movwf	?__div_to_l_+3
  5658  0E64  3000               	movlw	0
  5659  0E65  00F2               	movwf	?__div_to_l_+2
  5660  0E66  3000               	movlw	0
  5661  0E67  00F1               	movwf	?__div_to_l_+1
  5662  0E68  3000               	movlw	0
  5663  0E69  00F0               	movwf	?__div_to_l_
  5664  0E6A  0008               	return
  5665  0E6B                     l2195:	
  5666  0E6B  3001               	movlw	1
  5667  0E6C                     u2845:	
  5668  0E6C  36A3               	lsrf	__div_to_l_@quot+3,f
  5669  0E6D  0CA2               	rrf	__div_to_l_@quot+2,f
  5670  0E6E  0CA1               	rrf	__div_to_l_@quot+1,f
  5671  0E6F  0CA0               	rrf	__div_to_l_@quot,f
  5672  0E70  0B89               	decfsz	9,f
  5673  0E71  2E6C               	goto	u2845
  5674  0E72  3001               	movlw	1
  5675  0E73  00F6               	movwf	??__div_to_l_
  5676  0E74  0876               	movf	??__div_to_l_,w
  5677  0E75  07A5               	addwf	__div_to_l_@exp1,f
  5678  0E76  1903               	btfsc	3,2
  5679  0E77  2E92               	goto	l2205
  5680  0E78  2E6B               	goto	l2195
  5681  0E79                     l2197:	
  5682  0E79  3020               	movlw	32
  5683  0E7A  0225               	subwf	__div_to_l_@exp1,w
  5684  0E7B  1C03               	skipc
  5685  0E7C  2E8F               	goto	l502
  5686  0E7D  3000               	movlw	0
  5687  0E7E  00F3               	movwf	?__div_to_l_+3
  5688  0E7F  3000               	movlw	0
  5689  0E80  00F2               	movwf	?__div_to_l_+2
  5690  0E81  3000               	movlw	0
  5691  0E82  00F1               	movwf	?__div_to_l_+1
  5692  0E83  3000               	movlw	0
  5693  0E84  00F0               	movwf	?__div_to_l_
  5694  0E85  0008               	return
  5695  0E86                     l2203:	
  5696  0E86  3001               	movlw	1
  5697  0E87                     u2875:	
  5698  0E87  35A0               	lslf	__div_to_l_@quot,f
  5699  0E88  0DA1               	rlf	__div_to_l_@quot+1,f
  5700  0E89  0DA2               	rlf	__div_to_l_@quot+2,f
  5701  0E8A  0DA3               	rlf	__div_to_l_@quot+3,f
  5702  0E8B  0B89               	decfsz	9,f
  5703  0E8C  2E87               	goto	u2875
  5704  0E8D  3001               	movlw	1
  5705  0E8E  02A5               	subwf	__div_to_l_@exp1,f
  5706  0E8F                     l502:	
  5707  0E8F  0825               	movf	__div_to_l_@exp1,w
  5708  0E90  1D03               	btfss	3,2
  5709  0E91  2E86               	goto	l2203
  5710  0E92                     l2205:	
  5711  0E92  0823               	movf	__div_to_l_@quot+3,w
  5712  0E93  00F3               	movwf	?__div_to_l_+3
  5713  0E94  0822               	movf	__div_to_l_@quot+2,w
  5714  0E95  00F2               	movwf	?__div_to_l_+2
  5715  0E96  0821               	movf	__div_to_l_@quot+1,w
  5716  0E97  00F1               	movwf	?__div_to_l_+1
  5717  0E98  0820               	movf	__div_to_l_@quot,w
  5718  0E99  00F0               	movwf	?__div_to_l_
  5719  0E9A  0008               	return
  5720  0E9B                     __end_of__div_to_l_:	
  5721                           
  5722                           	psect	text11
  5723  080D                     __ptext11:	
  5724 ;; *************** function ___lltoft *****************
  5725 ;; Defined at:
  5726 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lltoft.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;  c               4    8[COMMON] unsigned long 
  5729 ;; Auto vars:     Size  Location     Type
  5730 ;;  exp             1   13[COMMON] unsigned char 
  5731 ;; Return value:  Size  Location     Type
  5732 ;;                  3    8[COMMON] float 
  5733 ;; Registers used:
  5734 ;;		wreg, status,2, status,0, pclath, cstack
  5735 ;; Tracked objects:
  5736 ;;		On entry : 0/0
  5737 ;;		On exit  : 0/0
  5738 ;;		Unchanged: 0/0
  5739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5740 ;;      Params:         4       0       0       0       0       0       0       0
  5741 ;;      Locals:         1       0       0       0       0       0       0       0
  5742 ;;      Temps:          1       0       0       0       0       0       0       0
  5743 ;;      Totals:         6       0       0       0       0       0       0       0
  5744 ;;Total ram usage:        6 bytes
  5745 ;; Hardware stack levels used:    1
  5746 ;; Hardware stack levels required when called:    1
  5747 ;; This function calls:
  5748 ;;		___ftpack
  5749 ;; This function is called by:
  5750 ;;		_sprintf
  5751 ;; This function uses a non-reentrant model
  5752 ;;
  5753                           
  5754                           
  5755                           ;psect for function ___lltoft
  5756  080D                     ___lltoft:	
  5757                           
  5758                           ;incstack = 0
  5759                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5760  080D  308E               	movlw	142
  5761  080E  00FC               	movwf	??___lltoft
  5762  080F  087C               	movf	??___lltoft,w
  5763  0810  00FD               	movwf	___lltoft@exp
  5764  0811                     l2335:	
  5765  0811  30FF               	movlw	255
  5766  0812  057B               	andwf	___lltoft@c+3,w
  5767  0813  1903               	btfsc	3,2
  5768  0814  2821               	goto	l2337
  5769  0815  3001               	movlw	1
  5770  0816                     u3175:	
  5771  0816  36FB               	lsrf	___lltoft@c+3,f
  5772  0817  0CFA               	rrf	___lltoft@c+2,f
  5773  0818  0CF9               	rrf	___lltoft@c+1,f
  5774  0819  0CF8               	rrf	___lltoft@c,f
  5775  081A  0B89               	decfsz	9,f
  5776  081B  2816               	goto	u3175
  5777  081C  3001               	movlw	1
  5778  081D  00FC               	movwf	??___lltoft
  5779  081E  087C               	movf	??___lltoft,w
  5780  081F  07FD               	addwf	___lltoft@exp,f
  5781  0820  2811               	goto	l2335
  5782  0821                     l2337:	
  5783  0821  0878               	movf	___lltoft@c,w
  5784  0822  00F0               	movwf	___ftpack@arg
  5785  0823  0879               	movf	___lltoft@c+1,w
  5786  0824  00F1               	movwf	___ftpack@arg+1
  5787  0825  087A               	movf	___lltoft@c+2,w
  5788  0826  00F2               	movwf	___ftpack@arg+2
  5789  0827  087D               	movf	___lltoft@exp,w
  5790  0828  00FC               	movwf	??___lltoft
  5791  0829  087C               	movf	??___lltoft,w
  5792  082A  00F3               	movwf	___ftpack@exp
  5793  082B  01F4               	clrf	___ftpack@sign
  5794  082C  3189  2175         	fcall	___ftpack
  5795  082E  0870               	movf	?___ftpack,w
  5796  082F  00F8               	movwf	?___lltoft
  5797  0830  0871               	movf	?___ftpack+1,w
  5798  0831  00F9               	movwf	?___lltoft+1
  5799  0832  0872               	movf	?___ftpack+2,w
  5800  0833  00FA               	movwf	?___lltoft+2
  5801  0834  0008               	return
  5802  0835                     __end_of___lltoft:	
  5803                           
  5804                           	psect	text12
  5805  1779                     __ptext12:	
  5806 ;; *************** function ___llmod *****************
  5807 ;; Defined at:
  5808 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\llmod.c"
  5809 ;; Parameters:    Size  Location     Type
  5810 ;;  divisor         4    0[COMMON] unsigned long 
  5811 ;;  dividend        4    4[COMMON] unsigned long 
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;  counter         1    9[COMMON] unsigned char 
  5814 ;; Return value:  Size  Location     Type
  5815 ;;                  4    0[COMMON] unsigned long 
  5816 ;; Registers used:
  5817 ;;		wreg, status,2, status,0
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5823 ;;      Params:         8       0       0       0       0       0       0       0
  5824 ;;      Locals:         1       0       0       0       0       0       0       0
  5825 ;;      Temps:          1       0       0       0       0       0       0       0
  5826 ;;      Totals:        10       0       0       0       0       0       0       0
  5827 ;;Total ram usage:       10 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; This function calls:
  5830 ;;		Nothing
  5831 ;; This function is called by:
  5832 ;;		_sprintf
  5833 ;; This function uses a non-reentrant model
  5834 ;;
  5835                           
  5836                           
  5837                           ;psect for function ___llmod
  5838  1779                     ___llmod:	
  5839                           
  5840                           ;incstack = 0
  5841                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5842  1779  0873               	movf	___llmod@divisor+3,w
  5843  177A  0472               	iorwf	___llmod@divisor+2,w
  5844  177B  0471               	iorwf	___llmod@divisor+1,w
  5845  177C  0470               	iorwf	___llmod@divisor,w
  5846  177D  1903               	skipnz
  5847  177E  2FB2               	goto	l2327
  5848  177F  01F9               	clrf	___llmod@counter
  5849  1780  0AF9               	incf	___llmod@counter,f
  5850  1781                     l2317:	
  5851  1781  1BF3               	btfsc	___llmod@divisor+3,7
  5852  1782  2F8F               	goto	l2319
  5853  1783  3001               	movlw	1
  5854  1784                     u3125:	
  5855  1784  35F0               	lslf	___llmod@divisor,f
  5856  1785  0DF1               	rlf	___llmod@divisor+1,f
  5857  1786  0DF2               	rlf	___llmod@divisor+2,f
  5858  1787  0DF3               	rlf	___llmod@divisor+3,f
  5859  1788  0B89               	decfsz	9,f
  5860  1789  2F84               	goto	u3125
  5861  178A  3001               	movlw	1
  5862  178B  00F8               	movwf	??___llmod
  5863  178C  0878               	movf	??___llmod,w
  5864  178D  07F9               	addwf	___llmod@counter,f
  5865  178E  2F81               	goto	l2317
  5866  178F                     l2319:	
  5867  178F  0873               	movf	___llmod@divisor+3,w
  5868  1790  0277               	subwf	___llmod@dividend+3,w
  5869  1791  1D03               	skipz
  5870  1792  2F9D               	goto	u3145
  5871  1793  0872               	movf	___llmod@divisor+2,w
  5872  1794  0276               	subwf	___llmod@dividend+2,w
  5873  1795  1D03               	skipz
  5874  1796  2F9D               	goto	u3145
  5875  1797  0871               	movf	___llmod@divisor+1,w
  5876  1798  0275               	subwf	___llmod@dividend+1,w
  5877  1799  1D03               	skipz
  5878  179A  2F9D               	goto	u3145
  5879  179B  0870               	movf	___llmod@divisor,w
  5880  179C  0274               	subwf	___llmod@dividend,w
  5881  179D                     u3145:	
  5882  179D  1C03               	skipc
  5883  179E  2FA7               	goto	l2323
  5884  179F  0870               	movf	___llmod@divisor,w
  5885  17A0  02F4               	subwf	___llmod@dividend,f
  5886  17A1  0871               	movf	___llmod@divisor+1,w
  5887  17A2  3BF5               	subwfb	___llmod@dividend+1,f
  5888  17A3  0872               	movf	___llmod@divisor+2,w
  5889  17A4  3BF6               	subwfb	___llmod@dividend+2,f
  5890  17A5  0873               	movf	___llmod@divisor+3,w
  5891  17A6  3BF7               	subwfb	___llmod@dividend+3,f
  5892  17A7                     l2323:	
  5893  17A7  3001               	movlw	1
  5894  17A8                     u3155:	
  5895  17A8  36F3               	lsrf	___llmod@divisor+3,f
  5896  17A9  0CF2               	rrf	___llmod@divisor+2,f
  5897  17AA  0CF1               	rrf	___llmod@divisor+1,f
  5898  17AB  0CF0               	rrf	___llmod@divisor,f
  5899  17AC  0B89               	decfsz	9,f
  5900  17AD  2FA8               	goto	u3155
  5901  17AE  3001               	movlw	1
  5902  17AF  02F9               	subwf	___llmod@counter,f
  5903  17B0  1D03               	btfss	3,2
  5904  17B1  2F8F               	goto	l2319
  5905  17B2                     l2327:	
  5906  17B2  0877               	movf	___llmod@dividend+3,w
  5907  17B3  00F3               	movwf	?___llmod+3
  5908  17B4  0876               	movf	___llmod@dividend+2,w
  5909  17B5  00F2               	movwf	?___llmod+2
  5910  17B6  0875               	movf	___llmod@dividend+1,w
  5911  17B7  00F1               	movwf	?___llmod+1
  5912  17B8  0874               	movf	___llmod@dividend,w
  5913  17B9  00F0               	movwf	?___llmod
  5914  17BA  0008               	return
  5915  17BB                     __end_of___llmod:	
  5916                           
  5917                           	psect	text13
  5918  087D                     __ptext13:	
  5919 ;; *************** function ___lldiv *****************
  5920 ;; Defined at:
  5921 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  5922 ;; Parameters:    Size  Location     Type
  5923 ;;  divisor         4    0[COMMON] unsigned long 
  5924 ;;  dividend        4    4[COMMON] unsigned long 
  5925 ;; Auto vars:     Size  Location     Type
  5926 ;;  quotient        4    9[COMMON] unsigned long 
  5927 ;;  counter         1   13[COMMON] unsigned char 
  5928 ;; Return value:  Size  Location     Type
  5929 ;;                  4    0[COMMON] unsigned long 
  5930 ;; Registers used:
  5931 ;;		wreg, status,2, status,0
  5932 ;; Tracked objects:
  5933 ;;		On entry : 0/0
  5934 ;;		On exit  : 0/0
  5935 ;;		Unchanged: 0/0
  5936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5937 ;;      Params:         8       0       0       0       0       0       0       0
  5938 ;;      Locals:         5       0       0       0       0       0       0       0
  5939 ;;      Temps:          1       0       0       0       0       0       0       0
  5940 ;;      Totals:        14       0       0       0       0       0       0       0
  5941 ;;Total ram usage:       14 bytes
  5942 ;; Hardware stack levels used:    1
  5943 ;; This function calls:
  5944 ;;		Nothing
  5945 ;; This function is called by:
  5946 ;;		_sprintf
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           
  5951                           ;psect for function ___lldiv
  5952  087D                     ___lldiv:	
  5953                           
  5954                           ;incstack = 0
  5955                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5956  087D  3000               	movlw	0
  5957  087E  00FC               	movwf	___lldiv@quotient+3
  5958  087F  3000               	movlw	0
  5959  0880  00FB               	movwf	___lldiv@quotient+2
  5960  0881  3000               	movlw	0
  5961  0882  00FA               	movwf	___lldiv@quotient+1
  5962  0883  3000               	movlw	0
  5963  0884  00F9               	movwf	___lldiv@quotient
  5964  0885  0873               	movf	___lldiv@divisor+3,w
  5965  0886  0472               	iorwf	___lldiv@divisor+2,w
  5966  0887  0471               	iorwf	___lldiv@divisor+1,w
  5967  0888  0470               	iorwf	___lldiv@divisor,w
  5968  0889  1903               	skipnz
  5969  088A  28C6               	goto	l2307
  5970  088B  01FD               	clrf	___lldiv@counter
  5971  088C  0AFD               	incf	___lldiv@counter,f
  5972  088D                     l2293:	
  5973  088D  1BF3               	btfsc	___lldiv@divisor+3,7
  5974  088E  289B               	goto	l2295
  5975  088F  3001               	movlw	1
  5976  0890                     u3055:	
  5977  0890  35F0               	lslf	___lldiv@divisor,f
  5978  0891  0DF1               	rlf	___lldiv@divisor+1,f
  5979  0892  0DF2               	rlf	___lldiv@divisor+2,f
  5980  0893  0DF3               	rlf	___lldiv@divisor+3,f
  5981  0894  0B89               	decfsz	9,f
  5982  0895  2890               	goto	u3055
  5983  0896  3001               	movlw	1
  5984  0897  00F8               	movwf	??___lldiv
  5985  0898  0878               	movf	??___lldiv,w
  5986  0899  07FD               	addwf	___lldiv@counter,f
  5987  089A  288D               	goto	l2293
  5988  089B                     l2295:	
  5989  089B  3001               	movlw	1
  5990  089C                     u3075:	
  5991  089C  35F9               	lslf	___lldiv@quotient,f
  5992  089D  0DFA               	rlf	___lldiv@quotient+1,f
  5993  089E  0DFB               	rlf	___lldiv@quotient+2,f
  5994  089F  0DFC               	rlf	___lldiv@quotient+3,f
  5995  08A0  0B89               	decfsz	9,f
  5996  08A1  289C               	goto	u3075
  5997  08A2  0873               	movf	___lldiv@divisor+3,w
  5998  08A3  0277               	subwf	___lldiv@dividend+3,w
  5999  08A4  1D03               	skipz
  6000  08A5  28B0               	goto	u3085
  6001  08A6  0872               	movf	___lldiv@divisor+2,w
  6002  08A7  0276               	subwf	___lldiv@dividend+2,w
  6003  08A8  1D03               	skipz
  6004  08A9  28B0               	goto	u3085
  6005  08AA  0871               	movf	___lldiv@divisor+1,w
  6006  08AB  0275               	subwf	___lldiv@dividend+1,w
  6007  08AC  1D03               	skipz
  6008  08AD  28B0               	goto	u3085
  6009  08AE  0870               	movf	___lldiv@divisor,w
  6010  08AF  0274               	subwf	___lldiv@dividend,w
  6011  08B0                     u3085:	
  6012  08B0  1C03               	skipc
  6013  08B1  28BB               	goto	l2303
  6014  08B2  0870               	movf	___lldiv@divisor,w
  6015  08B3  02F4               	subwf	___lldiv@dividend,f
  6016  08B4  0871               	movf	___lldiv@divisor+1,w
  6017  08B5  3BF5               	subwfb	___lldiv@dividend+1,f
  6018  08B6  0872               	movf	___lldiv@divisor+2,w
  6019  08B7  3BF6               	subwfb	___lldiv@dividend+2,f
  6020  08B8  0873               	movf	___lldiv@divisor+3,w
  6021  08B9  3BF7               	subwfb	___lldiv@dividend+3,f
  6022  08BA  1479               	bsf	___lldiv@quotient,0
  6023  08BB                     l2303:	
  6024  08BB  3001               	movlw	1
  6025  08BC                     u3095:	
  6026  08BC  36F3               	lsrf	___lldiv@divisor+3,f
  6027  08BD  0CF2               	rrf	___lldiv@divisor+2,f
  6028  08BE  0CF1               	rrf	___lldiv@divisor+1,f
  6029  08BF  0CF0               	rrf	___lldiv@divisor,f
  6030  08C0  0B89               	decfsz	9,f
  6031  08C1  28BC               	goto	u3095
  6032  08C2  3001               	movlw	1
  6033  08C3  02FD               	subwf	___lldiv@counter,f
  6034  08C4  1D03               	btfss	3,2
  6035  08C5  289B               	goto	l2295
  6036  08C6                     l2307:	
  6037  08C6  087C               	movf	___lldiv@quotient+3,w
  6038  08C7  00F3               	movwf	?___lldiv+3
  6039  08C8  087B               	movf	___lldiv@quotient+2,w
  6040  08C9  00F2               	movwf	?___lldiv+2
  6041  08CA  087A               	movf	___lldiv@quotient+1,w
  6042  08CB  00F1               	movwf	?___lldiv+1
  6043  08CC  0879               	movf	___lldiv@quotient,w
  6044  08CD  00F0               	movwf	?___lldiv
  6045  08CE  0008               	return
  6046  08CF                     __end_of___lldiv:	
  6047                           
  6048                           	psect	text14
  6049  09D9                     __ptext14:	
  6050 ;; *************** function ___fttol *****************
  6051 ;; Defined at:
  6052 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  6053 ;; Parameters:    Size  Location     Type
  6054 ;;  f1              3   33[BANK0 ] float 
  6055 ;; Auto vars:     Size  Location     Type
  6056 ;;  lval            4   42[BANK0 ] unsigned long 
  6057 ;;  exp1            1   46[BANK0 ] unsigned char 
  6058 ;;  sign1           1   41[BANK0 ] unsigned char 
  6059 ;; Return value:  Size  Location     Type
  6060 ;;                  4   33[BANK0 ] long 
  6061 ;; Registers used:
  6062 ;;		wreg, status,2, status,0
  6063 ;; Tracked objects:
  6064 ;;		On entry : 0/0
  6065 ;;		On exit  : 0/0
  6066 ;;		Unchanged: 0/0
  6067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6068 ;;      Params:         0       4       0       0       0       0       0       0
  6069 ;;      Locals:         0       6       0       0       0       0       0       0
  6070 ;;      Temps:          0       4       0       0       0       0       0       0
  6071 ;;      Totals:         0      14       0       0       0       0       0       0
  6072 ;;Total ram usage:       14 bytes
  6073 ;; Hardware stack levels used:    1
  6074 ;; This function calls:
  6075 ;;		Nothing
  6076 ;; This function is called by:
  6077 ;;		_sprintf
  6078 ;; This function uses a non-reentrant model
  6079 ;;
  6080                           
  6081                           
  6082                           ;psect for function ___fttol
  6083  09D9                     ___fttol:	
  6084                           
  6085                           ;incstack = 0
  6086                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6087  09D9  0020               	movlb	0	; select bank0
  6088  09DA  0841               	movf	___fttol@f1,w
  6089  09DB  00C5               	movwf	??___fttol
  6090  09DC  0842               	movf	___fttol@f1+1,w
  6091  09DD  00C6               	movwf	??___fttol+1
  6092  09DE  0843               	movf	___fttol@f1+2,w
  6093  09DF  00C7               	movwf	??___fttol+2
  6094  09E0  1003               	clrc
  6095  09E1  0D46               	rlf	??___fttol+1,w
  6096  09E2  0D47               	rlf	??___fttol+2,w
  6097  09E3  00C8               	movwf	??___fttol+3
  6098  09E4  0848               	movf	??___fttol+3,w
  6099  09E5  00CE               	movwf	___fttol@exp1
  6100  09E6  084E               	movf	___fttol@exp1,w
  6101  09E7  1D03               	btfss	3,2
  6102  09E8  29F2               	goto	l2251
  6103  09E9  3000               	movlw	0
  6104  09EA  00C4               	movwf	?___fttol+3
  6105  09EB  3000               	movlw	0
  6106  09EC  00C3               	movwf	?___fttol+2
  6107  09ED  3000               	movlw	0
  6108  09EE  00C2               	movwf	?___fttol+1
  6109  09EF  3000               	movlw	0
  6110  09F0  00C1               	movwf	?___fttol
  6111  09F1  0008               	return
  6112  09F2                     l2251:	
  6113  09F2  0841               	movf	___fttol@f1,w
  6114  09F3  00C5               	movwf	??___fttol
  6115  09F4  0842               	movf	___fttol@f1+1,w
  6116  09F5  00C6               	movwf	??___fttol+1
  6117  09F6  0843               	movf	___fttol@f1+2,w
  6118  09F7  00C7               	movwf	??___fttol+2
  6119  09F8  3017               	movlw	23
  6120  09F9                     u2955:	
  6121  09F9  36C7               	lsrf	??___fttol+2,f
  6122  09FA  0CC6               	rrf	??___fttol+1,f
  6123  09FB  0CC5               	rrf	??___fttol,f
  6124  09FC  0B89               	decfsz	9,f
  6125  09FD  29F9               	goto	u2955
  6126  09FE  0845               	movf	??___fttol,w
  6127  09FF  00C8               	movwf	??___fttol+3
  6128  0A00  0848               	movf	??___fttol+3,w
  6129  0A01  00C9               	movwf	___fttol@sign1
  6130  0A02  17C2               	bsf	___fttol@f1+1,7
  6131  0A03  30FF               	movlw	255
  6132  0A04  05C1               	andwf	___fttol@f1,f
  6133  0A05  30FF               	movlw	255
  6134  0A06  05C2               	andwf	___fttol@f1+1,f
  6135  0A07  3000               	movlw	0
  6136  0A08  05C3               	andwf	___fttol@f1+2,f
  6137  0A09  0841               	movf	___fttol@f1,w
  6138  0A0A  00CA               	movwf	___fttol@lval
  6139  0A0B  0842               	movf	___fttol@f1+1,w
  6140  0A0C  00CB               	movwf	___fttol@lval+1
  6141  0A0D  0843               	movf	___fttol@f1+2,w
  6142  0A0E  00CC               	movwf	___fttol@lval+2
  6143  0A0F  01CD               	clrf	___fttol@lval+3
  6144  0A10  308E               	movlw	142
  6145  0A11  02CE               	subwf	___fttol@exp1,f
  6146  0A12  1FCE               	btfss	___fttol@exp1,7
  6147  0A13  2A30               	goto	l2271
  6148  0A14  084E               	movf	___fttol@exp1,w
  6149  0A15  3A80               	xorlw	128
  6150  0A16  3E8F               	addlw	143
  6151  0A17  1803               	skipnc
  6152  0A18  2A22               	goto	l2269
  6153  0A19  3000               	movlw	0
  6154  0A1A  00C4               	movwf	?___fttol+3
  6155  0A1B  3000               	movlw	0
  6156  0A1C  00C3               	movwf	?___fttol+2
  6157  0A1D  3000               	movlw	0
  6158  0A1E  00C2               	movwf	?___fttol+1
  6159  0A1F  3000               	movlw	0
  6160  0A20  00C1               	movwf	?___fttol
  6161  0A21  0008               	return
  6162  0A22                     l2269:	
  6163  0A22  3001               	movlw	1
  6164  0A23                     u2985:	
  6165  0A23  36CD               	lsrf	___fttol@lval+3,f
  6166  0A24  0CCC               	rrf	___fttol@lval+2,f
  6167  0A25  0CCB               	rrf	___fttol@lval+1,f
  6168  0A26  0CCA               	rrf	___fttol@lval,f
  6169  0A27  0B89               	decfsz	9,f
  6170  0A28  2A23               	goto	u2985
  6171  0A29  3001               	movlw	1
  6172  0A2A  00C5               	movwf	??___fttol
  6173  0A2B  0845               	movf	??___fttol,w
  6174  0A2C  07CE               	addwf	___fttol@exp1,f
  6175  0A2D  1903               	btfsc	3,2
  6176  0A2E  2A49               	goto	l2279
  6177  0A2F  2A22               	goto	l2269
  6178  0A30                     l2271:	
  6179  0A30  3018               	movlw	24
  6180  0A31  024E               	subwf	___fttol@exp1,w
  6181  0A32  1C03               	skipc
  6182  0A33  2A46               	goto	l622
  6183  0A34  3000               	movlw	0
  6184  0A35  00C4               	movwf	?___fttol+3
  6185  0A36  3000               	movlw	0
  6186  0A37  00C3               	movwf	?___fttol+2
  6187  0A38  3000               	movlw	0
  6188  0A39  00C2               	movwf	?___fttol+1
  6189  0A3A  3000               	movlw	0
  6190  0A3B  00C1               	movwf	?___fttol
  6191  0A3C  0008               	return
  6192  0A3D                     l2277:	
  6193  0A3D  3001               	movlw	1
  6194  0A3E                     u3015:	
  6195  0A3E  35CA               	lslf	___fttol@lval,f
  6196  0A3F  0DCB               	rlf	___fttol@lval+1,f
  6197  0A40  0DCC               	rlf	___fttol@lval+2,f
  6198  0A41  0DCD               	rlf	___fttol@lval+3,f
  6199  0A42  0B89               	decfsz	9,f
  6200  0A43  2A3E               	goto	u3015
  6201  0A44  3001               	movlw	1
  6202  0A45  02CE               	subwf	___fttol@exp1,f
  6203  0A46                     l622:	
  6204  0A46  084E               	movf	___fttol@exp1,w
  6205  0A47  1D03               	btfss	3,2
  6206  0A48  2A3D               	goto	l2277
  6207  0A49                     l2279:	
  6208  0A49  0849               	movf	___fttol@sign1,w
  6209  0A4A  1903               	btfsc	3,2
  6210  0A4B  2A57               	goto	l2283
  6211  0A4C  09CA               	comf	___fttol@lval,f
  6212  0A4D  09CB               	comf	___fttol@lval+1,f
  6213  0A4E  09CC               	comf	___fttol@lval+2,f
  6214  0A4F  09CD               	comf	___fttol@lval+3,f
  6215  0A50  0ACA               	incf	___fttol@lval,f
  6216  0A51  1903               	skipnz
  6217  0A52  0ACB               	incf	___fttol@lval+1,f
  6218  0A53  1903               	skipnz
  6219  0A54  0ACC               	incf	___fttol@lval+2,f
  6220  0A55  1903               	skipnz
  6221  0A56  0ACD               	incf	___fttol@lval+3,f
  6222  0A57                     l2283:	
  6223  0A57  084D               	movf	___fttol@lval+3,w
  6224  0A58  00C4               	movwf	?___fttol+3
  6225  0A59  084C               	movf	___fttol@lval+2,w
  6226  0A5A  00C3               	movwf	?___fttol+2
  6227  0A5B  084B               	movf	___fttol@lval+1,w
  6228  0A5C  00C2               	movwf	?___fttol+1
  6229  0A5D  084A               	movf	___fttol@lval,w
  6230  0A5E  00C1               	movwf	?___fttol
  6231  0A5F  0008               	return
  6232  0A60                     __end_of___fttol:	
  6233                           
  6234                           	psect	text15
  6235  1720                     __ptext15:	
  6236 ;; *************** function ___ftsub *****************
  6237 ;; Defined at:
  6238 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  6239 ;; Parameters:    Size  Location     Type
  6240 ;;  f2              3   51[BANK0 ] float 
  6241 ;;  f1              3   54[BANK0 ] float 
  6242 ;; Auto vars:     Size  Location     Type
  6243 ;;		None
  6244 ;; Return value:  Size  Location     Type
  6245 ;;                  3   51[BANK0 ] float 
  6246 ;; Registers used:
  6247 ;;		wreg, status,2, status,0, pclath, cstack
  6248 ;; Tracked objects:
  6249 ;;		On entry : 0/0
  6250 ;;		On exit  : 0/0
  6251 ;;		Unchanged: 0/0
  6252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6253 ;;      Params:         0       6       0       0       0       0       0       0
  6254 ;;      Locals:         0       0       0       0       0       0       0       0
  6255 ;;      Temps:          0       0       0       0       0       0       0       0
  6256 ;;      Totals:         0       6       0       0       0       0       0       0
  6257 ;;Total ram usage:        6 bytes
  6258 ;; Hardware stack levels used:    1
  6259 ;; Hardware stack levels required when called:    2
  6260 ;; This function calls:
  6261 ;;		___ftadd
  6262 ;; This function is called by:
  6263 ;;		_sprintf
  6264 ;; This function uses a non-reentrant model
  6265 ;;
  6266                           
  6267                           
  6268                           ;psect for function ___ftsub
  6269  1720                     ___ftsub:	
  6270                           
  6271                           ;incstack = 0
  6272                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6273  1720  0020               	movlb	0	; select bank0
  6274  1721  0855               	movf	___ftsub@f2+2,w
  6275  1722  0454               	iorwf	___ftsub@f2+1,w
  6276  1723  0453               	iorwf	___ftsub@f2,w
  6277  1724  1903               	skipnz
  6278  1725  2F28               	goto	l2241
  6279  1726  3080               	movlw	128
  6280  1727  06D5               	xorwf	___ftsub@f2+2,f
  6281  1728                     l2241:	
  6282  1728  0856               	movf	___ftsub@f1,w
  6283  1729  00C6               	movwf	___ftadd@f1
  6284  172A  0857               	movf	___ftsub@f1+1,w
  6285  172B  00C7               	movwf	___ftadd@f1+1
  6286  172C  0858               	movf	___ftsub@f1+2,w
  6287  172D  00C8               	movwf	___ftadd@f1+2
  6288  172E  0853               	movf	___ftsub@f2,w
  6289  172F  00C9               	movwf	___ftadd@f2
  6290  1730  0854               	movf	___ftsub@f2+1,w
  6291  1731  00CA               	movwf	___ftadd@f2+1
  6292  1732  0855               	movf	___ftsub@f2+2,w
  6293  1733  00CB               	movwf	___ftadd@f2+2
  6294  1734  318C  2488         	fcall	___ftadd
  6295  1736  0020               	movlb	0	; select bank0
  6296  1737  0846               	movf	?___ftadd,w
  6297  1738  00D3               	movwf	?___ftsub
  6298  1739  0847               	movf	?___ftadd+1,w
  6299  173A  00D4               	movwf	?___ftsub+1
  6300  173B  0848               	movf	?___ftadd+2,w
  6301  173C  00D5               	movwf	?___ftsub+2
  6302  173D  0008               	return
  6303  173E                     __end_of___ftsub:	
  6304                           
  6305                           	psect	text16
  6306  0C88                     __ptext16:	
  6307 ;; *************** function ___ftadd *****************
  6308 ;; Defined at:
  6309 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  6310 ;; Parameters:    Size  Location     Type
  6311 ;;  f1              3   38[BANK0 ] float 
  6312 ;;  f2              3   41[BANK0 ] float 
  6313 ;; Auto vars:     Size  Location     Type
  6314 ;;  exp1            1   50[BANK0 ] unsigned char 
  6315 ;;  exp2            1   49[BANK0 ] unsigned char 
  6316 ;;  sign            1   48[BANK0 ] unsigned char 
  6317 ;; Return value:  Size  Location     Type
  6318 ;;                  3   38[BANK0 ] float 
  6319 ;; Registers used:
  6320 ;;		wreg, status,2, status,0, pclath, cstack
  6321 ;; Tracked objects:
  6322 ;;		On entry : 0/0
  6323 ;;		On exit  : 0/0
  6324 ;;		Unchanged: 0/0
  6325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6326 ;;      Params:         0       6       0       0       0       0       0       0
  6327 ;;      Locals:         0       3       0       0       0       0       0       0
  6328 ;;      Temps:          0       4       0       0       0       0       0       0
  6329 ;;      Totals:         0      13       0       0       0       0       0       0
  6330 ;;Total ram usage:       13 bytes
  6331 ;; Hardware stack levels used:    1
  6332 ;; Hardware stack levels required when called:    1
  6333 ;; This function calls:
  6334 ;;		___ftpack
  6335 ;; This function is called by:
  6336 ;;		_sprintf
  6337 ;;		___ftsub
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341                           
  6342                           ;psect for function ___ftadd
  6343  0C88                     ___ftadd:	
  6344                           
  6345                           ;incstack = 0
  6346                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6347  0C88  0020               	movlb	0	; select bank0
  6348  0C89  0846               	movf	___ftadd@f1,w
  6349  0C8A  00CC               	movwf	??___ftadd
  6350  0C8B  0847               	movf	___ftadd@f1+1,w
  6351  0C8C  00CD               	movwf	??___ftadd+1
  6352  0C8D  0848               	movf	___ftadd@f1+2,w
  6353  0C8E  00CE               	movwf	??___ftadd+2
  6354  0C8F  1003               	clrc
  6355  0C90  0D4D               	rlf	??___ftadd+1,w
  6356  0C91  0D4E               	rlf	??___ftadd+2,w
  6357  0C92  00CF               	movwf	??___ftadd+3
  6358  0C93  084F               	movf	??___ftadd+3,w
  6359  0C94  00D2               	movwf	___ftadd@exp1
  6360  0C95  0849               	movf	___ftadd@f2,w
  6361  0C96  00CC               	movwf	??___ftadd
  6362  0C97  084A               	movf	___ftadd@f2+1,w
  6363  0C98  00CD               	movwf	??___ftadd+1
  6364  0C99  084B               	movf	___ftadd@f2+2,w
  6365  0C9A  00CE               	movwf	??___ftadd+2
  6366  0C9B  1003               	clrc
  6367  0C9C  0D4D               	rlf	??___ftadd+1,w
  6368  0C9D  0D4E               	rlf	??___ftadd+2,w
  6369  0C9E  00CF               	movwf	??___ftadd+3
  6370  0C9F  084F               	movf	??___ftadd+3,w
  6371  0CA0  00D1               	movwf	___ftadd@exp2
  6372  0CA1  0852               	movf	___ftadd@exp1,w
  6373  0CA2  1903               	btfsc	3,2
  6374  0CA3  2CB0               	goto	l1877
  6375  0CA4  0851               	movf	___ftadd@exp2,w
  6376  0CA5  0252               	subwf	___ftadd@exp1,w
  6377  0CA6  1803               	skipnc
  6378  0CA7  2CB7               	goto	l1881
  6379  0CA8  0352               	decf	___ftadd@exp1,w
  6380  0CA9  3AFF               	xorlw	255
  6381  0CAA  0751               	addwf	___ftadd@exp2,w
  6382  0CAB  00CC               	movwf	??___ftadd
  6383  0CAC  3019               	movlw	25
  6384  0CAD  024C               	subwf	??___ftadd,w
  6385  0CAE  1C03               	skipc
  6386  0CAF  2CB7               	goto	l1881
  6387  0CB0                     l1877:	
  6388  0CB0  0849               	movf	___ftadd@f2,w
  6389  0CB1  00C6               	movwf	?___ftadd
  6390  0CB2  084A               	movf	___ftadd@f2+1,w
  6391  0CB3  00C7               	movwf	?___ftadd+1
  6392  0CB4  084B               	movf	___ftadd@f2+2,w
  6393  0CB5  00C8               	movwf	?___ftadd+2
  6394  0CB6  0008               	return
  6395  0CB7                     l1881:	
  6396  0CB7  0851               	movf	___ftadd@exp2,w
  6397  0CB8  1903               	btfsc	3,2
  6398  0CB9  0008               	return
  6399  0CBA  0852               	movf	___ftadd@exp1,w
  6400  0CBB  0251               	subwf	___ftadd@exp2,w
  6401  0CBC  1803               	skipnc
  6402  0CBD  2CC6               	goto	l1887
  6403  0CBE  0351               	decf	___ftadd@exp2,w
  6404  0CBF  3AFF               	xorlw	255
  6405  0CC0  0752               	addwf	___ftadd@exp1,w
  6406  0CC1  00CC               	movwf	??___ftadd
  6407  0CC2  3019               	movlw	25
  6408  0CC3  024C               	subwf	??___ftadd,w
  6409  0CC4  1803               	btfsc	3,0
  6410  0CC5  0008               	return
  6411  0CC6                     l1887:	
  6412  0CC6  3006               	movlw	6
  6413  0CC7  00CC               	movwf	??___ftadd
  6414  0CC8  084C               	movf	??___ftadd,w
  6415  0CC9  00D0               	movwf	___ftadd@sign
  6416  0CCA  1BC8               	btfsc	___ftadd@f1+2,7
  6417  0CCB  17D0               	bsf	___ftadd@sign,7
  6418  0CCC  1BCB               	btfsc	___ftadd@f2+2,7
  6419  0CCD  1750               	bsf	___ftadd@sign,6
  6420  0CCE  17C7               	bsf	___ftadd@f1+1,7
  6421  0CCF  30FF               	movlw	255
  6422  0CD0  05C6               	andwf	___ftadd@f1,f
  6423  0CD1  30FF               	movlw	255
  6424  0CD2  05C7               	andwf	___ftadd@f1+1,f
  6425  0CD3  3000               	movlw	0
  6426  0CD4  05C8               	andwf	___ftadd@f1+2,f
  6427  0CD5  17CA               	bsf	___ftadd@f2+1,7
  6428  0CD6  30FF               	movlw	255
  6429  0CD7  05C9               	andwf	___ftadd@f2,f
  6430  0CD8  30FF               	movlw	255
  6431  0CD9  05CA               	andwf	___ftadd@f2+1,f
  6432  0CDA  3000               	movlw	0
  6433  0CDB  05CB               	andwf	___ftadd@f2+2,f
  6434  0CDC  0851               	movf	___ftadd@exp2,w
  6435  0CDD  0252               	subwf	___ftadd@exp1,w
  6436  0CDE  1803               	skipnc
  6437  0CDF  2D02               	goto	l1909
  6438  0CE0                     l1899:	
  6439  0CE0  3001               	movlw	1
  6440  0CE1                     u2285:	
  6441  0CE1  35C9               	lslf	___ftadd@f2,f
  6442  0CE2  0DCA               	rlf	___ftadd@f2+1,f
  6443  0CE3  0DCB               	rlf	___ftadd@f2+2,f
  6444  0CE4  0B89               	decfsz	9,f
  6445  0CE5  2CE1               	goto	u2285
  6446  0CE6  3001               	movlw	1
  6447  0CE7  02D1               	subwf	___ftadd@exp2,f
  6448  0CE8  0851               	movf	___ftadd@exp2,w
  6449  0CE9  0652               	xorwf	___ftadd@exp1,w
  6450  0CEA  1903               	skipnz
  6451  0CEB  2CFD               	goto	l1907
  6452  0CEC  3001               	movlw	1
  6453  0CED  02D0               	subwf	___ftadd@sign,f
  6454  0CEE  0850               	movf	___ftadd@sign,w
  6455  0CEF  3907               	andlw	7
  6456  0CF0  1903               	btfsc	3,2
  6457  0CF1  2CFD               	goto	l1907
  6458  0CF2  2CE0               	goto	l1899
  6459  0CF3                     l1905:	
  6460  0CF3  3001               	movlw	1
  6461  0CF4                     u2315:	
  6462  0CF4  36C8               	lsrf	___ftadd@f1+2,f
  6463  0CF5  0CC7               	rrf	___ftadd@f1+1,f
  6464  0CF6  0CC6               	rrf	___ftadd@f1,f
  6465  0CF7  0B89               	decfsz	9,f
  6466  0CF8  2CF4               	goto	u2315
  6467  0CF9  3001               	movlw	1
  6468  0CFA  00CC               	movwf	??___ftadd
  6469  0CFB  084C               	movf	??___ftadd,w
  6470  0CFC  07D2               	addwf	___ftadd@exp1,f
  6471  0CFD                     l1907:	
  6472  0CFD  0852               	movf	___ftadd@exp1,w
  6473  0CFE  0651               	xorwf	___ftadd@exp2,w
  6474  0CFF  1903               	btfsc	3,2
  6475  0D00  2D27               	goto	l545
  6476  0D01  2CF3               	goto	l1905
  6477  0D02                     l1909:	
  6478  0D02  0852               	movf	___ftadd@exp1,w
  6479  0D03  0251               	subwf	___ftadd@exp2,w
  6480  0D04  1803               	skipnc
  6481  0D05  2D27               	goto	l545
  6482  0D06                     l1911:	
  6483  0D06  3001               	movlw	1
  6484  0D07                     u2345:	
  6485  0D07  35C6               	lslf	___ftadd@f1,f
  6486  0D08  0DC7               	rlf	___ftadd@f1+1,f
  6487  0D09  0DC8               	rlf	___ftadd@f1+2,f
  6488  0D0A  0B89               	decfsz	9,f
  6489  0D0B  2D07               	goto	u2345
  6490  0D0C  3001               	movlw	1
  6491  0D0D  02D2               	subwf	___ftadd@exp1,f
  6492  0D0E  0851               	movf	___ftadd@exp2,w
  6493  0D0F  0652               	xorwf	___ftadd@exp1,w
  6494  0D10  1903               	skipnz
  6495  0D11  2D23               	goto	l1919
  6496  0D12  3001               	movlw	1
  6497  0D13  02D0               	subwf	___ftadd@sign,f
  6498  0D14  0850               	movf	___ftadd@sign,w
  6499  0D15  3907               	andlw	7
  6500  0D16  1903               	btfsc	3,2
  6501  0D17  2D23               	goto	l1919
  6502  0D18  2D06               	goto	l1911
  6503  0D19                     l1917:	
  6504  0D19  3001               	movlw	1
  6505  0D1A                     u2375:	
  6506  0D1A  36CB               	lsrf	___ftadd@f2+2,f
  6507  0D1B  0CCA               	rrf	___ftadd@f2+1,f
  6508  0D1C  0CC9               	rrf	___ftadd@f2,f
  6509  0D1D  0B89               	decfsz	9,f
  6510  0D1E  2D1A               	goto	u2375
  6511  0D1F  3001               	movlw	1
  6512  0D20  00CC               	movwf	??___ftadd
  6513  0D21  084C               	movf	??___ftadd,w
  6514  0D22  07D1               	addwf	___ftadd@exp2,f
  6515  0D23                     l1919:	
  6516  0D23  0852               	movf	___ftadd@exp1,w
  6517  0D24  0651               	xorwf	___ftadd@exp2,w
  6518  0D25  1D03               	skipz
  6519  0D26  2D19               	goto	l1917
  6520  0D27                     l545:	
  6521  0D27  1FD0               	btfss	___ftadd@sign,7
  6522  0D28  2D39               	goto	l1923
  6523  0D29  30FF               	movlw	255
  6524  0D2A  06C6               	xorwf	___ftadd@f1,f
  6525  0D2B  30FF               	movlw	255
  6526  0D2C  06C7               	xorwf	___ftadd@f1+1,f
  6527  0D2D  30FF               	movlw	255
  6528  0D2E  06C8               	xorwf	___ftadd@f1+2,f
  6529  0D2F  3001               	movlw	1
  6530  0D30  07C6               	addwf	___ftadd@f1,f
  6531  0D31  3000               	movlw	0
  6532  0D32  1803               	skipnc
  6533  0D33  3001               	movlw	1
  6534  0D34  07C7               	addwf	___ftadd@f1+1,f
  6535  0D35  3000               	movlw	0
  6536  0D36  1803               	skipnc
  6537  0D37  3001               	movlw	1
  6538  0D38  07C8               	addwf	___ftadd@f1+2,f
  6539  0D39                     l1923:	
  6540  0D39  1F50               	btfss	___ftadd@sign,6
  6541  0D3A  2D4B               	goto	l1927
  6542  0D3B  30FF               	movlw	255
  6543  0D3C  06C9               	xorwf	___ftadd@f2,f
  6544  0D3D  30FF               	movlw	255
  6545  0D3E  06CA               	xorwf	___ftadd@f2+1,f
  6546  0D3F  30FF               	movlw	255
  6547  0D40  06CB               	xorwf	___ftadd@f2+2,f
  6548  0D41  3001               	movlw	1
  6549  0D42  07C9               	addwf	___ftadd@f2,f
  6550  0D43  3000               	movlw	0
  6551  0D44  1803               	skipnc
  6552  0D45  3001               	movlw	1
  6553  0D46  07CA               	addwf	___ftadd@f2+1,f
  6554  0D47  3000               	movlw	0
  6555  0D48  1803               	skipnc
  6556  0D49  3001               	movlw	1
  6557  0D4A  07CB               	addwf	___ftadd@f2+2,f
  6558  0D4B                     l1927:	
  6559  0D4B  01D0               	clrf	___ftadd@sign
  6560  0D4C  0846               	movf	___ftadd@f1,w
  6561  0D4D  07C9               	addwf	___ftadd@f2,f
  6562  0D4E  0847               	movf	___ftadd@f1+1,w
  6563  0D4F  3DCA               	addwfc	___ftadd@f2+1,f
  6564  0D50  0848               	movf	___ftadd@f1+2,w
  6565  0D51  3DCB               	addwfc	___ftadd@f2+2,f
  6566  0D52  1FCB               	btfss	___ftadd@f2+2,7
  6567  0D53  2D66               	goto	l1937
  6568  0D54  30FF               	movlw	255
  6569  0D55  06C9               	xorwf	___ftadd@f2,f
  6570  0D56  30FF               	movlw	255
  6571  0D57  06CA               	xorwf	___ftadd@f2+1,f
  6572  0D58  30FF               	movlw	255
  6573  0D59  06CB               	xorwf	___ftadd@f2+2,f
  6574  0D5A  3001               	movlw	1
  6575  0D5B  07C9               	addwf	___ftadd@f2,f
  6576  0D5C  3000               	movlw	0
  6577  0D5D  1803               	skipnc
  6578  0D5E  3001               	movlw	1
  6579  0D5F  07CA               	addwf	___ftadd@f2+1,f
  6580  0D60  3000               	movlw	0
  6581  0D61  1803               	skipnc
  6582  0D62  3001               	movlw	1
  6583  0D63  07CB               	addwf	___ftadd@f2+2,f
  6584  0D64  01D0               	clrf	___ftadd@sign
  6585  0D65  0AD0               	incf	___ftadd@sign,f
  6586  0D66                     l1937:	
  6587  0D66  0849               	movf	___ftadd@f2,w
  6588  0D67  00F0               	movwf	___ftpack@arg
  6589  0D68  084A               	movf	___ftadd@f2+1,w
  6590  0D69  00F1               	movwf	___ftpack@arg+1
  6591  0D6A  084B               	movf	___ftadd@f2+2,w
  6592  0D6B  00F2               	movwf	___ftpack@arg+2
  6593  0D6C  0852               	movf	___ftadd@exp1,w
  6594  0D6D  00CC               	movwf	??___ftadd
  6595  0D6E  084C               	movf	??___ftadd,w
  6596  0D6F  00F3               	movwf	___ftpack@exp
  6597  0D70  0850               	movf	___ftadd@sign,w
  6598  0D71  00CD               	movwf	??___ftadd+1
  6599  0D72  084D               	movf	??___ftadd+1,w
  6600  0D73  00F4               	movwf	___ftpack@sign
  6601  0D74  3189  2175         	fcall	___ftpack
  6602  0D76  0870               	movf	?___ftpack,w
  6603  0D77  0020               	movlb	0	; select bank0
  6604  0D78  00C6               	movwf	?___ftadd
  6605  0D79  0871               	movf	?___ftpack+1,w
  6606  0D7A  00C7               	movwf	?___ftadd+1
  6607  0D7B  0872               	movf	?___ftpack+2,w
  6608  0D7C  00C8               	movwf	?___ftadd+2
  6609  0D7D  0008               	return
  6610  0D7E                     __end_of___ftadd:	
  6611                           
  6612                           	psect	text17
  6613  165E                     __ptext17:	
  6614 ;; *************** function ___ftneg *****************
  6615 ;; Defined at:
  6616 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;  f1              3    0[COMMON] float 
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;		None
  6621 ;; Return value:  Size  Location     Type
  6622 ;;                  3    0[COMMON] float 
  6623 ;; Registers used:
  6624 ;;		wreg
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6630 ;;      Params:         3       0       0       0       0       0       0       0
  6631 ;;      Locals:         0       0       0       0       0       0       0       0
  6632 ;;      Temps:          0       0       0       0       0       0       0       0
  6633 ;;      Totals:         3       0       0       0       0       0       0       0
  6634 ;;Total ram usage:        3 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; This function calls:
  6637 ;;		Nothing
  6638 ;; This function is called by:
  6639 ;;		_sprintf
  6640 ;; This function uses a non-reentrant model
  6641 ;;
  6642                           
  6643                           
  6644                           ;psect for function ___ftneg
  6645  165E                     ___ftneg:	
  6646                           
  6647                           ;incstack = 0
  6648                           ; Regs used in ___ftneg: [wreg]
  6649  165E  0872               	movf	___ftneg@f1+2,w
  6650  165F  0471               	iorwf	___ftneg@f1+1,w
  6651  1660  0470               	iorwf	___ftneg@f1,w
  6652  1661  1903               	skipnz
  6653  1662  0008               	return
  6654  1663  3080               	movlw	128
  6655  1664  06F2               	xorwf	___ftneg@f1+2,f
  6656  1665  0008               	return
  6657  1666                     __end_of___ftneg:	
  6658                           
  6659                           	psect	text18
  6660  173E                     __ptext18:	
  6661 ;; *************** function ___ftge *****************
  6662 ;; Defined at:
  6663 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;  ff1             3    0[COMMON] float 
  6666 ;;  ff2             3    3[COMMON] float 
  6667 ;; Auto vars:     Size  Location     Type
  6668 ;;		None
  6669 ;; Return value:  Size  Location     Type
  6670 ;;		None               void
  6671 ;; Registers used:
  6672 ;;		wreg, status,2, status,0
  6673 ;; Tracked objects:
  6674 ;;		On entry : 0/0
  6675 ;;		On exit  : 0/0
  6676 ;;		Unchanged: 0/0
  6677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6678 ;;      Params:         6       0       0       0       0       0       0       0
  6679 ;;      Locals:         0       0       0       0       0       0       0       0
  6680 ;;      Temps:          3       0       0       0       0       0       0       0
  6681 ;;      Totals:         9       0       0       0       0       0       0       0
  6682 ;;Total ram usage:        9 bytes
  6683 ;; Hardware stack levels used:    1
  6684 ;; This function calls:
  6685 ;;		Nothing
  6686 ;; This function is called by:
  6687 ;;		_sprintf
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           
  6692                           ;psect for function ___ftge
  6693  173E                     ___ftge:	
  6694                           
  6695                           ;incstack = 0
  6696                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6697  173E  1FF2               	btfss	___ftge@ff1+2,7
  6698  173F  2F54               	goto	l2213
  6699  1740  0970               	comf	___ftge@ff1,w
  6700  1741  00F6               	movwf	??___ftge
  6701  1742  0971               	comf	___ftge@ff1+1,w
  6702  1743  00F7               	movwf	??___ftge+1
  6703  1744  0972               	comf	___ftge@ff1+2,w
  6704  1745  00F8               	movwf	??___ftge+2
  6705  1746  0AF6               	incf	??___ftge,f
  6706  1747  1903               	skipnz
  6707  1748  0AF7               	incf	??___ftge+1,f
  6708  1749  1903               	skipnz
  6709  174A  0AF8               	incf	??___ftge+2,f
  6710  174B  3000               	movlw	0
  6711  174C  0776               	addwf	??___ftge,w
  6712  174D  00F0               	movwf	___ftge@ff1
  6713  174E  3000               	movlw	0
  6714  174F  3D77               	addwfc	??___ftge+1,w
  6715  1750  00F1               	movwf	___ftge@ff1+1
  6716  1751  3080               	movlw	128
  6717  1752  3D78               	addwfc	??___ftge+2,w
  6718  1753  00F2               	movwf	___ftge@ff1+2
  6719  1754                     l2213:	
  6720  1754  1FF5               	btfss	___ftge@ff2+2,7
  6721  1755  2F6A               	goto	l2217
  6722  1756  0973               	comf	___ftge@ff2,w
  6723  1757  00F6               	movwf	??___ftge
  6724  1758  0974               	comf	___ftge@ff2+1,w
  6725  1759  00F7               	movwf	??___ftge+1
  6726  175A  0975               	comf	___ftge@ff2+2,w
  6727  175B  00F8               	movwf	??___ftge+2
  6728  175C  0AF6               	incf	??___ftge,f
  6729  175D  1903               	skipnz
  6730  175E  0AF7               	incf	??___ftge+1,f
  6731  175F  1903               	skipnz
  6732  1760  0AF8               	incf	??___ftge+2,f
  6733  1761  3000               	movlw	0
  6734  1762  0776               	addwf	??___ftge,w
  6735  1763  00F3               	movwf	___ftge@ff2
  6736  1764  3000               	movlw	0
  6737  1765  3D77               	addwfc	??___ftge+1,w
  6738  1766  00F4               	movwf	___ftge@ff2+1
  6739  1767  3080               	movlw	128
  6740  1768  3D78               	addwfc	??___ftge+2,w
  6741  1769  00F5               	movwf	___ftge@ff2+2
  6742  176A                     l2217:	
  6743  176A  3080               	movlw	128
  6744  176B  06F2               	xorwf	___ftge@ff1+2,f
  6745  176C  3080               	movlw	128
  6746  176D  06F5               	xorwf	___ftge@ff2+2,f
  6747  176E  0875               	movf	___ftge@ff2+2,w
  6748  176F  0272               	subwf	___ftge@ff1+2,w
  6749  1770  1D03               	skipz
  6750  1771  0008               	return
  6751  1772  0874               	movf	___ftge@ff2+1,w
  6752  1773  0271               	subwf	___ftge@ff1+1,w
  6753  1774  1D03               	skipz
  6754  1775  0008               	return
  6755  1776  0873               	movf	___ftge@ff2,w
  6756  1777  0270               	subwf	___ftge@ff1,w
  6757  1778  0008               	return
  6758  1779                     __end_of___ftge:	
  6759                           
  6760                           	psect	text19
  6761  1689                     __ptext19:	
  6762 ;; *************** function ___lwtoft *****************
  6763 ;; Defined at:
  6764 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwtoft.c"
  6765 ;; Parameters:    Size  Location     Type
  6766 ;;  c               2    8[COMMON] unsigned int 
  6767 ;; Auto vars:     Size  Location     Type
  6768 ;;		None
  6769 ;; Return value:  Size  Location     Type
  6770 ;;                  3    8[COMMON] float 
  6771 ;; Registers used:
  6772 ;;		wreg, status,2, status,0, pclath, cstack
  6773 ;; Tracked objects:
  6774 ;;		On entry : 0/0
  6775 ;;		On exit  : 0/0
  6776 ;;		Unchanged: 0/0
  6777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6778 ;;      Params:         3       0       0       0       0       0       0       0
  6779 ;;      Locals:         0       0       0       0       0       0       0       0
  6780 ;;      Temps:          1       0       0       0       0       0       0       0
  6781 ;;      Totals:         4       0       0       0       0       0       0       0
  6782 ;;Total ram usage:        4 bytes
  6783 ;; Hardware stack levels used:    1
  6784 ;; Hardware stack levels required when called:    1
  6785 ;; This function calls:
  6786 ;;		___ftpack
  6787 ;; This function is called by:
  6788 ;;		_main
  6789 ;; This function uses a non-reentrant model
  6790 ;;
  6791                           
  6792                           
  6793                           ;psect for function ___lwtoft
  6794  1689                     ___lwtoft:	
  6795                           
  6796                           ;incstack = 0
  6797                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  6798  1689  0878               	movf	___lwtoft@c,w
  6799  168A  00F0               	movwf	___ftpack@arg
  6800  168B  0879               	movf	___lwtoft@c+1,w
  6801  168C  00F1               	movwf	___ftpack@arg+1
  6802  168D  01F2               	clrf	___ftpack@arg+2
  6803  168E  308E               	movlw	142
  6804  168F  00FB               	movwf	??___lwtoft
  6805  1690  087B               	movf	??___lwtoft,w
  6806  1691  00F3               	movwf	___ftpack@exp
  6807  1692  01F4               	clrf	___ftpack@sign
  6808  1693  3189  2175         	fcall	___ftpack
  6809  1695  0870               	movf	?___ftpack,w
  6810  1696  00F8               	movwf	?___lwtoft
  6811  1697  0871               	movf	?___ftpack+1,w
  6812  1698  00F9               	movwf	?___lwtoft+1
  6813  1699  0872               	movf	?___ftpack+2,w
  6814  169A  00FA               	movwf	?___lwtoft+2
  6815  169B  0008               	return
  6816  169C                     __end_of___lwtoft:	
  6817                           
  6818                           	psect	text20
  6819  0A60                     __ptext20:	
  6820 ;; *************** function ___ftdiv *****************
  6821 ;; Defined at:
  6822 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  6823 ;; Parameters:    Size  Location     Type
  6824 ;;  f2              3    8[COMMON] float 
  6825 ;;  f1              3   11[COMMON] float 
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  f3              3    5[BANK0 ] float 
  6828 ;;  sign            1    9[BANK0 ] unsigned char 
  6829 ;;  exp             1    8[BANK0 ] unsigned char 
  6830 ;;  cntr            1    4[BANK0 ] unsigned char 
  6831 ;; Return value:  Size  Location     Type
  6832 ;;                  3    8[COMMON] float 
  6833 ;; Registers used:
  6834 ;;		wreg, status,2, status,0, pclath, cstack
  6835 ;; Tracked objects:
  6836 ;;		On entry : 0/0
  6837 ;;		On exit  : 0/0
  6838 ;;		Unchanged: 0/0
  6839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6840 ;;      Params:         6       0       0       0       0       0       0       0
  6841 ;;      Locals:         0       6       0       0       0       0       0       0
  6842 ;;      Temps:          0       4       0       0       0       0       0       0
  6843 ;;      Totals:         6      10       0       0       0       0       0       0
  6844 ;;Total ram usage:       16 bytes
  6845 ;; Hardware stack levels used:    1
  6846 ;; Hardware stack levels required when called:    1
  6847 ;; This function calls:
  6848 ;;		___ftpack
  6849 ;; This function is called by:
  6850 ;;		_main
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           
  6855                           ;psect for function ___ftdiv
  6856  0A60                     ___ftdiv:	
  6857                           
  6858                           ;incstack = 0
  6859                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6860  0A60  087B               	movf	___ftdiv@f1,w
  6861  0A61  0020               	movlb	0	; select bank0
  6862  0A62  00A0               	movwf	??___ftdiv
  6863  0A63  087C               	movf	___ftdiv@f1+1,w
  6864  0A64  00A1               	movwf	??___ftdiv+1
  6865  0A65  087D               	movf	___ftdiv@f1+2,w
  6866  0A66  00A2               	movwf	??___ftdiv+2
  6867  0A67  1003               	clrc
  6868  0A68  0D21               	rlf	??___ftdiv+1,w
  6869  0A69  0D22               	rlf	??___ftdiv+2,w
  6870  0A6A  00A3               	movwf	??___ftdiv+3
  6871  0A6B  0823               	movf	??___ftdiv+3,w
  6872  0A6C  00A8               	movwf	___ftdiv@exp
  6873  0A6D  0828               	movf	___ftdiv@exp,w
  6874  0A6E  1D03               	btfss	3,2
  6875  0A6F  2A77               	goto	l2605
  6876  0A70  3000               	movlw	0
  6877  0A71  00F8               	movwf	?___ftdiv
  6878  0A72  3000               	movlw	0
  6879  0A73  00F9               	movwf	?___ftdiv+1
  6880  0A74  3000               	movlw	0
  6881  0A75  00FA               	movwf	?___ftdiv+2
  6882  0A76  0008               	return
  6883  0A77                     l2605:	
  6884  0A77  0878               	movf	___ftdiv@f2,w
  6885  0A78  00A0               	movwf	??___ftdiv
  6886  0A79  0879               	movf	___ftdiv@f2+1,w
  6887  0A7A  00A1               	movwf	??___ftdiv+1
  6888  0A7B  087A               	movf	___ftdiv@f2+2,w
  6889  0A7C  00A2               	movwf	??___ftdiv+2
  6890  0A7D  1003               	clrc
  6891  0A7E  0D21               	rlf	??___ftdiv+1,w
  6892  0A7F  0D22               	rlf	??___ftdiv+2,w
  6893  0A80  00A3               	movwf	??___ftdiv+3
  6894  0A81  0823               	movf	??___ftdiv+3,w
  6895  0A82  00A9               	movwf	___ftdiv@sign
  6896  0A83  0829               	movf	___ftdiv@sign,w
  6897  0A84  1D03               	btfss	3,2
  6898  0A85  2A8D               	goto	l2611
  6899  0A86  3000               	movlw	0
  6900  0A87  00F8               	movwf	?___ftdiv
  6901  0A88  3000               	movlw	0
  6902  0A89  00F9               	movwf	?___ftdiv+1
  6903  0A8A  3000               	movlw	0
  6904  0A8B  00FA               	movwf	?___ftdiv+2
  6905  0A8C  0008               	return
  6906  0A8D                     l2611:	
  6907  0A8D  3000               	movlw	0
  6908  0A8E  00A5               	movwf	___ftdiv@f3
  6909  0A8F  3000               	movlw	0
  6910  0A90  00A6               	movwf	___ftdiv@f3+1
  6911  0A91  3000               	movlw	0
  6912  0A92  00A7               	movwf	___ftdiv@f3+2
  6913  0A93  3089               	movlw	137
  6914  0A94  0729               	addwf	___ftdiv@sign,w
  6915  0A95  00A0               	movwf	??___ftdiv
  6916  0A96  0820               	movf	??___ftdiv,w
  6917  0A97  02A8               	subwf	___ftdiv@exp,f
  6918  0A98  087B               	movf	___ftdiv@f1,w
  6919  0A99  00A0               	movwf	??___ftdiv
  6920  0A9A  087C               	movf	___ftdiv@f1+1,w
  6921  0A9B  00A1               	movwf	??___ftdiv+1
  6922  0A9C  087D               	movf	___ftdiv@f1+2,w
  6923  0A9D  00A2               	movwf	??___ftdiv+2
  6924  0A9E  3010               	movlw	16
  6925  0A9F                     u3595:	
  6926  0A9F  36A2               	lsrf	??___ftdiv+2,f
  6927  0AA0  0CA1               	rrf	??___ftdiv+1,f
  6928  0AA1  0CA0               	rrf	??___ftdiv,f
  6929  0AA2  0B89               	decfsz	9,f
  6930  0AA3  2A9F               	goto	u3595
  6931  0AA4  0820               	movf	??___ftdiv,w
  6932  0AA5  00A3               	movwf	??___ftdiv+3
  6933  0AA6  0823               	movf	??___ftdiv+3,w
  6934  0AA7  00A9               	movwf	___ftdiv@sign
  6935  0AA8  0878               	movf	___ftdiv@f2,w
  6936  0AA9  00A0               	movwf	??___ftdiv
  6937  0AAA  0879               	movf	___ftdiv@f2+1,w
  6938  0AAB  00A1               	movwf	??___ftdiv+1
  6939  0AAC  087A               	movf	___ftdiv@f2+2,w
  6940  0AAD  00A2               	movwf	??___ftdiv+2
  6941  0AAE  3010               	movlw	16
  6942  0AAF                     u3605:	
  6943  0AAF  36A2               	lsrf	??___ftdiv+2,f
  6944  0AB0  0CA1               	rrf	??___ftdiv+1,f
  6945  0AB1  0CA0               	rrf	??___ftdiv,f
  6946  0AB2  0B89               	decfsz	9,f
  6947  0AB3  2AAF               	goto	u3605
  6948  0AB4  0820               	movf	??___ftdiv,w
  6949  0AB5  00A3               	movwf	??___ftdiv+3
  6950  0AB6  0823               	movf	??___ftdiv+3,w
  6951  0AB7  06A9               	xorwf	___ftdiv@sign,f
  6952  0AB8  3080               	movlw	128
  6953  0AB9  00A0               	movwf	??___ftdiv
  6954  0ABA  0820               	movf	??___ftdiv,w
  6955  0ABB  05A9               	andwf	___ftdiv@sign,f
  6956  0ABC  17FC               	bsf	___ftdiv@f1+1,7
  6957  0ABD  30FF               	movlw	255
  6958  0ABE  05FB               	andwf	___ftdiv@f1,f
  6959  0ABF  30FF               	movlw	255
  6960  0AC0  05FC               	andwf	___ftdiv@f1+1,f
  6961  0AC1  3000               	movlw	0
  6962  0AC2  05FD               	andwf	___ftdiv@f1+2,f
  6963  0AC3  17F9               	bsf	___ftdiv@f2+1,7
  6964  0AC4  30FF               	movlw	255
  6965  0AC5  05F8               	andwf	___ftdiv@f2,f
  6966  0AC6  30FF               	movlw	255
  6967  0AC7  05F9               	andwf	___ftdiv@f2+1,f
  6968  0AC8  3000               	movlw	0
  6969  0AC9  05FA               	andwf	___ftdiv@f2+2,f
  6970  0ACA  3018               	movlw	24
  6971  0ACB  00A0               	movwf	??___ftdiv
  6972  0ACC  0820               	movf	??___ftdiv,w
  6973  0ACD  00A4               	movwf	___ftdiv@cntr
  6974  0ACE                     l2625:	
  6975  0ACE  3001               	movlw	1
  6976  0ACF                     u3615:	
  6977  0ACF  35A5               	lslf	___ftdiv@f3,f
  6978  0AD0  0DA6               	rlf	___ftdiv@f3+1,f
  6979  0AD1  0DA7               	rlf	___ftdiv@f3+2,f
  6980  0AD2  0B89               	decfsz	9,f
  6981  0AD3  2ACF               	goto	u3615
  6982  0AD4  087A               	movf	___ftdiv@f2+2,w
  6983  0AD5  027D               	subwf	___ftdiv@f1+2,w
  6984  0AD6  1D03               	skipz
  6985  0AD7  2ADE               	goto	u3625
  6986  0AD8  0879               	movf	___ftdiv@f2+1,w
  6987  0AD9  027C               	subwf	___ftdiv@f1+1,w
  6988  0ADA  1D03               	skipz
  6989  0ADB  2ADE               	goto	u3625
  6990  0ADC  0878               	movf	___ftdiv@f2,w
  6991  0ADD  027B               	subwf	___ftdiv@f1,w
  6992  0ADE                     u3625:	
  6993  0ADE  1C03               	skipc
  6994  0ADF  2AE7               	goto	l2633
  6995  0AE0  0878               	movf	___ftdiv@f2,w
  6996  0AE1  02FB               	subwf	___ftdiv@f1,f
  6997  0AE2  0879               	movf	___ftdiv@f2+1,w
  6998  0AE3  3BFC               	subwfb	___ftdiv@f1+1,f
  6999  0AE4  087A               	movf	___ftdiv@f2+2,w
  7000  0AE5  3BFD               	subwfb	___ftdiv@f1+2,f
  7001  0AE6  1425               	bsf	___ftdiv@f3,0
  7002  0AE7                     l2633:	
  7003  0AE7  3001               	movlw	1
  7004  0AE8                     u3635:	
  7005  0AE8  35FB               	lslf	___ftdiv@f1,f
  7006  0AE9  0DFC               	rlf	___ftdiv@f1+1,f
  7007  0AEA  0DFD               	rlf	___ftdiv@f1+2,f
  7008  0AEB  0B89               	decfsz	9,f
  7009  0AEC  2AE8               	goto	u3635
  7010  0AED  3001               	movlw	1
  7011  0AEE  02A4               	subwf	___ftdiv@cntr,f
  7012  0AEF  1D03               	btfss	3,2
  7013  0AF0  2ACE               	goto	l2625
  7014  0AF1  0825               	movf	___ftdiv@f3,w
  7015  0AF2  00F0               	movwf	___ftpack@arg
  7016  0AF3  0826               	movf	___ftdiv@f3+1,w
  7017  0AF4  00F1               	movwf	___ftpack@arg+1
  7018  0AF5  0827               	movf	___ftdiv@f3+2,w
  7019  0AF6  00F2               	movwf	___ftpack@arg+2
  7020  0AF7  0828               	movf	___ftdiv@exp,w
  7021  0AF8  00A0               	movwf	??___ftdiv
  7022  0AF9  0820               	movf	??___ftdiv,w
  7023  0AFA  00F3               	movwf	___ftpack@exp
  7024  0AFB  0829               	movf	___ftdiv@sign,w
  7025  0AFC  00A1               	movwf	??___ftdiv+1
  7026  0AFD  0821               	movf	??___ftdiv+1,w
  7027  0AFE  00F4               	movwf	___ftpack@sign
  7028  0AFF  3189  2175         	fcall	___ftpack
  7029  0B01  0870               	movf	?___ftpack,w
  7030  0B02  00F8               	movwf	?___ftdiv
  7031  0B03  0871               	movf	?___ftpack+1,w
  7032  0B04  00F9               	movwf	?___ftdiv+1
  7033  0B05  0872               	movf	?___ftpack+2,w
  7034  0B06  00FA               	movwf	?___ftdiv+2
  7035  0B07  0008               	return
  7036  0B08                     __end_of___ftdiv:	
  7037                           
  7038                           	psect	text21
  7039  0975                     __ptext21:	
  7040 ;; *************** function ___ftpack *****************
  7041 ;; Defined at:
  7042 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  7043 ;; Parameters:    Size  Location     Type
  7044 ;;  arg             3    0[COMMON] unsigned um
  7045 ;;  exp             1    3[COMMON] unsigned char 
  7046 ;;  sign            1    4[COMMON] unsigned char 
  7047 ;; Auto vars:     Size  Location     Type
  7048 ;;		None
  7049 ;; Return value:  Size  Location     Type
  7050 ;;                  3    0[COMMON] float 
  7051 ;; Registers used:
  7052 ;;		wreg, status,2, status,0
  7053 ;; Tracked objects:
  7054 ;;		On entry : 0/0
  7055 ;;		On exit  : 0/0
  7056 ;;		Unchanged: 0/0
  7057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7058 ;;      Params:         5       0       0       0       0       0       0       0
  7059 ;;      Locals:         0       0       0       0       0       0       0       0
  7060 ;;      Temps:          3       0       0       0       0       0       0       0
  7061 ;;      Totals:         8       0       0       0       0       0       0       0
  7062 ;;Total ram usage:        8 bytes
  7063 ;; Hardware stack levels used:    1
  7064 ;; This function calls:
  7065 ;;		Nothing
  7066 ;; This function is called by:
  7067 ;;		___ftadd
  7068 ;;		___ftdiv
  7069 ;;		___ftmul
  7070 ;;		___lltoft
  7071 ;;		___lwtoft
  7072 ;; This function uses a non-reentrant model
  7073 ;;
  7074                           
  7075                           
  7076                           ;psect for function ___ftpack
  7077  0975                     ___ftpack:	
  7078                           
  7079                           ;incstack = 0
  7080                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7081  0975  0873               	movf	___ftpack@exp,w
  7082  0976  1903               	btfsc	3,2
  7083  0977  297D               	goto	l1745
  7084  0978  0872               	movf	___ftpack@arg+2,w
  7085  0979  0471               	iorwf	___ftpack@arg+1,w
  7086  097A  0470               	iorwf	___ftpack@arg,w
  7087  097B  1D03               	skipz
  7088  097C  298E               	goto	l1751
  7089  097D                     l1745:	
  7090  097D  3000               	movlw	0
  7091  097E  00F0               	movwf	?___ftpack
  7092  097F  3000               	movlw	0
  7093  0980  00F1               	movwf	?___ftpack+1
  7094  0981  3000               	movlw	0
  7095  0982  00F2               	movwf	?___ftpack+2
  7096  0983  0008               	return
  7097  0984                     l1749:	
  7098  0984  3001               	movlw	1
  7099  0985  00F5               	movwf	??___ftpack
  7100  0986  0875               	movf	??___ftpack,w
  7101  0987  07F3               	addwf	___ftpack@exp,f
  7102  0988  3001               	movlw	1
  7103  0989                     u1855:	
  7104  0989  36F2               	lsrf	___ftpack@arg+2,f
  7105  098A  0CF1               	rrf	___ftpack@arg+1,f
  7106  098B  0CF0               	rrf	___ftpack@arg,f
  7107  098C  0B89               	decfsz	9,f
  7108  098D  2989               	goto	u1855
  7109  098E                     l1751:	
  7110  098E  30FE               	movlw	254
  7111  098F  0572               	andwf	___ftpack@arg+2,w
  7112  0990  1903               	btfsc	3,2
  7113  0991  29A7               	goto	l514
  7114  0992  2984               	goto	l1749
  7115  0993                     l1753:	
  7116  0993  3001               	movlw	1
  7117  0994  00F5               	movwf	??___ftpack
  7118  0995  0875               	movf	??___ftpack,w
  7119  0996  07F3               	addwf	___ftpack@exp,f
  7120  0997  3001               	movlw	1
  7121  0998  07F0               	addwf	___ftpack@arg,f
  7122  0999  3000               	movlw	0
  7123  099A  1803               	skipnc
  7124  099B  3001               	movlw	1
  7125  099C  07F1               	addwf	___ftpack@arg+1,f
  7126  099D  3000               	movlw	0
  7127  099E  1803               	skipnc
  7128  099F  3001               	movlw	1
  7129  09A0  07F2               	addwf	___ftpack@arg+2,f
  7130  09A1  3001               	movlw	1
  7131  09A2                     u1875:	
  7132  09A2  36F2               	lsrf	___ftpack@arg+2,f
  7133  09A3  0CF1               	rrf	___ftpack@arg+1,f
  7134  09A4  0CF0               	rrf	___ftpack@arg,f
  7135  09A5  0B89               	decfsz	9,f
  7136  09A6  29A2               	goto	u1875
  7137  09A7                     l514:	
  7138  09A7  30FF               	movlw	255
  7139  09A8  0572               	andwf	___ftpack@arg+2,w
  7140  09A9  1903               	btfsc	3,2
  7141  09AA  29B4               	goto	l1761
  7142  09AB  2993               	goto	l1753
  7143  09AC                     l1759:	
  7144  09AC  3001               	movlw	1
  7145  09AD  02F3               	subwf	___ftpack@exp,f
  7146  09AE  3001               	movlw	1
  7147  09AF                     u1895:	
  7148  09AF  35F0               	lslf	___ftpack@arg,f
  7149  09B0  0DF1               	rlf	___ftpack@arg+1,f
  7150  09B1  0DF2               	rlf	___ftpack@arg+2,f
  7151  09B2  0B89               	decfsz	9,f
  7152  09B3  29AF               	goto	u1895
  7153  09B4                     l1761:	
  7154  09B4  1BF1               	btfsc	___ftpack@arg+1,7
  7155  09B5  29BA               	goto	l521
  7156  09B6  3002               	movlw	2
  7157  09B7  0273               	subwf	___ftpack@exp,w
  7158  09B8  1803               	skipnc
  7159  09B9  29AC               	goto	l1759
  7160  09BA                     l521:	
  7161  09BA  1873               	btfsc	___ftpack@exp,0
  7162  09BB  29C2               	goto	l522
  7163  09BC  30FF               	movlw	255
  7164  09BD  05F0               	andwf	___ftpack@arg,f
  7165  09BE  307F               	movlw	127
  7166  09BF  05F1               	andwf	___ftpack@arg+1,f
  7167  09C0  30FF               	movlw	255
  7168  09C1  05F2               	andwf	___ftpack@arg+2,f
  7169  09C2                     l522:	
  7170  09C2  1003               	clrc
  7171  09C3  0CF3               	rrf	___ftpack@exp,f
  7172  09C4  0873               	movf	___ftpack@exp,w
  7173  09C5  00F5               	movwf	??___ftpack
  7174  09C6  01F6               	clrf	??___ftpack+1
  7175  09C7  01F7               	clrf	??___ftpack+2
  7176  09C8  3010               	movlw	16
  7177  09C9                     u1935:	
  7178  09C9  35F5               	lslf	??___ftpack,f
  7179  09CA  0DF6               	rlf	??___ftpack+1,f
  7180  09CB  0DF7               	rlf	??___ftpack+2,f
  7181  09CC  0B89               	decfsz	9,f
  7182  09CD  29C9               	goto	u1935
  7183  09CE  0875               	movf	??___ftpack,w
  7184  09CF  04F0               	iorwf	___ftpack@arg,f
  7185  09D0  0876               	movf	??___ftpack+1,w
  7186  09D1  04F1               	iorwf	___ftpack@arg+1,f
  7187  09D2  0877               	movf	??___ftpack+2,w
  7188  09D3  04F2               	iorwf	___ftpack@arg+2,f
  7189  09D4  0874               	movf	___ftpack@sign,w
  7190  09D5  1903               	btfsc	3,2
  7191  09D6  0008               	return
  7192  09D7  17F2               	bsf	___ftpack@arg+2,7
  7193  09D8  0008               	return
  7194  09D9                     __end_of___ftpack:	
  7195                           
  7196                           	psect	text22
  7197  0921                     __ptext22:	
  7198 ;; *************** function _TextLCD_Puts *****************
  7199 ;; Defined at:
  7200 ;;		line 38 in file "TextLCD.c"
  7201 ;; Parameters:    Size  Location     Type
  7202 ;;  line            1    wreg     unsigned char 
  7203 ;;  idx             1    4[COMMON] unsigned char 
  7204 ;;  data            1    5[COMMON] PTR unsigned char 
  7205 ;;		 -> str(17), 
  7206 ;;  length_or_ty    1    6[COMMON] unsigned char 
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;  line            1    8[COMMON] unsigned char 
  7209 ;;  address         1    9[COMMON] unsigned char 
  7210 ;; Return value:  Size  Location     Type
  7211 ;;                  1    wreg      void 
  7212 ;; Registers used:
  7213 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7214 ;; Tracked objects:
  7215 ;;		On entry : 0/0
  7216 ;;		On exit  : 0/0
  7217 ;;		Unchanged: 0/0
  7218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7219 ;;      Params:         3       0       0       0       0       0       0       0
  7220 ;;      Locals:         2       0       0       0       0       0       0       0
  7221 ;;      Temps:          1       0       0       0       0       0       0       0
  7222 ;;      Totals:         6       0       0       0       0       0       0       0
  7223 ;;Total ram usage:        6 bytes
  7224 ;; Hardware stack levels used:    1
  7225 ;; Hardware stack levels required when called:    3
  7226 ;; This function calls:
  7227 ;;		_TextLCD_CMD
  7228 ;;		_TextLCD_PutChar
  7229 ;; This function is called by:
  7230 ;;		_main
  7231 ;; This function uses a non-reentrant model
  7232 ;;
  7233                           
  7234                           
  7235                           ;psect for function _TextLCD_Puts
  7236  0921                     _TextLCD_Puts:	
  7237                           
  7238                           ;incstack = 0
  7239                           ; Regs used in _TextLCD_Puts: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7240                           ;TextLCD_Puts@line stored from wreg
  7241  0921  00F8               	movwf	TextLCD_Puts@line
  7242                           
  7243                           ;TextLCD.c: 40: const uint8_t DDRAM_Start_Address[4]={0x80, 0xC0, 0x90, 0xD0};
  7244                           ;TextLCD.c: 41: line&=0b11;
  7245  0922  3003               	movlw	3
  7246  0923  00F7               	movwf	??_TextLCD_Puts
  7247  0924  0877               	movf	??_TextLCD_Puts,w
  7248  0925  05F8               	andwf	TextLCD_Puts@line,f
  7249                           
  7250                           ;TextLCD.c: 42: idx&=0b1111;
  7251  0926  300F               	movlw	15
  7252  0927  00F7               	movwf	??_TextLCD_Puts
  7253  0928  0877               	movf	??_TextLCD_Puts,w
  7254  0929  05F4               	andwf	TextLCD_Puts@idx,f
  7255                           
  7256                           ;TextLCD.c: 43: uint8_t address=DDRAM_Start_Address[line]+idx;
  7257  092A  0878               	movf	TextLCD_Puts@line,w
  7258  092B  3E76               	addlw	low (TextLCD_Puts@DDRAM_Start_Address| (0+32768))
  7259  092C  0084               	movwf	4
  7260  092D  3098               	movlw	high (TextLCD_Puts@DDRAM_Start_Address| (0+32768))
  7261  092E  1803               	skipnc
  7262  092F  3E01               	addlw	1
  7263  0930  0085               	movwf	5
  7264  0931  0800               	movf	0,w	;code access
  7265  0932  0774               	addwf	TextLCD_Puts@idx,w
  7266  0933  00F7               	movwf	??_TextLCD_Puts
  7267  0934  0877               	movf	??_TextLCD_Puts,w
  7268  0935  00F9               	movwf	TextLCD_Puts@address
  7269                           
  7270                           ;TextLCD.c: 44: TextLCD_CMD(address);
  7271  0936  0879               	movf	TextLCD_Puts@address,w
  7272  0937  3196  269C  3189   	fcall	_TextLCD_CMD
  7273                           
  7274                           ;TextLCD.c: 45: _delay((unsigned long)((50)*(32000000/4000000.0)));
  7275  093A  3085               	movlw	133
  7276  093B                     u3667:	
  7277  093B  0B89               	decfsz	9,f
  7278  093C  293B               	goto	u3667
  7279  093D  0000               	nop
  7280                           
  7281                           ;TextLCD.c: 47: if(length_or_type==0) while(*data!=0) TextLCD_PutChar(*data++);
  7282  093E  0876               	movf	TextLCD_Puts@length_or_type,w
  7283  093F  1903               	btfsc	3,2
  7284  0940  294D               	goto	l2583
  7285  0941  2954               	goto	l2585
  7286  0942                     l2579:	
  7287  0942  0875               	movf	TextLCD_Puts@data,w
  7288  0943  0086               	movwf	6
  7289  0944  0187               	clrf	7
  7290  0945  0801               	movf	1,w
  7291  0946  3196  2666  3189   	fcall	_TextLCD_PutChar
  7292  0949  3001               	movlw	1
  7293  094A  00F7               	movwf	??_TextLCD_Puts
  7294  094B  0877               	movf	??_TextLCD_Puts,w
  7295  094C  07F5               	addwf	TextLCD_Puts@data,f
  7296  094D                     l2583:	
  7297  094D  0875               	movf	TextLCD_Puts@data,w
  7298  094E  0086               	movwf	6
  7299  094F  0187               	clrf	7
  7300  0950  0801               	movf	1,w
  7301  0951  1903               	btfsc	3,2
  7302  0952  296D               	goto	l2597
  7303  0953  2942               	goto	l2579
  7304  0954                     l2585:	
  7305                           
  7306                           ;TextLCD.c: 48: else for(address=0; address<length_or_type; address++) TextLCD_PutChar(*
      +                          data++);
  7307  0954  01F9               	clrf	TextLCD_Puts@address
  7308  0955                     l2593:	
  7309  0955  0876               	movf	TextLCD_Puts@length_or_type,w
  7310  0956  0279               	subwf	TextLCD_Puts@address,w
  7311  0957  1803               	btfsc	3,0
  7312  0958  296D               	goto	l2597
  7313  0959  0875               	movf	TextLCD_Puts@data,w
  7314  095A  0086               	movwf	6
  7315  095B  0187               	clrf	7
  7316  095C  0801               	movf	1,w
  7317  095D  3196  2666  3189   	fcall	_TextLCD_PutChar
  7318  0960  3001               	movlw	1
  7319  0961  00F7               	movwf	??_TextLCD_Puts
  7320  0962  0877               	movf	??_TextLCD_Puts,w
  7321  0963  07F5               	addwf	TextLCD_Puts@data,f
  7322  0964  3001               	movlw	1
  7323  0965  00F7               	movwf	??_TextLCD_Puts
  7324  0966  0877               	movf	??_TextLCD_Puts,w
  7325  0967  07F9               	addwf	TextLCD_Puts@address,f
  7326  0968  2955               	goto	l2593
  7327  0969                     l2595:	
  7328                           ;TextLCD.c: 49: while(16>idx++) TextLCD_PutChar(' ');
  7329                           
  7330  0969  3020               	movlw	32
  7331  096A  3196  2666  3189   	fcall	_TextLCD_PutChar
  7332  096D                     l2597:	
  7333  096D  0874               	movf	TextLCD_Puts@idx,w
  7334  096E  0AF4               	incf	TextLCD_Puts@idx,f
  7335  096F  00F7               	movwf	??_TextLCD_Puts
  7336  0970  3010               	movlw	16
  7337  0971  0277               	subwf	??_TextLCD_Puts,w
  7338  0972  1803               	btfsc	3,0
  7339  0973  0008               	return
  7340  0974  2969               	goto	l2595
  7341  0975                     __end_of_TextLCD_Puts:	
  7342                           
  7343                           	psect	text23
  7344  1666                     __ptext23:	
  7345 ;; *************** function _TextLCD_PutChar *****************
  7346 ;; Defined at:
  7347 ;;		line 31 in file "TextLCD.c"
  7348 ;; Parameters:    Size  Location     Type
  7349 ;;  data            1    wreg     unsigned char 
  7350 ;; Auto vars:     Size  Location     Type
  7351 ;;  data            1    3[COMMON] unsigned char 
  7352 ;; Return value:  Size  Location     Type
  7353 ;;                  1    wreg      void 
  7354 ;; Registers used:
  7355 ;;		wreg, status,2, status,0, pclath, cstack
  7356 ;; Tracked objects:
  7357 ;;		On entry : 0/0
  7358 ;;		On exit  : 0/0
  7359 ;;		Unchanged: 0/0
  7360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7361 ;;      Params:         0       0       0       0       0       0       0       0
  7362 ;;      Locals:         1       0       0       0       0       0       0       0
  7363 ;;      Temps:          0       0       0       0       0       0       0       0
  7364 ;;      Totals:         1       0       0       0       0       0       0       0
  7365 ;;Total ram usage:        1 bytes
  7366 ;; Hardware stack levels used:    1
  7367 ;; Hardware stack levels required when called:    2
  7368 ;; This function calls:
  7369 ;;		_TextLCD_CMD
  7370 ;; This function is called by:
  7371 ;;		_TextLCD_Puts
  7372 ;; This function uses a non-reentrant model
  7373 ;;
  7374                           
  7375                           
  7376                           ;psect for function _TextLCD_PutChar
  7377  1666                     _TextLCD_PutChar:	
  7378                           
  7379                           ;incstack = 0
  7380                           ; Regs used in _TextLCD_PutChar: [wreg+status,2+status,0+pclath+cstack]
  7381                           ;TextLCD_PutChar@data stored from wreg
  7382  1666  00F3               	movwf	TextLCD_PutChar@data
  7383                           
  7384                           ;TextLCD.c: 33: LATCbits.LATC0=1;
  7385  1667  0022               	movlb	2	; select bank2
  7386  1668  140E               	bsf	14,0	;volatile
  7387                           
  7388                           ;TextLCD.c: 34: TextLCD_CMD(data);
  7389  1669  0873               	movf	TextLCD_PutChar@data,w
  7390  166A  3196  269C         	fcall	_TextLCD_CMD
  7391                           
  7392                           ;TextLCD.c: 35: LATCbits.LATC0=0;
  7393  166C  0022               	movlb	2	; select bank2
  7394  166D  100E               	bcf	14,0	;volatile
  7395  166E  0008               	return
  7396  166F                     __end_of_TextLCD_PutChar:	
  7397                           
  7398                           	psect	text24
  7399  0835                     __ptext24:	
  7400 ;; *************** function _TextLCD_Init *****************
  7401 ;; Defined at:
  7402 ;;		line 57 in file "TextLCD.c"
  7403 ;; Parameters:    Size  Location     Type
  7404 ;;		None
  7405 ;; Auto vars:     Size  Location     Type
  7406 ;;		None
  7407 ;; Return value:  Size  Location     Type
  7408 ;;                  1    wreg      void 
  7409 ;; Registers used:
  7410 ;;		wreg, status,2, status,0, pclath, cstack
  7411 ;; Tracked objects:
  7412 ;;		On entry : 0/0
  7413 ;;		On exit  : 0/0
  7414 ;;		Unchanged: 0/0
  7415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7416 ;;      Params:         0       0       0       0       0       0       0       0
  7417 ;;      Locals:         0       0       0       0       0       0       0       0
  7418 ;;      Temps:          2       0       0       0       0       0       0       0
  7419 ;;      Totals:         2       0       0       0       0       0       0       0
  7420 ;;Total ram usage:        2 bytes
  7421 ;; Hardware stack levels used:    1
  7422 ;; Hardware stack levels required when called:    2
  7423 ;; This function calls:
  7424 ;;		_TextLCD_4Bits_Write
  7425 ;;		_TextLCD_CMD
  7426 ;;		_TextLCD_Enable
  7427 ;; This function is called by:
  7428 ;;		_main
  7429 ;; This function uses a non-reentrant model
  7430 ;;
  7431                           
  7432                           
  7433                           ;psect for function _TextLCD_Init
  7434  0835                     _TextLCD_Init:	
  7435                           
  7436                           ;TextLCD.c: 59: _delay((unsigned long)((40)*(32000000/4000.0)));
  7437                           
  7438                           ;incstack = 0
  7439                           ; Regs used in _TextLCD_Init: [wreg+status,2+status,0+pclath+cstack]
  7440  0835  3002               	movlw	2
  7441  0836  00F4               	movwf	??_TextLCD_Init+1
  7442  0837  30A0               	movlw	160
  7443  0838  00F3               	movwf	??_TextLCD_Init
  7444  0839  3092               	movlw	146
  7445  083A                     u3677:	
  7446  083A  0B89               	decfsz	9,f
  7447  083B  283A               	goto	u3677
  7448  083C  0BF3               	decfsz	??_TextLCD_Init,f
  7449  083D  283A               	goto	u3677
  7450  083E  0BF4               	decfsz	??_TextLCD_Init+1,f
  7451  083F  283A               	goto	u3677
  7452  0840  3200               	nop2
  7453                           
  7454                           ;TextLCD.c: 60: TextLCD_4Bits_Write(0x03);
  7455  0841  3003               	movlw	3
  7456  0842  3197  2703  3188   	fcall	_TextLCD_4Bits_Write
  7457                           
  7458                           ;TextLCD.c: 61: TextLCD_Enable();
  7459  0845  3188  2001  3188   	fcall	_TextLCD_Enable
  7460                           
  7461                           ;TextLCD.c: 62: _delay((unsigned long)((5)*(32000000/4000.0)));
  7462  0848  3034               	movlw	52
  7463  0849  00F3               	movwf	??_TextLCD_Init
  7464  084A  30F2               	movlw	242
  7465  084B                     u3687:	
  7466  084B  0B89               	decfsz	9,f
  7467  084C  284B               	goto	u3687
  7468  084D  0BF3               	decfsz	??_TextLCD_Init,f
  7469  084E  284B               	goto	u3687
  7470                           
  7471                           ;TextLCD.c: 63: TextLCD_Enable();
  7472  084F  3188  2001  3188   	fcall	_TextLCD_Enable
  7473                           
  7474                           ;TextLCD.c: 64: _delay((unsigned long)((100)*(32000000/4000000.0)));
  7475  0852  30A0               	movlw	160
  7476  0853                     u3697:	
  7477  0853  3200               	nop2
  7478  0854  0B89               	decfsz	9,f
  7479  0855  2853               	goto	u3697
  7480                           
  7481                           ;TextLCD.c: 65: TextLCD_Enable();
  7482  0856  3188  2001  3188   	fcall	_TextLCD_Enable
  7483                           
  7484                           ;TextLCD.c: 66: TextLCD_4Bits_Write(0x02);
  7485  0859  3002               	movlw	2
  7486  085A  3197  2703  3188   	fcall	_TextLCD_4Bits_Write
  7487                           
  7488                           ;TextLCD.c: 67: TextLCD_Enable();
  7489  085D  3188  2001  3188   	fcall	_TextLCD_Enable
  7490                           
  7491                           ;TextLCD.c: 68: TextLCD_CMD(0x28);
  7492  0860  3028               	movlw	40
  7493  0861  3196  269C  3188   	fcall	_TextLCD_CMD
  7494                           
  7495                           ;TextLCD.c: 69: TextLCD_CMD(0x0c);
  7496  0864  300C               	movlw	12
  7497  0865  3196  269C  3188   	fcall	_TextLCD_CMD
  7498                           
  7499                           ;TextLCD.c: 70: TextLCD_CMD(0x06);
  7500  0868  3006               	movlw	6
  7501  0869  3196  269C  3188   	fcall	_TextLCD_CMD
  7502                           
  7503                           ;TextLCD.c: 71: TextLCD_CMD(0x01);
  7504  086C  3001               	movlw	1
  7505  086D  3196  269C  3188   	fcall	_TextLCD_CMD
  7506                           
  7507                           ;TextLCD.c: 72: _delay((unsigned long)((100)*(32000000/4000.0)));
  7508  0870  3005               	movlw	5
  7509  0871  00F4               	movwf	??_TextLCD_Init+1
  7510  0872  300F               	movlw	15
  7511  0873  00F3               	movwf	??_TextLCD_Init
  7512  0874  30F1               	movlw	241
  7513  0875                     u3707:	
  7514  0875  0B89               	decfsz	9,f
  7515  0876  2875               	goto	u3707
  7516  0877  0BF3               	decfsz	??_TextLCD_Init,f
  7517  0878  2875               	goto	u3707
  7518  0879  0BF4               	decfsz	??_TextLCD_Init+1,f
  7519  087A  2875               	goto	u3707
  7520  087B  0000               	nop
  7521  087C  0008               	return
  7522  087D                     __end_of_TextLCD_Init:	
  7523                           
  7524                           	psect	text25
  7525  169C                     __ptext25:	
  7526 ;; *************** function _TextLCD_CMD *****************
  7527 ;; Defined at:
  7528 ;;		line 23 in file "TextLCD.c"
  7529 ;; Parameters:    Size  Location     Type
  7530 ;;  cmd             1    wreg     unsigned char 
  7531 ;; Auto vars:     Size  Location     Type
  7532 ;;  cmd             1    2[COMMON] unsigned char 
  7533 ;; Return value:  Size  Location     Type
  7534 ;;                  1    wreg      void 
  7535 ;; Registers used:
  7536 ;;		wreg, status,2, status,0, pclath, cstack
  7537 ;; Tracked objects:
  7538 ;;		On entry : 0/0
  7539 ;;		On exit  : 0/0
  7540 ;;		Unchanged: 0/0
  7541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7542 ;;      Params:         0       0       0       0       0       0       0       0
  7543 ;;      Locals:         1       0       0       0       0       0       0       0
  7544 ;;      Temps:          1       0       0       0       0       0       0       0
  7545 ;;      Totals:         2       0       0       0       0       0       0       0
  7546 ;;Total ram usage:        2 bytes
  7547 ;; Hardware stack levels used:    1
  7548 ;; Hardware stack levels required when called:    1
  7549 ;; This function calls:
  7550 ;;		_TextLCD_4Bits_Write
  7551 ;;		_TextLCD_Enable
  7552 ;; This function is called by:
  7553 ;;		_TextLCD_PutChar
  7554 ;;		_TextLCD_Puts
  7555 ;;		_TextLCD_Init
  7556 ;;		_TextLCD_Clear
  7557 ;; This function uses a non-reentrant model
  7558 ;;
  7559                           
  7560                           
  7561                           ;psect for function _TextLCD_CMD
  7562  169C                     _TextLCD_CMD:	
  7563                           
  7564                           ;incstack = 0
  7565                           ; Regs used in _TextLCD_CMD: [wreg+status,2+status,0+pclath+cstack]
  7566                           ;TextLCD_CMD@cmd stored from wreg
  7567  169C  00F2               	movwf	TextLCD_CMD@cmd
  7568                           
  7569                           ;TextLCD.c: 25: TextLCD_4Bits_Write(cmd>>4);
  7570  169D  0872               	movf	TextLCD_CMD@cmd,w
  7571  169E  00F1               	movwf	??_TextLCD_CMD
  7572  169F  3004               	movlw	4
  7573  16A0                     u1955:	
  7574  16A0  36F1               	lsrf	??_TextLCD_CMD,f
  7575  16A1  0B89               	decfsz	9,f
  7576  16A2  2EA0               	goto	u1955
  7577  16A3  0871               	movf	??_TextLCD_CMD,w
  7578  16A4  3197  2703  3196   	fcall	_TextLCD_4Bits_Write
  7579                           
  7580                           ;TextLCD.c: 26: TextLCD_Enable();
  7581  16A7  3188  2001  3196   	fcall	_TextLCD_Enable
  7582                           
  7583                           ;TextLCD.c: 27: TextLCD_4Bits_Write(cmd);
  7584  16AA  0872               	movf	TextLCD_CMD@cmd,w
  7585  16AB  3197  2703  3196   	fcall	_TextLCD_4Bits_Write
  7586                           
  7587                           ;TextLCD.c: 28: TextLCD_Enable();
  7588  16AE  3188  2001         	fcall	_TextLCD_Enable
  7589  16B0  0008               	return
  7590  16B1                     __end_of_TextLCD_CMD:	
  7591                           
  7592                           	psect	text26
  7593  0801                     __ptext26:	
  7594 ;; *************** function _TextLCD_Enable *****************
  7595 ;; Defined at:
  7596 ;;		line 15 in file "TextLCD.c"
  7597 ;; Parameters:    Size  Location     Type
  7598 ;;		None
  7599 ;; Auto vars:     Size  Location     Type
  7600 ;;		None
  7601 ;; Return value:  Size  Location     Type
  7602 ;;                  1    wreg      void 
  7603 ;; Registers used:
  7604 ;;		wreg
  7605 ;; Tracked objects:
  7606 ;;		On entry : 0/0
  7607 ;;		On exit  : 0/0
  7608 ;;		Unchanged: 0/0
  7609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7610 ;;      Params:         0       0       0       0       0       0       0       0
  7611 ;;      Locals:         0       0       0       0       0       0       0       0
  7612 ;;      Temps:          0       0       0       0       0       0       0       0
  7613 ;;      Totals:         0       0       0       0       0       0       0       0
  7614 ;;Total ram usage:        0 bytes
  7615 ;; Hardware stack levels used:    1
  7616 ;; This function calls:
  7617 ;;		Nothing
  7618 ;; This function is called by:
  7619 ;;		_TextLCD_CMD
  7620 ;;		_TextLCD_Init
  7621 ;; This function uses a non-reentrant model
  7622 ;;
  7623                           
  7624                           
  7625                           ;psect for function _TextLCD_Enable
  7626  0801                     _TextLCD_Enable:	
  7627                           
  7628                           ;TextLCD.c: 17: LATCbits.LATC1=1;
  7629                           
  7630                           ;incstack = 0
  7631                           ; Regs used in _TextLCD_Enable: [wreg]
  7632  0801  0022               	movlb	2	; select bank2
  7633  0802  148E               	bsf	14,1	;volatile
  7634                           
  7635                           ;TextLCD.c: 18: _delay((unsigned long)((3)*(32000000/4000000.0)));
  7636  0803  3008               	movlw	8
  7637  0804                     u3717:	
  7638  0804  0B89               	decfsz	9,f
  7639  0805  2804               	goto	u3717
  7640                           
  7641                           ;TextLCD.c: 19: LATCbits.LATC1=0;
  7642  0806  0022               	movlb	2	; select bank2
  7643  0807  108E               	bcf	14,1	;volatile
  7644                           
  7645                           ;TextLCD.c: 20: _delay((unsigned long)((50)*(32000000/4000000.0)));
  7646  0808  3085               	movlw	133
  7647  0809                     u3727:	
  7648  0809  0B89               	decfsz	9,f
  7649  080A  2809               	goto	u3727
  7650  080B  0000               	nop
  7651  080C  0008               	return
  7652  080D                     __end_of_TextLCD_Enable:	
  7653                           
  7654                           	psect	text27
  7655  1703                     __ptext27:	
  7656 ;; *************** function _TextLCD_4Bits_Write *****************
  7657 ;; Defined at:
  7658 ;;		line 4 in file "TextLCD.c"
  7659 ;; Parameters:    Size  Location     Type
  7660 ;;  nib             1    wreg     unsigned char 
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;  nib             1    0[COMMON] unsigned char 
  7663 ;; Return value:  Size  Location     Type
  7664 ;;                  1    wreg      void 
  7665 ;; Registers used:
  7666 ;;		wreg, status,0
  7667 ;; Tracked objects:
  7668 ;;		On entry : 0/0
  7669 ;;		On exit  : 0/0
  7670 ;;		Unchanged: 0/0
  7671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7672 ;;      Params:         0       0       0       0       0       0       0       0
  7673 ;;      Locals:         1       0       0       0       0       0       0       0
  7674 ;;      Temps:          0       0       0       0       0       0       0       0
  7675 ;;      Totals:         1       0       0       0       0       0       0       0
  7676 ;;Total ram usage:        1 bytes
  7677 ;; Hardware stack levels used:    1
  7678 ;; This function calls:
  7679 ;;		Nothing
  7680 ;; This function is called by:
  7681 ;;		_TextLCD_CMD
  7682 ;;		_TextLCD_Init
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           
  7687                           ;psect for function _TextLCD_4Bits_Write
  7688  1703                     _TextLCD_4Bits_Write:	
  7689                           
  7690                           ;incstack = 0
  7691                           ; Regs used in _TextLCD_4Bits_Write: [wreg+status,0]
  7692                           ;TextLCD_4Bits_Write@nib stored from wreg
  7693  1703  00F0               	movwf	TextLCD_4Bits_Write@nib
  7694                           
  7695                           ;TextLCD.c: 6: LATCbits.LATC2=(bool)nib;
  7696  1704  0C70               	rrf	TextLCD_4Bits_Write@nib,w
  7697  1705  0022               	movlb	2	; select bank2
  7698  1706  1C03               	skipc
  7699  1707  110E               	bcf	14,2	;volatile
  7700  1708  1803               	skipnc
  7701  1709  150E               	bsf	14,2	;volatile
  7702                           
  7703                           ;TextLCD.c: 7: nib>>=1;
  7704  170A  1003               	clrc
  7705  170B  0CF0               	rrf	TextLCD_4Bits_Write@nib,f
  7706                           
  7707                           ;TextLCD.c: 8: LATCbits.LATC3=(bool)nib;
  7708  170C  0C70               	rrf	TextLCD_4Bits_Write@nib,w
  7709  170D  1C03               	skipc
  7710  170E  118E               	bcf	14,3	;volatile
  7711  170F  1803               	skipnc
  7712  1710  158E               	bsf	14,3	;volatile
  7713                           
  7714                           ;TextLCD.c: 9: nib>>=1;
  7715  1711  1003               	clrc
  7716  1712  0CF0               	rrf	TextLCD_4Bits_Write@nib,f
  7717                           
  7718                           ;TextLCD.c: 10: LATCbits.LATC4=(bool)nib;
  7719  1713  0C70               	rrf	TextLCD_4Bits_Write@nib,w
  7720  1714  1C03               	skipc
  7721  1715  120E               	bcf	14,4	;volatile
  7722  1716  1803               	skipnc
  7723  1717  160E               	bsf	14,4	;volatile
  7724                           
  7725                           ;TextLCD.c: 11: nib>>=1;
  7726  1718  1003               	clrc
  7727  1719  0CF0               	rrf	TextLCD_4Bits_Write@nib,f
  7728                           
  7729                           ;TextLCD.c: 12: LATCbits.LATC5=(bool)nib;
  7730  171A  0C70               	rrf	TextLCD_4Bits_Write@nib,w
  7731  171B  1C03               	skipc
  7732  171C  128E               	bcf	14,5	;volatile
  7733  171D  1803               	skipnc
  7734  171E  168E               	bsf	14,5	;volatile
  7735  171F  0008               	return
  7736  1720                     __end_of_TextLCD_4Bits_Write:	
  7737                           
  7738                           	psect	text28
  7739  166F                     __ptext28:	
  7740 ;; *************** function _SYSTEM_Initialize *****************
  7741 ;; Defined at:
  7742 ;;		line 70 in file "mcc_generated_files/mcc.c"
  7743 ;; Parameters:    Size  Location     Type
  7744 ;;		None
  7745 ;; Auto vars:     Size  Location     Type
  7746 ;;		None
  7747 ;; Return value:  Size  Location     Type
  7748 ;;                  1    wreg      void 
  7749 ;; Registers used:
  7750 ;;		wreg, status,2, status,0, pclath, cstack
  7751 ;; Tracked objects:
  7752 ;;		On entry : 0/0
  7753 ;;		On exit  : 0/0
  7754 ;;		Unchanged: 0/0
  7755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7756 ;;      Params:         0       0       0       0       0       0       0       0
  7757 ;;      Locals:         0       0       0       0       0       0       0       0
  7758 ;;      Temps:          0       0       0       0       0       0       0       0
  7759 ;;      Totals:         0       0       0       0       0       0       0       0
  7760 ;;Total ram usage:        0 bytes
  7761 ;; Hardware stack levels used:    1
  7762 ;; Hardware stack levels required when called:    1
  7763 ;; This function calls:
  7764 ;;		_ADC_Initialize
  7765 ;;		_OSCILLATOR_Initialize
  7766 ;;		_PIN_MANAGER_Initialize
  7767 ;;		_WDT_Initialize
  7768 ;; This function is called by:
  7769 ;;		_main
  7770 ;; This function uses a non-reentrant model
  7771 ;;
  7772                           
  7773                           
  7774                           ;psect for function _SYSTEM_Initialize
  7775  166F                     _SYSTEM_Initialize:	
  7776                           
  7777                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  7778                           
  7779                           ;incstack = 0
  7780                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7781  166F  3196  26E6  3196   	fcall	_PIN_MANAGER_Initialize
  7782                           
  7783                           ;mcc.c: 74: OSCILLATOR_Initialize();
  7784  1672  3196  264F  3196   	fcall	_OSCILLATOR_Initialize
  7785                           
  7786                           ;mcc.c: 75: WDT_Initialize();
  7787  1675  3180  2005  3196   	fcall	_WDT_Initialize
  7788                           
  7789                           ;mcc.c: 76: ADC_Initialize();
  7790  1678  3196  2656         	fcall	_ADC_Initialize
  7791  167A  0008               	return
  7792  167B                     __end_of_SYSTEM_Initialize:	
  7793                           
  7794                           	psect	text29
  7795  0005                     __ptext29:	
  7796 ;; *************** function _WDT_Initialize *****************
  7797 ;; Defined at:
  7798 ;;		line 91 in file "mcc_generated_files/mcc.c"
  7799 ;; Parameters:    Size  Location     Type
  7800 ;;		None
  7801 ;; Auto vars:     Size  Location     Type
  7802 ;;		None
  7803 ;; Return value:  Size  Location     Type
  7804 ;;                  1    wreg      void 
  7805 ;; Registers used:
  7806 ;;		wreg
  7807 ;; Tracked objects:
  7808 ;;		On entry : 0/0
  7809 ;;		On exit  : 0/0
  7810 ;;		Unchanged: 0/0
  7811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7812 ;;      Params:         0       0       0       0       0       0       0       0
  7813 ;;      Locals:         0       0       0       0       0       0       0       0
  7814 ;;      Temps:          0       0       0       0       0       0       0       0
  7815 ;;      Totals:         0       0       0       0       0       0       0       0
  7816 ;;Total ram usage:        0 bytes
  7817 ;; Hardware stack levels used:    1
  7818 ;; This function calls:
  7819 ;;		Nothing
  7820 ;; This function is called by:
  7821 ;;		_SYSTEM_Initialize
  7822 ;; This function uses a non-reentrant model
  7823 ;;
  7824                           
  7825                           
  7826                           ;psect for function _WDT_Initialize
  7827  0005                     _WDT_Initialize:	
  7828                           
  7829                           ;mcc.c: 94: WDTCON = 0x16;
  7830                           
  7831                           ;incstack = 0
  7832                           ; Regs used in _WDT_Initialize: [wreg]
  7833  0005  3016               	movlw	22
  7834  0006  0021               	movlb	1	; select bank1
  7835  0007  0097               	movwf	23	;volatile
  7836  0008  0008               	return
  7837  0009                     __end_of_WDT_Initialize:	
  7838                           
  7839                           	psect	text30
  7840  16E6                     __ptext30:	
  7841 ;; *************** function _PIN_MANAGER_Initialize *****************
  7842 ;; Defined at:
  7843 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  7844 ;; Parameters:    Size  Location     Type
  7845 ;;		None
  7846 ;; Auto vars:     Size  Location     Type
  7847 ;;		None
  7848 ;; Return value:  Size  Location     Type
  7849 ;;                  1    wreg      void 
  7850 ;; Registers used:
  7851 ;;		wreg, status,2
  7852 ;; Tracked objects:
  7853 ;;		On entry : 0/0
  7854 ;;		On exit  : 0/0
  7855 ;;		Unchanged: 0/0
  7856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7857 ;;      Params:         0       0       0       0       0       0       0       0
  7858 ;;      Locals:         0       0       0       0       0       0       0       0
  7859 ;;      Temps:          0       0       0       0       0       0       0       0
  7860 ;;      Totals:         0       0       0       0       0       0       0       0
  7861 ;;Total ram usage:        0 bytes
  7862 ;; Hardware stack levels used:    1
  7863 ;; This function calls:
  7864 ;;		Nothing
  7865 ;; This function is called by:
  7866 ;;		_SYSTEM_Initialize
  7867 ;; This function uses a non-reentrant model
  7868 ;;
  7869                           
  7870                           
  7871                           ;psect for function _PIN_MANAGER_Initialize
  7872  16E6                     _PIN_MANAGER_Initialize:	
  7873                           
  7874                           ;pin_manager.c: 57: LATE = 0x00;
  7875                           
  7876                           ;incstack = 0
  7877                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  7878  16E6  0022               	movlb	2	; select bank2
  7879  16E7  0190               	clrf	16	;volatile
  7880                           
  7881                           ;pin_manager.c: 58: LATA = 0x00;
  7882  16E8  018C               	clrf	12	;volatile
  7883                           
  7884                           ;pin_manager.c: 59: LATB = 0x00;
  7885  16E9  018D               	clrf	13	;volatile
  7886                           
  7887                           ;pin_manager.c: 60: LATC = 0x00;
  7888  16EA  018E               	clrf	14	;volatile
  7889                           
  7890                           ;pin_manager.c: 65: TRISE = 0x08;
  7891  16EB  3008               	movlw	8
  7892  16EC  0021               	movlb	1	; select bank1
  7893  16ED  0090               	movwf	16	;volatile
  7894                           
  7895                           ;pin_manager.c: 66: TRISA = 0xFF;
  7896  16EE  30FF               	movlw	255
  7897  16EF  008C               	movwf	12	;volatile
  7898                           
  7899                           ;pin_manager.c: 67: TRISB = 0xFF;
  7900  16F0  30FF               	movlw	255
  7901  16F1  008D               	movwf	13	;volatile
  7902                           
  7903                           ;pin_manager.c: 68: TRISC = 0xC0;
  7904  16F2  30C0               	movlw	192
  7905  16F3  008E               	movwf	14	;volatile
  7906                           
  7907                           ;pin_manager.c: 73: ANSELB = 0x3F;
  7908  16F4  303F               	movlw	63
  7909  16F5  0023               	movlb	3	; select bank3
  7910  16F6  008D               	movwf	13	;volatile
  7911                           
  7912                           ;pin_manager.c: 74: ANSELA = 0x3F;
  7913  16F7  303F               	movlw	63
  7914  16F8  008C               	movwf	12	;volatile
  7915                           
  7916                           ;pin_manager.c: 79: WPUE = 0x08;
  7917  16F9  3008               	movlw	8
  7918  16FA  0024               	movlb	4	; select bank4
  7919  16FB  0090               	movwf	16	;volatile
  7920                           
  7921                           ;pin_manager.c: 80: WPUB = 0xFF;
  7922  16FC  30FF               	movlw	255
  7923  16FD  008D               	movwf	13	;volatile
  7924                           
  7925                           ;pin_manager.c: 81: OPTION_REGbits.nWPUEN = 0;
  7926  16FE  0021               	movlb	1	; select bank1
  7927  16FF  1395               	bcf	21,7	;volatile
  7928                           
  7929                           ;pin_manager.c: 87: APFCON = 0x00;
  7930  1700  0022               	movlb	2	; select bank2
  7931  1701  019D               	clrf	29	;volatile
  7932  1702  0008               	return
  7933  1703                     __end_of_PIN_MANAGER_Initialize:	
  7934                           
  7935                           	psect	text31
  7936  164F                     __ptext31:	
  7937 ;; *************** function _OSCILLATOR_Initialize *****************
  7938 ;; Defined at:
  7939 ;;		line 79 in file "mcc_generated_files/mcc.c"
  7940 ;; Parameters:    Size  Location     Type
  7941 ;;		None
  7942 ;; Auto vars:     Size  Location     Type
  7943 ;;		None
  7944 ;; Return value:  Size  Location     Type
  7945 ;;                  1    wreg      void 
  7946 ;; Registers used:
  7947 ;;		wreg, status,2
  7948 ;; Tracked objects:
  7949 ;;		On entry : 0/0
  7950 ;;		On exit  : 0/0
  7951 ;;		Unchanged: 0/0
  7952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7953 ;;      Params:         0       0       0       0       0       0       0       0
  7954 ;;      Locals:         0       0       0       0       0       0       0       0
  7955 ;;      Temps:          0       0       0       0       0       0       0       0
  7956 ;;      Totals:         0       0       0       0       0       0       0       0
  7957 ;;Total ram usage:        0 bytes
  7958 ;; Hardware stack levels used:    1
  7959 ;; This function calls:
  7960 ;;		Nothing
  7961 ;; This function is called by:
  7962 ;;		_SYSTEM_Initialize
  7963 ;; This function uses a non-reentrant model
  7964 ;;
  7965                           
  7966                           
  7967                           ;psect for function _OSCILLATOR_Initialize
  7968  164F                     _OSCILLATOR_Initialize:	
  7969                           
  7970                           ;mcc.c: 82: OSCCON = 0x70;
  7971                           
  7972                           ;incstack = 0
  7973                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7974  164F  3070               	movlw	112
  7975  1650  0021               	movlb	1	; select bank1
  7976  1651  0099               	movwf	25	;volatile
  7977                           
  7978                           ;mcc.c: 84: OSCTUNE = 0x00;
  7979  1652  0198               	clrf	24	;volatile
  7980  1653                     l22:	
  7981                           ;mcc.c: 87: {
  7982                           
  7983                           ;mcc.c: 86: while(PLLR == 0)
  7984                           
  7985  1653  1B1A               	btfsc	26,6	;volatile
  7986  1654  0008               	return
  7987  1655  2E53               	goto	l22
  7988  1656                     __end_of_OSCILLATOR_Initialize:	
  7989                           
  7990                           	psect	text32
  7991  1656                     __ptext32:	
  7992 ;; *************** function _ADC_Initialize *****************
  7993 ;; Defined at:
  7994 ;;		line 64 in file "mcc_generated_files/adc.c"
  7995 ;; Parameters:    Size  Location     Type
  7996 ;;		None
  7997 ;; Auto vars:     Size  Location     Type
  7998 ;;		None
  7999 ;; Return value:  Size  Location     Type
  8000 ;;                  1    wreg      void 
  8001 ;; Registers used:
  8002 ;;		wreg, status,2
  8003 ;; Tracked objects:
  8004 ;;		On entry : 0/0
  8005 ;;		On exit  : 0/0
  8006 ;;		Unchanged: 0/0
  8007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8008 ;;      Params:         0       0       0       0       0       0       0       0
  8009 ;;      Locals:         0       0       0       0       0       0       0       0
  8010 ;;      Temps:          0       0       0       0       0       0       0       0
  8011 ;;      Totals:         0       0       0       0       0       0       0       0
  8012 ;;Total ram usage:        0 bytes
  8013 ;; Hardware stack levels used:    1
  8014 ;; This function calls:
  8015 ;;		Nothing
  8016 ;; This function is called by:
  8017 ;;		_SYSTEM_Initialize
  8018 ;; This function uses a non-reentrant model
  8019 ;;
  8020                           
  8021                           
  8022                           ;psect for function _ADC_Initialize
  8023  1656                     _ADC_Initialize:	
  8024                           
  8025                           ;adc.c: 69: ADCON0 = 0x01;
  8026                           
  8027                           ;incstack = 0
  8028                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  8029  1656  3001               	movlw	1
  8030  1657  0021               	movlb	1	; select bank1
  8031  1658  009D               	movwf	29	;volatile
  8032                           
  8033                           ;adc.c: 72: ADCON1 = 0xF0;
  8034  1659  30F0               	movlw	240
  8035  165A  009E               	movwf	30	;volatile
  8036                           
  8037                           ;adc.c: 75: ADRESL = 0x00;
  8038  165B  019B               	clrf	27	;volatile
  8039                           
  8040                           ;adc.c: 78: ADRESH = 0x00;
  8041  165C  019C               	clrf	28	;volatile
  8042  165D  0008               	return
  8043  165E                     __end_of_ADC_Initialize:	
  8044                           
  8045                           	psect	text33
  8046  16B1                     __ptext33:	
  8047 ;; *************** function _ADC_GetConversion *****************
  8048 ;; Defined at:
  8049 ;;		line 109 in file "mcc_generated_files/adc.c"
  8050 ;; Parameters:    Size  Location     Type
  8051 ;;  channel         1    wreg     enum E3201
  8052 ;; Auto vars:     Size  Location     Type
  8053 ;;  channel         1    3[COMMON] enum E3201
  8054 ;; Return value:  Size  Location     Type
  8055 ;;                  2    0[COMMON] unsigned int 
  8056 ;; Registers used:
  8057 ;;		wreg, status,2, status,0
  8058 ;; Tracked objects:
  8059 ;;		On entry : 0/0
  8060 ;;		On exit  : 0/0
  8061 ;;		Unchanged: 0/0
  8062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8063 ;;      Params:         2       0       0       0       0       0       0       0
  8064 ;;      Locals:         1       0       0       0       0       0       0       0
  8065 ;;      Temps:          1       0       0       0       0       0       0       0
  8066 ;;      Totals:         4       0       0       0       0       0       0       0
  8067 ;;Total ram usage:        4 bytes
  8068 ;; Hardware stack levels used:    1
  8069 ;; This function calls:
  8070 ;;		Nothing
  8071 ;; This function is called by:
  8072 ;;		_main
  8073 ;; This function uses a non-reentrant model
  8074 ;;
  8075                           
  8076                           
  8077                           ;psect for function _ADC_GetConversion
  8078  16B1                     _ADC_GetConversion:	
  8079                           
  8080                           ;incstack = 0
  8081                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  8082                           ;ADC_GetConversion@channel stored from wreg
  8083  16B1  00F3               	movwf	ADC_GetConversion@channel
  8084                           
  8085                           ;adc.c: 112: ADCON0bits.CHS = channel;
  8086  16B2  0873               	movf	ADC_GetConversion@channel,w
  8087  16B3  00F2               	movwf	??_ADC_GetConversion
  8088  16B4  0DF2               	rlf	??_ADC_GetConversion,f
  8089  16B5  0DF2               	rlf	??_ADC_GetConversion,f
  8090  16B6  0021               	movlb	1	; select bank1
  8091  16B7  081D               	movf	29,w	;volatile
  8092  16B8  0672               	xorwf	??_ADC_GetConversion,w
  8093  16B9  3983               	andlw	-125
  8094  16BA  0672               	xorwf	??_ADC_GetConversion,w
  8095  16BB  009D               	movwf	29	;volatile
  8096                           
  8097                           ;adc.c: 115: ADCON0bits.ADON = 1;
  8098  16BC  141D               	bsf	29,0	;volatile
  8099                           
  8100                           ;adc.c: 117: _delay((unsigned long)((20)*(32000000/4000000.0)));
  8101  16BD  3035               	movlw	53
  8102  16BE                     u3737:	
  8103  16BE  0B89               	decfsz	9,f
  8104  16BF  2EBE               	goto	u3737
  8105  16C0  0000               	nop
  8106                           
  8107                           ;adc.c: 120: ADCON0bits.GO_nDONE = 1;
  8108  16C1  0021               	movlb	1	; select bank1
  8109  16C2  149D               	bsf	29,1	;volatile
  8110  16C3                     l118:	
  8111                           ;adc.c: 124: {
  8112                           
  8113                           ;adc.c: 123: while (ADCON0bits.GO_nDONE)
  8114                           
  8115  16C3  189D               	btfsc	29,1	;volatile
  8116  16C4  2EC3               	goto	l118
  8117                           
  8118                           ;adc.c: 125: }
  8119                           ;adc.c: 128: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  8120  16C5  081C               	movf	28,w	;volatile
  8121  16C6  00F1               	movwf	?_ADC_GetConversion+1
  8122  16C7  081B               	movf	27,w	;volatile
  8123  16C8  00F0               	movwf	?_ADC_GetConversion
  8124  16C9  0008               	return
  8125  16CA                     __end_of_ADC_GetConversion:	
  8126  007E                     btemp	set	126	;btemp
  8127  007E                     wtemp0	set	126


Data Sizes:
    Strings     19
    Constant    122
    Data        0
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     72      78
    BANK1            80     23      40
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[10]), STR_1(CODE[9]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> str(BANK1[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    TextLCD_Puts@data	PTR unsigned char  size(1) Largest target is 17
		 -> str(BANK1[17]), 


Critical Paths under _main in COMMON

    _main->___ftdiv
    _sprintf->___lldiv
    _sprintf->___lltoft
    _sprintf->___wmul
    _sprintf->__div_to_l_
    _scale->___wmul
    _fround->___wmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___lltoft
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _TextLCD_Puts->_TextLCD_PutChar
    _TextLCD_PutChar->_TextLCD_CMD
    _TextLCD_Init->_TextLCD_CMD
    _TextLCD_CMD->_TextLCD_4Bits_Write

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   54472
                                             68 BANK0      4     4      0
                  _ADC_GetConversion
                  _SYSTEM_Initialize
                       _TextLCD_Init
                       _TextLCD_Puts
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             41    36      5   43888
                                             57 BANK0     11     6      5
                                              0 BANK1     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                9     6      3   10606
                                             24 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              14    11      3   10408
                                             24 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2652
                                             12 COMMON     2     2      0
                                              4 BANK0      4     0      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    4483
                                              8 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1580
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     431
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     574
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    2242
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     543
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     418
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     444
                                             33 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3400
                                             51 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3205
                                             38 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     648
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    2259
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             16    10      6    2645
                                              8 COMMON     6     0      6
                                              0 BANK0     10    10      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _TextLCD_Puts                                         6     3      3     903
                                              4 COMMON     6     3      3
                        _TextLCD_CMD
                    _TextLCD_PutChar
 ---------------------------------------------------------------------------------
 (2) _TextLCD_PutChar                                      1     1      0     157
                                              3 COMMON     1     1      0
                        _TextLCD_CMD
 ---------------------------------------------------------------------------------
 (1) _TextLCD_Init                                         2     2      0     226
                                              3 COMMON     2     2      0
                _TextLCD_4Bits_Write
                        _TextLCD_CMD
                     _TextLCD_Enable
 ---------------------------------------------------------------------------------
 (3) _TextLCD_CMD                                          2     2      0     135
                                              1 COMMON     2     2      0
                _TextLCD_4Bits_Write
                     _TextLCD_Enable
 ---------------------------------------------------------------------------------
 (4) _TextLCD_Enable                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TextLCD_4Bits_Write                                  1     1      0      91
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      22
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _SYSTEM_Initialize
     _ADC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _WDT_Initialize
   _TextLCD_Init
     _TextLCD_4Bits_Write
     _TextLCD_CMD
       _TextLCD_4Bits_Write
       _TextLCD_Enable
     _TextLCD_Enable
   _TextLCD_Puts
     _TextLCD_CMD
       _TextLCD_4Bits_Write
       _TextLCD_Enable
     _TextLCD_PutChar
       _TextLCD_CMD
         _TextLCD_4Bits_Write
         _TextLCD_Enable
   ___ftdiv
     ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      84       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     48      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     17      28       8       50.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      84      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Nov 17 22:29:24 2017

                            __CFG_CP$OFF 0000                                       l22 1653  
                                     l51 0BC2                             ___awdiv@sign 0021  
                    ___wmul@multiplicand 0026                             ___ftadd@exp1 0052  
                           ___ftadd@exp2 0051                              __CFG_LVP$ON 0000  
                           ___ftadd@sign 0050                                      l211 0499  
                                    l205 0378                                      l118 16C3  
                                    l502 0E8F                                      l246 0793  
                                    l336 16D3                                      l248 07CD  
                                    l521 09BA                                      l522 09C2  
                                    l514 09A7                                      l622 0A46  
                                    l545 0D27                                      l571 003A  
                                    l581 00B3                             __CFG_CPD$OFF 0000  
                                    _vol 006B                                      _str 00B7  
                           ___awmod@sign 0076                             __CFG_BORV$LO 0000  
                                    wreg 0009                             __CFG_IESO$ON 0000  
                            _sprintf$755 00A0                  __size_of_TextLCD_Enable 000C  
                           ___ftdiv@cntr 0024                             ___ftdiv@sign 0029  
                                   l2203 0E86                                     l2131 0075  
                                   l2123 005B                                     l2213 1754  
                                   l2205 0E92                                     l2141 008F  
                                   l2109 0022                                     l2303 08BB  
                                   l2151 00B6                                     l2143 009D  
                                   l2047 0FD3                                     l2039 0F5B  
                                   l2063 0168                                     l2217 176A  
                                   l2241 1728                                     l2161 0D9C  
                                   l2081 0287                                     l2073 01E4  
                                   l2251 09F2                                     l2307 08C6  
                                   l2323 17A7                                     l2317 1781  
                                   l2149 00AA                                     l2069 01C7  
                                   l2405 03A4                                     l2271 0A30  
                                   l2319 178F                                     l2327 17B2  
                                   l2335 0811                                     l2167 0DB9  
                                   l2087 02E6                                     l2511 0677  
                                   l2431 0435                                     l2415 03D9  
                                   l2337 0821                                     l2185 0E4C  
                                   l2177 0E04                                     l2505 065A  
                                   l2611 0A8D                                     l2283 0A57  
                                   l2195 0E6B                                     l1803 08E5  
                                   l2099 1687                                     l2605 0A77  
                                   l2277 0A3D                                     l2269 0A22  
                                   l2293 088D                                     l2197 0E79  
                                   l1821 090B                                     l1813 08ED  
                                   l2541 077F                                     l2453 0505  
                                   l2445 04CE                                     l1751 098E  
                                   l1911 0D06                                     l2279 0A49  
                                   l2295 089B                                     l1815 08F9  
                                   l2551 07B1                                     l2535 076C  
                                   l2519 069D                                     l2471 059B  
                                   l2439 0482                                     l2543 0784  
                                   l2391 0373                                     l2375 0326  
                                   l1761 09B4                                     l1753 0993  
                                   l1745 097D                                     l2633 0AE7  
                                   l2625 0ACE                                     l1905 0CF3  
                                   l1825 0914                                     l1841 17C5  
                                   l2457 0519                                     l2561 07EA  
                                   l1923 0D39                                     l1907 0CFD  
                                   l2483 05D8                                     l2467 054D  
                                   l1749 0984                                     l1917 0D19  
                                   l1909 0D02                                     l1829 091C  
                                   l1853 17D2                                     l1845 17CC  
                                   l2477 05A1                                     l2397 037A  
                                   l2389 033B                                     l2583 094D  
                                   l1759 09AC                                     l1927 0D4B  
                                   l1919 0D23                                     l1855 17DE  
                                   l1863 17F3                                     l2399 0390  
                                   l2559 030B                                     l2593 0955  
                                   l2585 0954                                     l1937 0D66  
                                   l1881 0CB7                                     l1953 0B35  
                                   l1777 16CC                                     l2497 05F3  
                                   l2595 0969                                     l2579 0942  
                                   l1867 17FB                                     l1859 17EA  
                                   l1947 0B1F                                     l2499 0647  
                                   l2597 096D                                     l1877 0CB0  
                                   l1797 08DA                                     l1981 0B94  
                                   l1965 0B70                                     l1887 0CC6  
                                   l1977 0B8C                                     l1969 0B78  
                                   l1899 0CE0                                     STR_1 1884  
                                   STR_2 187A                                     u2035 08F0  
                                   _LATA 010C                                     _LATB 010D  
                                   u3015 0A3E                                     u2055 08FA  
                                   u2135 17D5                                     _LATC 010E  
                                   u2065 0904                                     _LATE 0110  
                                   u2315 0CF4                                     u2075 090C  
                                   u2155 17E4                                     u3125 1784  
                                   u2165 17EB                                     u3055 0890  
                                   u2345 0D07                                     u3145 179D  
                                   u3075 089C                                     u3155 17A8  
                                   u2515 0B95                                     u3315 04A5  
                                   u2285 0CE1                                     u3085 08B0  
                                   u2525 0B9B                                     u2445 0B41  
                                   u3325 04DA                                     u2375 0D1A  
                                   u3095 08BC                                     u3175 0816  
                                   u2455 0B51                                     u3505 07C5  
                                   u3425 0665                                     u2475 0B79  
                                   u3435 0673                                     u3355 0503  
                                   u3275 03EE                                     u3605 0AAF  
                                   u2805 0E2F                                     u2725 0090  
                                   u2485 0B7F                                     u1935 09C9  
                                   u1855 0989                                     u3615 0ACF  
                                   u3625 0ADE                                     u2665 005C  
                                   u3385 05CC                                     u1955 16A0  
                                   u3707 0875                                     u1875 09A2  
                                   u3635 0AE8                                     u2755 00AB  
                                   u2675 006C                                     u3717 0804  
                                   u2845 0E6C                                     u2685 0076  
                                   u3727 0809                                     u1895 09AF  
                                   u1975 16D4                                     u3495 07A7  
                                   u3737 16BE                                     u1985 16D9  
                                   u3657 0C81                                     u3667 093B  
                                   u3595 0A9F                                     u2955 09F9  
                                   u2875 0E87                                     u2795 0E05  
                                   u3677 083A                                     u3687 084B  
                                   u3697 0853                                     u2985 0A23  
                                   _PLLR 04D6                                     _WPUB 020D  
                                   _WPUE 0210                             __CFG_WRT$OFF 0000  
                          __CFG_FCMEN$ON 0000                                     _main 0BBC  
                        TextLCD_Puts@idx 0074                             ___ftpack@arg 0070  
                           ___ftpack@exp 0073                                     _temp 0068  
                                   fsr0h 0005                                     fsr1h 0007  
                                   indf0 0000                                     fsr0l 0004  
                                   indf1 0001                                     fsr1l 0006  
                                   btemp 007E                            __CFG_BOREN$ON 0000  
                                   start 0002                            __CFG_MCLRE$ON 0000  
                           ___ftmul@cntr 0036                             ___ftmul@sign 0037  
                           ___fttol@exp1 004E                             ___fttol@lval 004A  
                          __CFG_PLLEN$ON 0000           __size_of_OSCILLATOR_Initialize 0007  
          __end_of_OSCILLATOR_Initialize 1656                                    ?_main 0070  
                        __end_of___awdiv 0921                          __end_of___ftadd 0D7E  
                          __CFG_WDTE$OFF 0000                          __end_of___awmod 1800  
               __size_of_TextLCD_PutChar 0009                          __end_of___ftdiv 0B08  
                        __end_of___ftneg 1666                          __end_of___lldiv 08CF  
                        __end_of___ftmul 0BBC                          ___awdiv@divisor 0077  
                        __end_of___llmod 17BB                          __end_of___ftsub 173E  
                        __end_of___fttol 0A60                          ___awdiv@counter 0020  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _TRISE 0090  
                           ___lltoft@exp 007D                         TextLCD_Puts@data 0075  
                        __end_of_dpowers 1828                           _WDT_Initialize 0005  
                       TextLCD_Puts@line 0078                                    _scale 00BF  
                        __end_of_isdigit 1689                            ___ftpack@sign 0074  
                                  status 0003                                    wtemp0 007E  
                        __end_of_sprintf 07EF                            main@adc_value 0066  
                        __initialization 07EF                             __end_of_main 0C88  
                                 ??_main 0064                            ___fttol@sign1 0049  
                   __size_of__tdiv_to_l_ 00B6                   __end_of_WDT_Initialize 0009  
                                 _ADCON0 009D                                   _ADCON1 009E  
                       ___llmod@dividend 0074                                   ?_scale 0038  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0079                                   _APFCON 011D  
                                 _ANSELA 018C                                   _ANSELB 018D  
                       __end_of___ftpack 09D9                         __end_of___lltoft 0835  
                       __end_of___lwtoft 169C                                   _OSCCON 0099  
                                 _WDTCON 0097                           __CFG_PWRTE$OFF 0000  
                          ??_TextLCD_CMD 0071                         __end_of__powers_ 184F  
                                 ___ftge 173E               TextLCD_Puts@length_or_type 0076  
                                 ___wmul 16CA                                ??___awdiv 007B  
                              ??___ftadd 004C                           __CFG_STVREN$ON 0000  
                              ??___awmod 0074                                ??___ftdiv 0020  
                              ??___ftneg 0073                                ??___lldiv 0078  
                              ??___ftmul 002E                                ??___llmod 0078  
                              ??___ftsub 007E                                ??___fttol 0045  
                                 _fround 0E9B                         ___awdiv@quotient 0022  
                        ___awmod@divisor 0070                          ___awmod@counter 0075  
                  ___ftmul@f3_as_product 0033                                ??_isdigit 0070  
                        ?_WDT_Initialize 0070                           _TextLCD_Enable 0801  
               ADC_GetConversion@channel 0073                        ??_TextLCD_PutChar 0073  
                              ??_sprintf 005E                        _SYSTEM_Initialize 166F  
                __end_of__initialization 07FD                               ___ftadd@f1 0046  
                             ___ftadd@f2 0049                               ___ftge@ff1 0070  
                             ___ftge@ff2 0073                       ?_SYSTEM_Initialize 0070  
                             ___ftdiv@f1 007B                               ___ftdiv@f2 0078  
                             ___ftdiv@f3 0025                               ___ftneg@f1 0070  
                             ___ftmul@f1 0028                               ___ftmul@f2 002B  
                             ___ftsub@f1 0056                               ___ftsub@f2 0053  
                             ___fttol@f1 0041                           __pcstackCOMMON 0070  
                    ??_SYSTEM_Initialize 0070                               ___lltoft@c 0078  
                          __end_of_scale 0303                      __end_of_TextLCD_CMD 16B1  
                             ___lwtoft@c 0078                               __div_to_l_ 0D7E  
            __end_of_TextLCD_4Bits_Write 1720                   __end_of_TextLCD_Enable 080D  
                         _OPTION_REGbits 0095                          __div_to_l_@exp1 0025  
                        __div_to_l_@cntr 0024                                  ??_scale 003B  
              __end_of_SYSTEM_Initialize 167B                          __div_to_l_@quot 0020  
                             __pbssBANK0 0068                               __pbssBANK1 00B7  
                 TextLCD_4Bits_Write@nib 0070                          __CFG_VCAPEN$OFF 0000  
                          __div_to_l_@f1 0070                            __div_to_l_@f2 0073  
                             __pmaintext 0BBC                                  ?___ftge 0070  
                                ?___wmul 0024                            ?_TextLCD_Init 0070  
                          ?_TextLCD_Puts 0074                                  ?_fround 0038  
                              ?___ftpack 0070                                ?___lltoft 0078  
                __size_of_ADC_Initialize 0008                                ?___lwtoft 0078  
                        ?_TextLCD_Enable 0070                                  _OSCTUNE 0098  
                      __end_of__npowers_ 1876                              _TextLCD_CMD 169C  
                         ??_TextLCD_Init 0073                           ??_TextLCD_Puts 0077  
                        __size_of___ftge 003B                                  ___awdiv 08CF  
                                ___ftadd 0C88                                  ___awmod 17BB  
                                ___ftdiv 0A60                                  ___ftneg 165E  
                                ___lldiv 087D                          __size_of___wmul 001C  
                                ___ftmul 0B08                                  ___llmod 1779  
                                ___ftsub 1720                                  ___fttol 09D9  
                             _fround$752 0042                               _fround$753 003F  
                             ??___ftpack 0075                          __size_of_fround 0165  
                             ??___lltoft 007C                                  __ptext1 0303  
                                __ptext2 00BF                                  __ptext3 167B  
                                __ptext4 0E9B                                  __ptext5 16CA  
                                __ptext6 0B08                                  __ptext7 17BB  
                                __ptext8 08CF                                  __ptext9 0009  
                             ??___lwtoft 007B                              ?__div_to_l_ 0070  
                                _dpowers 1800                    _OSCILLATOR_Initialize 164F  
                                _isdigit 167B                         ___awmod@dividend 0072  
               ??_PIN_MANAGER_Initialize 0070               __size_of_SYSTEM_Initialize 000C  
                                _sprintf 0303                                  clrloop0 164A  
                   end_of_initialization 07FD                          ___lldiv@divisor 0070  
                        ___lldiv@counter 007D                           __tdiv_to_l_@f1 0070  
                         __tdiv_to_l_@f2 0073                            ??__tdiv_to_l_ 0076  
                        _TextLCD_PutChar 1666                         ??_WDT_Initialize 0070  
                       __CFG_FOSC$INTOSC 0000                              ___ftdiv@exp 0028  
                    __size_of__div_to_l_ 011D                              ___ftmul@exp 0032  
                         __end_of___ftge 1779                           __end_of___wmul 16E6  
                         _ADC_Initialize 1656                   ?_OSCILLATOR_Initialize 0070  
                         __end_of_fround 1000                      start_initialization 07EF  
        __size_of_PIN_MANAGER_Initialize 001D                      __end_of__tdiv_to_l_ 00BF  
                   __end_of_TextLCD_Init 087D                     __end_of_TextLCD_Puts 0975  
                        ___llmod@divisor 0070                          ___llmod@counter 0079  
                __end_of_TextLCD_PutChar 166F                                 ??___ftge 0076  
                               ??___wmul 007C                   __end_of_ADC_Initialize 165E  
                       ??_TextLCD_Enable 0070                                 ??_fround 003B  
                          sprintf@tmpval 00AC                               fround@prec 0045  
                      __size_of___ftpack 0064                        __size_of___lltoft 0028  
                              ___latbits 0002                        __size_of___lwtoft 0013  
                          __pcstackBANK0 0020                            __pcstackBANK1 00A0  
           __size_of_TextLCD_4Bits_Write 001D                              sprintf@flag 00A4  
                            sprintf@fval 00B3                              sprintf@prec 00B0  
                 _PIN_MANAGER_Initialize 16E6                             ?_TextLCD_CMD 0070  
                               ?___awdiv 0077                                 ?___ftadd 0046  
                               ?___awmod 0070                                 ?___ftdiv 0078  
                               ?___ftneg 0070                                 ?___lldiv 0070  
                               ?___ftmul 0028                                 ?___llmod 0070  
                               ?___ftsub 0053                                __npowers_ 184F  
                               ?___fttol 0041                          ?_ADC_Initialize 0070  
                            __tdiv_to_l_ 0009                             ??__div_to_l_ 0076  
                               ?_isdigit 0070                                _scale$754 003D  
                               ?_sprintf 0059                           __size_of_scale 0244  
                    TextLCD_PutChar@data 0073                           ___wmul@product 007C  
                               _LATCbits 010E                                clear_ram0 1649  
                     __end_of__div_to_l_ 0E9B                         ?_TextLCD_PutChar 0070  
                             _ADCON0bits 009D                        ___wmul@multiplier 0024  
                  __size_of_TextLCD_Init 0048                    __size_of_TextLCD_Puts 0054  
                      _ADC_GetConversion 16B1                  ??_OSCILLATOR_Initialize 0070  
                           _TextLCD_Init 0835                       ?_ADC_GetConversion 0070  
                           _TextLCD_Puts 0921                         __size_of___awdiv 0052  
                       __size_of___ftadd 00F6                         __size_of___awmod 0045  
                       __size_of___ftdiv 00A8                         __size_of___ftneg 0008  
                       __size_of___lldiv 0052                         __size_of___ftmul 00B4  
                       __size_of___llmod 0042                         __size_of___ftsub 001E  
                       __size_of___fttol 0087                                 ___ftpack 0975  
                               ___lltoft 080D                              _isdigit$520 0070  
                               ___lwtoft 1689                      ??_ADC_GetConversion 0072  
                             sprintf@exp 00AA                               sprintf@val 00A6  
                       __size_of_isdigit 000E                                 __ptext10 0D7E  
                               __ptext11 080D                                 __ptext20 0A60  
                               __ptext12 1779                                 __ptext21 0975  
                               __ptext13 087D                                 __ptext30 16E6  
                               __ptext22 0921                                 __ptext14 09D9  
                               __ptext31 164F                                 __ptext23 1666  
                               __ptext15 1720                                 __ptext32 1656  
                               __ptext24 0835                                 __ptext16 0C88  
                               __ptext33 16B1                                 __ptext25 169C  
                               __ptext17 165E                                 __ptext26 0801  
                               __ptext18 173E                                 __ptext27 1703  
                               __ptext19 1689                                 __ptext28 166F  
                               __ptext29 0005                      TextLCD_Puts@address 0079  
                               __powers_ 1828                         __size_of_sprintf 04EC  
                          __size_of_main 00CC  __end_ofTextLCD_Puts@DDRAM_Start_Address 187A  
        TextLCD_Puts@DDRAM_Start_Address 1876                __end_of_ADC_GetConversion 16CA  
                    _TextLCD_4Bits_Write 1703                     __size_of_TextLCD_CMD 0015  
                               isdigit@c 0071                                 scale@scl 0040  
                __size_of_WDT_Initialize 0004                     ?_TextLCD_4Bits_Write 0070  
                              sprintf@ap 00A3                         __tdiv_to_l_@exp1 0025  
                       __tdiv_to_l_@cntr 0024                                sprintf@sp 00B2  
                       __tdiv_to_l_@quot 0020                         ___lldiv@dividend 0074  
                ?_PIN_MANAGER_Initialize 0070                        __CFG_CLKOUTEN$OFF 0000  
                       ??_ADC_Initialize 0070                             ?__tdiv_to_l_ 0070  
                          __pstringtext1 1800                            __pstringtext2 1828  
                          __pstringtext3 184F                            __pstringtext4 1876  
                          __pstringtext5 1884                            __pstringtext6 0000  
                               sprintf@c 00B6                                 sprintf@f 0059  
                       ___lldiv@quotient 0079                    ??_TextLCD_4Bits_Write 0070  
                         TextLCD_CMD@cmd 0072           __end_of_PIN_MANAGER_Initialize 1703  
             __size_of_ADC_GetConversion 0019  
