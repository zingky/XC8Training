
# 1 "../usb_descriptors.c"

# 13 "C:\Program Files (x86)\Microchip\xc8\v1.44\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 12 "C:\Program Files (x86)\Microchip\xc8\v1.44\include\stdbool.h"
typedef unsigned char bool;

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.44\include\__size_t.h"
typedef unsigned size_t;

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.44\include\stdlib.h"
typedef unsigned short wchar_t;

# 15
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 53
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);




extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);


# 13 "C:\Program Files (x86)\Microchip\xc8\v1.44\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 86 "C:\Program Files (x86)\Microchip\xc8\v1.44\include\stdlib.h"
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);

extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);

# 46 "../include\usb.h"
struct setup_packet;

# 83
extern int16_t usb_application_get_string(uint8_t string_number, const void **ptr);

# 92
extern const struct device_descriptor this_device_descriptor;

# 110
extern const struct configuration_descriptor *usb_application_config_descs[];

# 290
int8_t app_unknown_setup_request_callback(const struct setup_packet *pkt);

# 350
void usb_init(void);

# 364
void usb_service(void);

# 375
uint8_t usb_get_configuration(void);

# 402
unsigned char *usb_get_in_buffer(uint8_t endpoint);

# 416
void usb_send_in_buffer(uint8_t endpoint, size_t len);

# 428
bool usb_in_endpoint_busy(uint8_t endpoint);

# 441
bool usb_in_endpoint_halted(uint8_t endpoint);

# 454
bool usb_out_endpoint_has_data(uint8_t endpoint);

# 466
void usb_arm_out_endpoint(uint8_t endpoint);

# 480
bool usb_out_endpoint_halted(uint8_t endpoint);

# 495
uint8_t usb_get_out_buffer(uint8_t endpoint, const unsigned char **buffer);

# 508
typedef void (*usb_ep0_data_stage_callback)(bool transfer_ok, void *context);

# 533
void usb_start_receive_ep0_data_stage(char *buffer, size_t len,
usb_ep0_data_stage_callback callback, void *context);

# 562
void usb_send_data_stage(char *buffer, size_t len,
usb_ep0_data_stage_callback callback, void *context);

# 59 "../include\usb_ch9.h"
enum PID {
PID_OUT = 0x01,
PID_IN = 0x09,
PID_SOF = 0x05,
PID_SETUP = 0x0D,
PID_DATA0 = 0x03,
PID_DATA1 = 0x0B,
PID_DATA2 = 0x07,
PID_MDATA = 0x0F,
PID_ACK = 0x02,
PID_NAK = 0x0A,
PID_STALL = 0x0E,
PID_NYET = 0x06,
PID_PRE = 0x0C,
PID_ERR = 0x0C,
PID_SPLIT = 0x08,
PID_PING = 0x04,
PID_RESERVED = 0x00,
};

# 83
enum DestinationType {
DEST_DEVICE = 0,
DEST_INTERFACE = 1,
DEST_ENDPOINT = 2,
DEST_OTHER_ELEMENT = 3,
};

# 94
enum RequestType {
REQUEST_TYPE_STANDARD = 0,
REQUEST_TYPE_CLASS = 1,
REQUEST_TYPE_VENDOR = 2,
REQUEST_TYPE_RESERVED = 3,
};

# 105
enum StandardControlRequest {
GET_STATUS = 0x0,
CLEAR_FEATURE = 0x1,
SET_FEATURE = 0x3,
SET_ADDRESS = 0x5,
GET_DESCRIPTOR = 0x6,
SET_DESCRIPTOR = 0x7,
GET_CONFIGURATION = 0x8,
SET_CONFIGURATION = 0x9,
GET_INTERFACE = 0xA,
SET_INTERFACE = 0xB,
SYNCH_FRAME = 0xC,
};


enum DescriptorTypes {
DESC_DEVICE = 0x1,
DESC_CONFIGURATION = 0x2,
DESC_STRING = 0x3,
DESC_INTERFACE = 0x4,
DESC_ENDPOINT = 0x5,
DESC_DEVICE_QUALIFIER = 0x6,
DESC_OTHER_SPEED_CONFIGURATION = 0x7,
DESC_INTERFACE_POWER = 0x8,
DESC_OTG = 0x9,
DESC_DEBUG = 0xA,
DESC_INTERFACE_ASSOCIATION = 0xB,
};

# 143
enum DeviceClassCodes {
DEVICE_CLASS_DEFINED_AT_INTERFACE_LEVEL = 0x0,
DEVICE_CLASS_MISC = 0xef,
DEVICE_CLASS_APPLICATION_SPECIFIC = 0xfe,
DEVICE_CLASS_VENDOR_SPECIFIC = 0xff,
};


enum EndpointAttributes {
EP_CONTROL = 0x0,
EP_ISOCHRONOUS = 0x1,
EP_BULK = 0x2,
EP_INTERRUPT = 0x3,


};

# 165
struct setup_packet {
union {
struct {
uint8_t destination : 5;
uint8_t type : 2;
uint8_t direction : 1;
};
uint8_t bmRequestType;
} REQUEST;
uint8_t bRequest;
uint16_t wValue;
uint16_t wIndex;
uint16_t wLength;
};


struct device_descriptor {
uint8_t bLength;
uint8_t bDescriptorType;
uint16_t bcdUSB;
uint8_t bDeviceClass;
uint8_t bDeviceSubclass;
uint8_t bDeviceProtocol;
uint8_t bMaxPacketSize0;
uint16_t idVendor;
uint16_t idProduct;
uint16_t bcdDevice;
uint8_t iManufacturer;
uint8_t iProduct;
uint8_t iSerialNumber;
uint8_t bNumConfigurations;
};


struct configuration_descriptor {
uint8_t bLength;
uint8_t bDescriptorType;
uint16_t wTotalLength;
uint8_t bNumInterfaces;
uint8_t bConfigurationValue;
uint8_t iConfiguration;
uint8_t bmAttributes;
uint8_t bMaxPower;
};


struct interface_descriptor {
uint8_t bLength;
uint8_t bDescriptorType;
uint8_t bInterfaceNumber;
uint8_t bAlternateSetting;
uint8_t bNumEndpoints;
uint8_t bInterfaceClass;
uint8_t bInterfaceSubclass;
uint8_t bInterfaceProtocol;
uint8_t iInterface;
};


struct endpoint_descriptor {

uint8_t bLength;
uint8_t bDescriptorType;
uint8_t bEndpointAddress;
uint8_t bmAttributes;
uint16_t wMaxPacketSize;
uint8_t bInterval;
};


struct string_descriptor {
uint8_t bLength;
uint8_t bDescriptorType;
uint16_t chars[];
};

# 246
struct interface_association_descriptor {
uint8_t bLength;
uint8_t bDescriptorType;
uint8_t bFirstInterface;
uint8_t bInterfaceCount;
uint8_t bFunctionClass;
uint8_t bFunctionSubClass;
uint8_t bFunctionProtocol;
uint8_t iFunction;
};

# 63 "../include\usb_hid.h"
enum HIDDescriptorTypes {
DESC_HID = 0x21,
DESC_REPORT = 0x22,
DESC_PHYSICAL = 0x23,
};


enum HIDRequests {
HID_GET_REPORT = 0x1,
HID_GET_IDLE = 0x2,
HID_GET_PROTOCOL = 0x3,
HID_SET_REPORT = 0x9,
HID_SET_IDLE = 0xa,
HID_SET_PROTOCOL = 0xb,
};


enum HIDReportTypes {
HID_INPUT = 0x1,
HID_OUTPUT = 0x2,
HID_FEATURE = 0x3,
};


enum HIDProtocols {
HID_PROTO_BOOT = 0,
HID_PROTO_REPORT = 1,
};

struct hid_descriptor {
uint8_t bLength;
uint8_t bDescriptorType;
uint16_t bcdHID;
uint8_t bCountryCode;
uint8_t bNumDescriptors;
uint8_t bDescriptorType2;
uint16_t wDescriptorLength;
};

struct hid_optional_descriptor {
uint8_t bDescriptorType;
uint16_t wDescriptorLength;
};

# 121
extern int16_t usb_application_get_hid_descriptor(uint8_t interface, const void **ptr);

# 137
extern int16_t usb_application_get_hid_report_descriptor(uint8_t interface, const void **ptr);

# 329
uint8_t process_hid_setup_request(const struct setup_packet *setup);

# 41 "../usb_descriptors.c"
struct configuration_1_packet {
struct configuration_descriptor config;
struct interface_descriptor interface;
struct hid_descriptor hid;
struct endpoint_descriptor ep;
struct endpoint_descriptor ep1_out;
};


const  struct device_descriptor this_device_descriptor =
{
sizeof(struct device_descriptor),
DESC_DEVICE,
0x0200,
0x00,
0x00,
0x00,
8,
0x04D8,
0x003F,
0x0003,
1,
2,
0,
1
};


static const  uint8_t custom_report_descriptor[] =
{
0x06, 0x00, 0xFF,
0x09, 0x01,
0xA1, 0x01,
0x19, 0x01,
0x29, 0x40,
0x15, 0x01,
0x25, 0x40,
0x75, 0x08,
0x95, 0x40,
0x81, 0x00,
0x19, 0x01,
0x29, 0x40,
0x91, 0x00,
0xC0
};


static const  struct configuration_1_packet configuration_1 =
{
{

sizeof(struct configuration_descriptor),
DESC_CONFIGURATION,
sizeof(configuration_1),
1,
1,
0,
0b10000000,
100/2,
},

{

sizeof(struct interface_descriptor),
DESC_INTERFACE,
0x0,
0x0,
0x2,
0x03,
0x00,
0x00,
0x00,
},

{

sizeof(struct hid_descriptor),
DESC_HID,
0x0101,
0x0,
1,
DESC_REPORT,
sizeof(custom_report_descriptor),
},

{

sizeof(struct endpoint_descriptor),
DESC_ENDPOINT,
0x01 | 0x80,
EP_INTERRUPT,
64,
1,
},


{

sizeof(struct endpoint_descriptor),
DESC_ENDPOINT,
0x01 ,
EP_INTERRUPT,
64,
1,
},
};

# 152
static const  struct {uint8_t bLength;uint8_t bDescriptorType; uint16_t lang; } str00 = {
sizeof(str00),
DESC_STRING,
0x0409
};

static const  struct {uint8_t bLength;uint8_t bDescriptorType; uint16_t chars[4]; } vendor_string = {
sizeof(vendor_string),
DESC_STRING,
{'A','c','m','e'}
};

static const  struct {uint8_t bLength;uint8_t bDescriptorType; uint16_t chars[6]; } product_string = {
sizeof(product_string),
DESC_STRING,
{'c','u','s','t','o','m'}
};

# 180
int16_t usb_application_get_string(uint8_t string_number, const void **ptr)
{
if (string_number == 0) {
*ptr = &str00;
return sizeof(str00);
}
else if (string_number == 1) {
*ptr = &vendor_string;
return sizeof(vendor_string);
}
else if (string_number == 2) {
*ptr = &product_string;
return sizeof(product_string);
}

return -1;
}


const struct configuration_descriptor *usb_application_config_descs[] =
{
(struct configuration_descriptor*) &configuration_1,
};
typedef char STATIC_SIZE_CHECK_LINE_203 [((sizeof(usb_application_config_descs)/sizeof(*usb_application_config_descs))==1)?1:-1];
typedef char STATIC_SIZE_CHECK_LINE_204 [(sizeof(this_device_descriptor)==18)?1:-1];


int16_t usb_application_get_hid_descriptor(uint8_t interface, const void **ptr)
{

# 211
const void *p = &configuration_1.hid;
*ptr = p;
return sizeof(configuration_1.hid);
}


int16_t usb_application_get_hid_report_descriptor(uint8_t interface, const void **ptr)
{
*ptr = custom_report_descriptor;
return sizeof(custom_report_descriptor);
}
