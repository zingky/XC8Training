

Microchip Technology PIC PRO Macro Assembler V1.43 build -156212558 
                                                                                               Sun Sep 03 23:44:37 2017

Microchip Technology Omniscient Code Generator v1.43 (PRO mode) build 201707250354
     1                           	processor	16F1936
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	pa_nodes0,global,class=CODE,delta=2
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 1.43
    18                           ; Generated 25/07/2017 GMT
    19                           ; 
    20                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F1936 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0013                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001C                     	;# 
    79  001E                     	;# 
    80  001F                     	;# 
    81  008C                     	;# 
    82  008D                     	;# 
    83  008E                     	;# 
    84  0090                     	;# 
    85  0091                     	;# 
    86  0092                     	;# 
    87  0093                     	;# 
    88  0095                     	;# 
    89  0096                     	;# 
    90  0097                     	;# 
    91  0098                     	;# 
    92  0099                     	;# 
    93  009A                     	;# 
    94  009B                     	;# 
    95  009B                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009E                     	;# 
    99  010C                     	;# 
   100  010D                     	;# 
   101  010E                     	;# 
   102  0110                     	;# 
   103  0111                     	;# 
   104  0112                     	;# 
   105  0113                     	;# 
   106  0114                     	;# 
   107  0115                     	;# 
   108  0116                     	;# 
   109  0117                     	;# 
   110  0118                     	;# 
   111  0119                     	;# 
   112  011A                     	;# 
   113  011B                     	;# 
   114  011D                     	;# 
   115  018C                     	;# 
   116  018D                     	;# 
   117  0191                     	;# 
   118  0191                     	;# 
   119  0192                     	;# 
   120  0193                     	;# 
   121  0193                     	;# 
   122  0193                     	;# 
   123  0194                     	;# 
   124  0195                     	;# 
   125  0196                     	;# 
   126  0199                     	;# 
   127  019A                     	;# 
   128  019B                     	;# 
   129  019B                     	;# 
   130  019B                     	;# 
   131  019B                     	;# 
   132  019C                     	;# 
   133  019C                     	;# 
   134  019D                     	;# 
   135  019E                     	;# 
   136  019F                     	;# 
   137  020D                     	;# 
   138  0210                     	;# 
   139  0211                     	;# 
   140  0212                     	;# 
   141  0213                     	;# 
   142  0214                     	;# 
   143  0215                     	;# 
   144  0215                     	;# 
   145  0216                     	;# 
   146  0217                     	;# 
   147  0291                     	;# 
   148  0291                     	;# 
   149  0292                     	;# 
   150  0293                     	;# 
   151  0294                     	;# 
   152  0295                     	;# 
   153  0295                     	;# 
   154  0296                     	;# 
   155  0298                     	;# 
   156  0298                     	;# 
   157  0299                     	;# 
   158  029A                     	;# 
   159  029B                     	;# 
   160  029C                     	;# 
   161  029C                     	;# 
   162  029D                     	;# 
   163  029E                     	;# 
   164  029F                     	;# 
   165  0311                     	;# 
   166  0311                     	;# 
   167  0312                     	;# 
   168  0313                     	;# 
   169  0314                     	;# 
   170  0315                     	;# 
   171  0315                     	;# 
   172  0316                     	;# 
   173  0318                     	;# 
   174  0318                     	;# 
   175  0319                     	;# 
   176  031A                     	;# 
   177  031C                     	;# 
   178  031C                     	;# 
   179  031D                     	;# 
   180  031E                     	;# 
   181  0394                     	;# 
   182  0395                     	;# 
   183  0396                     	;# 
   184  0415                     	;# 
   185  0416                     	;# 
   186  0417                     	;# 
   187  041C                     	;# 
   188  041D                     	;# 
   189  041E                     	;# 
   190  0791                     	;# 
   191  0792                     	;# 
   192  0793                     	;# 
   193  0794                     	;# 
   194  0795                     	;# 
   195  0798                     	;# 
   196  0799                     	;# 
   197  07A0                     	;# 
   198  07A1                     	;# 
   199  07A3                     	;# 
   200  07A4                     	;# 
   201  07A6                     	;# 
   202  07A7                     	;# 
   203  07A9                     	;# 
   204  07AA                     	;# 
   205  0FE4                     	;# 
   206  0FE5                     	;# 
   207  0FE6                     	;# 
   208  0FE7                     	;# 
   209  0FE8                     	;# 
   210  0FE9                     	;# 
   211  0FEA                     	;# 
   212  0FEB                     	;# 
   213  0FED                     	;# 
   214  0FEE                     	;# 
   215  0FEF                     	;# 
   216  0000                     	;# 
   217  0001                     	;# 
   218  0002                     	;# 
   219  0003                     	;# 
   220  0004                     	;# 
   221  0005                     	;# 
   222  0006                     	;# 
   223  0007                     	;# 
   224  0008                     	;# 
   225  0009                     	;# 
   226  000A                     	;# 
   227  000B                     	;# 
   228  000C                     	;# 
   229  000D                     	;# 
   230  000E                     	;# 
   231  0010                     	;# 
   232  0011                     	;# 
   233  0012                     	;# 
   234  0013                     	;# 
   235  0015                     	;# 
   236  0016                     	;# 
   237  0016                     	;# 
   238  0017                     	;# 
   239  0018                     	;# 
   240  0019                     	;# 
   241  001A                     	;# 
   242  001B                     	;# 
   243  001C                     	;# 
   244  001E                     	;# 
   245  001F                     	;# 
   246  008C                     	;# 
   247  008D                     	;# 
   248  008E                     	;# 
   249  0090                     	;# 
   250  0091                     	;# 
   251  0092                     	;# 
   252  0093                     	;# 
   253  0095                     	;# 
   254  0096                     	;# 
   255  0097                     	;# 
   256  0098                     	;# 
   257  0099                     	;# 
   258  009A                     	;# 
   259  009B                     	;# 
   260  009B                     	;# 
   261  009C                     	;# 
   262  009D                     	;# 
   263  009E                     	;# 
   264  010C                     	;# 
   265  010D                     	;# 
   266  010E                     	;# 
   267  0110                     	;# 
   268  0111                     	;# 
   269  0112                     	;# 
   270  0113                     	;# 
   271  0114                     	;# 
   272  0115                     	;# 
   273  0116                     	;# 
   274  0117                     	;# 
   275  0118                     	;# 
   276  0119                     	;# 
   277  011A                     	;# 
   278  011B                     	;# 
   279  011D                     	;# 
   280  018C                     	;# 
   281  018D                     	;# 
   282  0191                     	;# 
   283  0191                     	;# 
   284  0192                     	;# 
   285  0193                     	;# 
   286  0193                     	;# 
   287  0193                     	;# 
   288  0194                     	;# 
   289  0195                     	;# 
   290  0196                     	;# 
   291  0199                     	;# 
   292  019A                     	;# 
   293  019B                     	;# 
   294  019B                     	;# 
   295  019B                     	;# 
   296  019B                     	;# 
   297  019C                     	;# 
   298  019C                     	;# 
   299  019D                     	;# 
   300  019E                     	;# 
   301  019F                     	;# 
   302  020D                     	;# 
   303  0210                     	;# 
   304  0211                     	;# 
   305  0212                     	;# 
   306  0213                     	;# 
   307  0214                     	;# 
   308  0215                     	;# 
   309  0215                     	;# 
   310  0216                     	;# 
   311  0217                     	;# 
   312  0291                     	;# 
   313  0291                     	;# 
   314  0292                     	;# 
   315  0293                     	;# 
   316  0294                     	;# 
   317  0295                     	;# 
   318  0295                     	;# 
   319  0296                     	;# 
   320  0298                     	;# 
   321  0298                     	;# 
   322  0299                     	;# 
   323  029A                     	;# 
   324  029B                     	;# 
   325  029C                     	;# 
   326  029C                     	;# 
   327  029D                     	;# 
   328  029E                     	;# 
   329  029F                     	;# 
   330  0311                     	;# 
   331  0311                     	;# 
   332  0312                     	;# 
   333  0313                     	;# 
   334  0314                     	;# 
   335  0315                     	;# 
   336  0315                     	;# 
   337  0316                     	;# 
   338  0318                     	;# 
   339  0318                     	;# 
   340  0319                     	;# 
   341  031A                     	;# 
   342  031C                     	;# 
   343  031C                     	;# 
   344  031D                     	;# 
   345  031E                     	;# 
   346  0394                     	;# 
   347  0395                     	;# 
   348  0396                     	;# 
   349  0415                     	;# 
   350  0416                     	;# 
   351  0417                     	;# 
   352  041C                     	;# 
   353  041D                     	;# 
   354  041E                     	;# 
   355  0791                     	;# 
   356  0792                     	;# 
   357  0793                     	;# 
   358  0794                     	;# 
   359  0795                     	;# 
   360  0798                     	;# 
   361  0799                     	;# 
   362  07A0                     	;# 
   363  07A1                     	;# 
   364  07A3                     	;# 
   365  07A4                     	;# 
   366  07A6                     	;# 
   367  07A7                     	;# 
   368  07A9                     	;# 
   369  07AA                     	;# 
   370  0FE4                     	;# 
   371  0FE5                     	;# 
   372  0FE6                     	;# 
   373  0FE7                     	;# 
   374  0FE8                     	;# 
   375  0FE9                     	;# 
   376  0FEA                     	;# 
   377  0FEB                     	;# 
   378  0FED                     	;# 
   379  0FEE                     	;# 
   380  0FEF                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  0010                     	;# 
   397  0011                     	;# 
   398  0012                     	;# 
   399  0013                     	;# 
   400  0015                     	;# 
   401  0016                     	;# 
   402  0016                     	;# 
   403  0017                     	;# 
   404  0018                     	;# 
   405  0019                     	;# 
   406  001A                     	;# 
   407  001B                     	;# 
   408  001C                     	;# 
   409  001E                     	;# 
   410  001F                     	;# 
   411  008C                     	;# 
   412  008D                     	;# 
   413  008E                     	;# 
   414  0090                     	;# 
   415  0091                     	;# 
   416  0092                     	;# 
   417  0093                     	;# 
   418  0095                     	;# 
   419  0096                     	;# 
   420  0097                     	;# 
   421  0098                     	;# 
   422  0099                     	;# 
   423  009A                     	;# 
   424  009B                     	;# 
   425  009B                     	;# 
   426  009C                     	;# 
   427  009D                     	;# 
   428  009E                     	;# 
   429  010C                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  0110                     	;# 
   433  0111                     	;# 
   434  0112                     	;# 
   435  0113                     	;# 
   436  0114                     	;# 
   437  0115                     	;# 
   438  0116                     	;# 
   439  0117                     	;# 
   440  0118                     	;# 
   441  0119                     	;# 
   442  011A                     	;# 
   443  011B                     	;# 
   444  011D                     	;# 
   445  018C                     	;# 
   446  018D                     	;# 
   447  0191                     	;# 
   448  0191                     	;# 
   449  0192                     	;# 
   450  0193                     	;# 
   451  0193                     	;# 
   452  0193                     	;# 
   453  0194                     	;# 
   454  0195                     	;# 
   455  0196                     	;# 
   456  0199                     	;# 
   457  019A                     	;# 
   458  019B                     	;# 
   459  019B                     	;# 
   460  019B                     	;# 
   461  019B                     	;# 
   462  019C                     	;# 
   463  019C                     	;# 
   464  019D                     	;# 
   465  019E                     	;# 
   466  019F                     	;# 
   467  020D                     	;# 
   468  0210                     	;# 
   469  0211                     	;# 
   470  0212                     	;# 
   471  0213                     	;# 
   472  0214                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0217                     	;# 
   477  0291                     	;# 
   478  0291                     	;# 
   479  0292                     	;# 
   480  0293                     	;# 
   481  0294                     	;# 
   482  0295                     	;# 
   483  0295                     	;# 
   484  0296                     	;# 
   485  0298                     	;# 
   486  0298                     	;# 
   487  0299                     	;# 
   488  029A                     	;# 
   489  029B                     	;# 
   490  029C                     	;# 
   491  029C                     	;# 
   492  029D                     	;# 
   493  029E                     	;# 
   494  029F                     	;# 
   495  0311                     	;# 
   496  0311                     	;# 
   497  0312                     	;# 
   498  0313                     	;# 
   499  0314                     	;# 
   500  0315                     	;# 
   501  0315                     	;# 
   502  0316                     	;# 
   503  0318                     	;# 
   504  0318                     	;# 
   505  0319                     	;# 
   506  031A                     	;# 
   507  031C                     	;# 
   508  031C                     	;# 
   509  031D                     	;# 
   510  031E                     	;# 
   511  0394                     	;# 
   512  0395                     	;# 
   513  0396                     	;# 
   514  0415                     	;# 
   515  0416                     	;# 
   516  0417                     	;# 
   517  041C                     	;# 
   518  041D                     	;# 
   519  041E                     	;# 
   520  0791                     	;# 
   521  0792                     	;# 
   522  0793                     	;# 
   523  0794                     	;# 
   524  0795                     	;# 
   525  0798                     	;# 
   526  0799                     	;# 
   527  07A0                     	;# 
   528  07A1                     	;# 
   529  07A3                     	;# 
   530  07A4                     	;# 
   531  07A6                     	;# 
   532  07A7                     	;# 
   533  07A9                     	;# 
   534  07AA                     	;# 
   535  0FE4                     	;# 
   536  0FE5                     	;# 
   537  0FE6                     	;# 
   538  0FE7                     	;# 
   539  0FE8                     	;# 
   540  0FE9                     	;# 
   541  0FEA                     	;# 
   542  0FEB                     	;# 
   543  0FED                     	;# 
   544  0FEE                     	;# 
   545  0FEF                     	;# 
   546  0000                     	;# 
   547  0001                     	;# 
   548  0002                     	;# 
   549  0003                     	;# 
   550  0004                     	;# 
   551  0005                     	;# 
   552  0006                     	;# 
   553  0007                     	;# 
   554  0008                     	;# 
   555  0009                     	;# 
   556  000A                     	;# 
   557  000B                     	;# 
   558  000C                     	;# 
   559  000D                     	;# 
   560  000E                     	;# 
   561  0010                     	;# 
   562  0011                     	;# 
   563  0012                     	;# 
   564  0013                     	;# 
   565  0015                     	;# 
   566  0016                     	;# 
   567  0016                     	;# 
   568  0017                     	;# 
   569  0018                     	;# 
   570  0019                     	;# 
   571  001A                     	;# 
   572  001B                     	;# 
   573  001C                     	;# 
   574  001E                     	;# 
   575  001F                     	;# 
   576  008C                     	;# 
   577  008D                     	;# 
   578  008E                     	;# 
   579  0090                     	;# 
   580  0091                     	;# 
   581  0092                     	;# 
   582  0093                     	;# 
   583  0095                     	;# 
   584  0096                     	;# 
   585  0097                     	;# 
   586  0098                     	;# 
   587  0099                     	;# 
   588  009A                     	;# 
   589  009B                     	;# 
   590  009B                     	;# 
   591  009C                     	;# 
   592  009D                     	;# 
   593  009E                     	;# 
   594  010C                     	;# 
   595  010D                     	;# 
   596  010E                     	;# 
   597  0110                     	;# 
   598  0111                     	;# 
   599  0112                     	;# 
   600  0113                     	;# 
   601  0114                     	;# 
   602  0115                     	;# 
   603  0116                     	;# 
   604  0117                     	;# 
   605  0118                     	;# 
   606  0119                     	;# 
   607  011A                     	;# 
   608  011B                     	;# 
   609  011D                     	;# 
   610  018C                     	;# 
   611  018D                     	;# 
   612  0191                     	;# 
   613  0191                     	;# 
   614  0192                     	;# 
   615  0193                     	;# 
   616  0193                     	;# 
   617  0193                     	;# 
   618  0194                     	;# 
   619  0195                     	;# 
   620  0196                     	;# 
   621  0199                     	;# 
   622  019A                     	;# 
   623  019B                     	;# 
   624  019B                     	;# 
   625  019B                     	;# 
   626  019B                     	;# 
   627  019C                     	;# 
   628  019C                     	;# 
   629  019D                     	;# 
   630  019E                     	;# 
   631  019F                     	;# 
   632  020D                     	;# 
   633  0210                     	;# 
   634  0211                     	;# 
   635  0212                     	;# 
   636  0213                     	;# 
   637  0214                     	;# 
   638  0215                     	;# 
   639  0215                     	;# 
   640  0216                     	;# 
   641  0217                     	;# 
   642  0291                     	;# 
   643  0291                     	;# 
   644  0292                     	;# 
   645  0293                     	;# 
   646  0294                     	;# 
   647  0295                     	;# 
   648  0295                     	;# 
   649  0296                     	;# 
   650  0298                     	;# 
   651  0298                     	;# 
   652  0299                     	;# 
   653  029A                     	;# 
   654  029B                     	;# 
   655  029C                     	;# 
   656  029C                     	;# 
   657  029D                     	;# 
   658  029E                     	;# 
   659  029F                     	;# 
   660  0311                     	;# 
   661  0311                     	;# 
   662  0312                     	;# 
   663  0313                     	;# 
   664  0314                     	;# 
   665  0315                     	;# 
   666  0315                     	;# 
   667  0316                     	;# 
   668  0318                     	;# 
   669  0318                     	;# 
   670  0319                     	;# 
   671  031A                     	;# 
   672  031C                     	;# 
   673  031C                     	;# 
   674  031D                     	;# 
   675  031E                     	;# 
   676  0394                     	;# 
   677  0395                     	;# 
   678  0396                     	;# 
   679  0415                     	;# 
   680  0416                     	;# 
   681  0417                     	;# 
   682  041C                     	;# 
   683  041D                     	;# 
   684  041E                     	;# 
   685  0791                     	;# 
   686  0792                     	;# 
   687  0793                     	;# 
   688  0794                     	;# 
   689  0795                     	;# 
   690  0798                     	;# 
   691  0799                     	;# 
   692  07A0                     	;# 
   693  07A1                     	;# 
   694  07A3                     	;# 
   695  07A4                     	;# 
   696  07A6                     	;# 
   697  07A7                     	;# 
   698  07A9                     	;# 
   699  07AA                     	;# 
   700  0FE4                     	;# 
   701  0FE5                     	;# 
   702  0FE6                     	;# 
   703  0FE7                     	;# 
   704  0FE8                     	;# 
   705  0FE9                     	;# 
   706  0FEA                     	;# 
   707  0FEB                     	;# 
   708  0FED                     	;# 
   709  0FEE                     	;# 
   710  0FEF                     	;# 
   711  0000                     	;# 
   712  0001                     	;# 
   713  0002                     	;# 
   714  0003                     	;# 
   715  0004                     	;# 
   716  0005                     	;# 
   717  0006                     	;# 
   718  0007                     	;# 
   719  0008                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  0010                     	;# 
   727  0011                     	;# 
   728  0012                     	;# 
   729  0013                     	;# 
   730  0015                     	;# 
   731  0016                     	;# 
   732  0016                     	;# 
   733  0017                     	;# 
   734  0018                     	;# 
   735  0019                     	;# 
   736  001A                     	;# 
   737  001B                     	;# 
   738  001C                     	;# 
   739  001E                     	;# 
   740  001F                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  0090                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0093                     	;# 
   748  0095                     	;# 
   749  0096                     	;# 
   750  0097                     	;# 
   751  0098                     	;# 
   752  0099                     	;# 
   753  009A                     	;# 
   754  009B                     	;# 
   755  009B                     	;# 
   756  009C                     	;# 
   757  009D                     	;# 
   758  009E                     	;# 
   759  010C                     	;# 
   760  010D                     	;# 
   761  010E                     	;# 
   762  0110                     	;# 
   763  0111                     	;# 
   764  0112                     	;# 
   765  0113                     	;# 
   766  0114                     	;# 
   767  0115                     	;# 
   768  0116                     	;# 
   769  0117                     	;# 
   770  0118                     	;# 
   771  0119                     	;# 
   772  011A                     	;# 
   773  011B                     	;# 
   774  011D                     	;# 
   775  018C                     	;# 
   776  018D                     	;# 
   777  0191                     	;# 
   778  0191                     	;# 
   779  0192                     	;# 
   780  0193                     	;# 
   781  0193                     	;# 
   782  0193                     	;# 
   783  0194                     	;# 
   784  0195                     	;# 
   785  0196                     	;# 
   786  0199                     	;# 
   787  019A                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019B                     	;# 
   791  019B                     	;# 
   792  019C                     	;# 
   793  019C                     	;# 
   794  019D                     	;# 
   795  019E                     	;# 
   796  019F                     	;# 
   797  020D                     	;# 
   798  0210                     	;# 
   799  0211                     	;# 
   800  0212                     	;# 
   801  0213                     	;# 
   802  0214                     	;# 
   803  0215                     	;# 
   804  0215                     	;# 
   805  0216                     	;# 
   806  0217                     	;# 
   807  0291                     	;# 
   808  0291                     	;# 
   809  0292                     	;# 
   810  0293                     	;# 
   811  0294                     	;# 
   812  0295                     	;# 
   813  0295                     	;# 
   814  0296                     	;# 
   815  0298                     	;# 
   816  0298                     	;# 
   817  0299                     	;# 
   818  029A                     	;# 
   819  029B                     	;# 
   820  029C                     	;# 
   821  029C                     	;# 
   822  029D                     	;# 
   823  029E                     	;# 
   824  029F                     	;# 
   825  0311                     	;# 
   826  0311                     	;# 
   827  0312                     	;# 
   828  0313                     	;# 
   829  0314                     	;# 
   830  0315                     	;# 
   831  0315                     	;# 
   832  0316                     	;# 
   833  0318                     	;# 
   834  0318                     	;# 
   835  0319                     	;# 
   836  031A                     	;# 
   837  031C                     	;# 
   838  031C                     	;# 
   839  031D                     	;# 
   840  031E                     	;# 
   841  0394                     	;# 
   842  0395                     	;# 
   843  0396                     	;# 
   844  0415                     	;# 
   845  0416                     	;# 
   846  0417                     	;# 
   847  041C                     	;# 
   848  041D                     	;# 
   849  041E                     	;# 
   850  0791                     	;# 
   851  0792                     	;# 
   852  0793                     	;# 
   853  0794                     	;# 
   854  0795                     	;# 
   855  0798                     	;# 
   856  0799                     	;# 
   857  07A0                     	;# 
   858  07A1                     	;# 
   859  07A3                     	;# 
   860  07A4                     	;# 
   861  07A6                     	;# 
   862  07A7                     	;# 
   863  07A9                     	;# 
   864  07AA                     	;# 
   865  0FE4                     	;# 
   866  0FE5                     	;# 
   867  0FE6                     	;# 
   868  0FE7                     	;# 
   869  0FE8                     	;# 
   870  0FE9                     	;# 
   871  0FEA                     	;# 
   872  0FEB                     	;# 
   873  0FED                     	;# 
   874  0FEE                     	;# 
   875  0FEF                     	;# 
   876                           
   877                           	psect	idataBANK0
   878  0000                     __pidataBANK0:	
   879                           
   880                           	psect	stringtext1
   881  081E                     __pstringtext1:	
   882  081E                     _dpowers:	
   883  081E  3401               	retlw	1
   884  081F  3400               	retlw	0
   885  0820  340A               	retlw	10
   886  0821  3400               	retlw	0
   887  0822  3464               	retlw	100
   888  0823  3400               	retlw	0
   889  0824  34E8               	retlw	232
   890  0825  3403               	retlw	3
   891  0826  3410               	retlw	16
   892  0827  3427               	retlw	39
   893  0828                     __end_of_dpowers:	
   894                           
   895                           	psect	stringtext2
   896  0800                     __pstringtext2:	
   897  0800                     TextLCD_Puts@DDRAM_Start_Address:	
   898  0800  3480               	retlw	128
   899  0801  34C0               	retlw	192
   900  0802  3490               	retlw	144
   901  0803  34D0               	retlw	208
   902  0804                     __end_ofTextLCD_Puts@DDRAM_Start_Address:	
   903  0018                     _T1CONbits	set	24
   904  0011                     _PIR1bits	set	17
   905  0016                     _TMR1L	set	22
   906  0017                     _TMR1H	set	23
   907  0019                     _T1GCON	set	25
   908  0018                     _T1CON	set	24
   909  0097                     _WDTCON	set	151
   910  0098                     _OSCTUNE	set	152
   911  0099                     _OSCCON	set	153
   912  0095                     _OPTION_REGbits	set	149
   913  008E                     _TRISC	set	142
   914  008D                     _TRISB	set	141
   915  008C                     _TRISA	set	140
   916  0090                     _TRISE	set	144
   917  04D6                     _PLLR	set	1238
   918  010E                     _LATCbits	set	270
   919  011D                     _APFCON	set	285
   920  010E                     _LATC	set	270
   921  010D                     _LATB	set	269
   922  010C                     _LATA	set	268
   923  0110                     _LATE	set	272
   924  018C                     _ANSELA	set	396
   925  018D                     _ANSELB	set	397
   926  020D                     _WPUB	set	525
   927  0210                     _WPUE	set	528
   928  0804                     STR_1:	
   929  0804  3431               	retlw	49	;'1'
   930  0805  3436               	retlw	54	;'6'
   931  0806  342D               	retlw	45	;'-'
   932  0807  3442               	retlw	66	;'B'
   933  0808  3469               	retlw	105	;'i'
   934  0809  3474               	retlw	116	;'t'
   935  080A  3420               	retlw	32	;' '
   936  080B  3443               	retlw	67	;'C'
   937  080C  346F               	retlw	111	;'o'
   938  080D  3475               	retlw	117	;'u'
   939  080E  346E               	retlw	110	;'n'
   940  080F  3474               	retlw	116	;'t'
   941  0810  3465               	retlw	101	;'e'
   942  0811  3472               	retlw	114	;'r'
   943  0812  3400               	retlw	0
   944                           
   945                           	psect	stringtext3
   946  0813                     __pstringtext3:	
   947  0813                     STR_2:	
   948  0813  3463               	retlw	99	;'c'
   949  0814  346F               	retlw	111	;'o'
   950  0815  3475               	retlw	117	;'u'
   951  0816  346E               	retlw	110	;'n'
   952  0817  3474               	retlw	116	;'t'
   953  0818  343D               	retlw	61	;'='
   954  0819  3425               	retlw	37	;'%'
   955  081A  3430               	retlw	48	;'0'
   956  081B  3435               	retlw	53	;'5'
   957  081C  3464               	retlw	100	;'d'
   958  081D  3400               	retlw	0
   959                           
   960                           	psect	stringtext4
   961  0000                     __pstringtext4:	
   962                           
   963                           ; #config settings
   964  0000                     
   965                           	psect	cinit
   966  053D                     start_initialization:	
   967  053D                     __initialization:	
   968                           
   969                           ;initializer for main@prv_count
   970  053D  3001               	movlw	1
   971  053E  00C3               	movwf	__pdataBANK0& (0+127)
   972  053F  01C4               	clrf	(__pdataBANK0+1)& (0+127)
   973                           
   974                           ; Clear objects allocated to COMMON
   975  0540  01FC               	clrf	__pbssCOMMON& (0+127)
   976  0541  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   977  0542                     end_of_initialization:	
   978                           ;End of C runtime variable initialization code
   979                           
   980  0542                     __end_of__initialization:	
   981  0542  0020               	movlb	0
   982  0543  2D44               	ljmp	_main	;jump to C main() function
   983  0544                     __pmaintext:	
   984 ;;
   985 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   986 ;;
   987 ;; *************** function _main *****************
   988 ;; Defined at:
   989 ;;		line 4 in file "main.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;		None
   992 ;; Auto vars:     Size  Location     Type
   993 ;;  str            16   17[BANK0 ] unsigned char [16]
   994 ;;  pre_count       2   33[BANK0 ] unsigned int 
   995 ;; Return value:  Size  Location     Type
   996 ;;                  1    wreg      void 
   997 ;; Registers used:
   998 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   999 ;; Tracked objects:
  1000 ;;		On entry : B1F/0
  1001 ;;		On exit  : 0/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1004 ;;      Params:         0       0       0       0       0       0       0       0
  1005 ;;      Locals:         0      18       0       0       0       0       0       0
  1006 ;;      Temps:          0       0       0       0       0       0       0       0
  1007 ;;      Totals:         0      18       0       0       0       0       0       0
  1008 ;;Total ram usage:       18 bytes
  1009 ;; Hardware stack levels required when called:    4
  1010 ;; This function calls:
  1011 ;;		_SYSTEM_Initialize
  1012 ;;		_TMR1_ReadTimer
  1013 ;;		_TextLCD_Init
  1014 ;;		_TextLCD_Puts
  1015 ;;		_sprintf
  1016 ;; This function is called by:
  1017 ;;		Startup code after reset
  1018 ;; This function uses a non-reentrant model
  1019 ;;
  1020                           
  1021                           
  1022                           ;psect for function _main
  1023  0544                     _main:	
  1024                           
  1025                           ;main.c: 6: SYSTEM_Initialize();
  1026                           
  1027                           ;incstack = 0
  1028                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1029  0544  2624  3185         	fcall	_SYSTEM_Initialize
  1030                           
  1031                           ;main.c: 7: TextLCD_Init();
  1032  0546  25B5  3185         	fcall	_TextLCD_Init
  1033  0548  3004               	movlw	low (STR_1| (0+32768))
  1034                           
  1035                           ;main.c: 8: TextLCD_Puts(0, 1, (uint8_t *)"16-Bit Counter", 0);
  1036  0549  01F3               	clrf	TextLCD_Puts@idx
  1037  054A  0AF3               	incf	TextLCD_Puts@idx,f
  1038  054B  00F4               	movwf	TextLCD_Puts@data
  1039  054C  3088               	movlw	high (STR_1| (0+32768))
  1040  054D  00F5               	movwf	TextLCD_Puts@data+1
  1041  054E  3000               	movlw	0
  1042  054F                     L1:	
  1043  054F  01F6               	clrf	TextLCD_Puts@length_or_type
  1044  0550  2576  3185         	fcall	_TextLCD_Puts
  1045  0552                     l1307:	
  1046                           
  1047                           ;main.c: 10: {
  1048                           ;main.c: 11: static uint16_t prv_count=1;
  1049                           ;main.c: 12: uint16_t pre_count=TMR1_ReadTimer();
  1050  0552  264D  3185         	fcall	_TMR1_ReadTimer
  1051  0554  0871               	movf	?_TMR1_ReadTimer+1,w
  1052  0555  00C2               	movwf	main@pre_count+1
  1053  0556  0870               	movf	?_TMR1_ReadTimer,w
  1054  0557  00C1               	movwf	main@pre_count
  1055                           
  1056                           ;main.c: 13: if(prv_count!=pre_count)
  1057  0558  0842               	movf	main@pre_count+1,w
  1058  0559  0644               	xorwf	main@prv_count+1,w
  1059  055A  1D03               	skipz
  1060  055B  2D5E               	goto	u705
  1061  055C  0841               	movf	main@pre_count,w
  1062  055D  0643               	xorwf	main@prv_count,w
  1063  055E                     u705:	
  1064  055E  1903               	skipnz
  1065  055F  2D52               	goto	l1307
  1066                           
  1067                           ;main.c: 14: {
  1068                           ;main.c: 15: uint8_t str[16];
  1069                           ;main.c: 16: prv_count=pre_count;
  1070  0560  0842               	movf	main@pre_count+1,w
  1071  0561  00C4               	movwf	main@prv_count+1
  1072  0562  0841               	movf	main@pre_count,w
  1073  0563  00C3               	movwf	main@prv_count
  1074                           
  1075                           ;main.c: 17: sprintf(str, "count=%05d", pre_count);
  1076  0564  3013               	movlw	low (STR_2| (0+32768))
  1077  0565  00A0               	movwf	sprintf@f
  1078  0566  3088               	movlw	high (STR_2| (0+32768))
  1079  0567  00A1               	movwf	sprintf@f+1
  1080  0568  0842               	movf	main@pre_count+1,w
  1081  0569  00A3               	movwf	?_sprintf+3
  1082  056A  0841               	movf	main@pre_count,w
  1083  056B  00A2               	movwf	?_sprintf+2
  1084  056C  3031               	movlw	(low (main@str| 0))& (0+255)
  1085  056D  265B  3185         	fcall	_sprintf
  1086  056F  3031               	movlw	low main@str
  1087                           
  1088                           ;main.c: 18: TextLCD_Puts(1, 0, str, 0);
  1089  0570  01F3               	clrf	TextLCD_Puts@idx
  1090  0571  00F4               	movwf	TextLCD_Puts@data
  1091  0572  3000               	movlw	high main@str
  1092  0573  00F5               	movwf	TextLCD_Puts@data+1
  1093  0574  3001               	movlw	1
  1094  0575  2D4F               	goto	L1
  1095  0576                     __end_of_main:	
  1096  0576                     __ptext6:	
  1097 ;; *************** function _TextLCD_Puts *****************
  1098 ;; Defined at:
  1099 ;;		line 38 in file "TextLCD.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;  line            1    wreg     unsigned char 
  1102 ;;  idx             1    3[COMMON] unsigned char 
  1103 ;;  data            2    4[COMMON] PTR unsigned char 
  1104 ;;		 -> main@str(16), STR_1(15), 
  1105 ;;  length_or_ty    1    6[COMMON] unsigned char 
  1106 ;; Auto vars:     Size  Location     Type
  1107 ;;  line            1    8[COMMON] unsigned char 
  1108 ;;  address         1    9[COMMON] unsigned char 
  1109 ;; Return value:  Size  Location     Type
  1110 ;;                  1    wreg      void 
  1111 ;; Registers used:
  1112 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1113 ;; Tracked objects:
  1114 ;;		On entry : 0/0
  1115 ;;		On exit  : 0/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1118 ;;      Params:         4       0       0       0       0       0       0       0
  1119 ;;      Locals:         2       0       0       0       0       0       0       0
  1120 ;;      Temps:          1       0       0       0       0       0       0       0
  1121 ;;      Totals:         7       0       0       0       0       0       0       0
  1122 ;;Total ram usage:        7 bytes
  1123 ;; Hardware stack levels used:    1
  1124 ;; Hardware stack levels required when called:    3
  1125 ;; This function calls:
  1126 ;;		_TextLCD_CMD
  1127 ;;		_TextLCD_PutChar
  1128 ;; This function is called by:
  1129 ;;		_main
  1130 ;; This function uses a non-reentrant model
  1131 ;;
  1132                           
  1133                           
  1134                           ;psect for function _TextLCD_Puts
  1135  0576                     _TextLCD_Puts:	
  1136                           
  1137                           ;incstack = 0
  1138                           ; Regs used in _TextLCD_Puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1139                           ;TextLCD_Puts@line stored from wreg
  1140  0576  00F8               	movwf	TextLCD_Puts@line
  1141                           
  1142                           ;TextLCD.c: 40: const uint8_t DDRAM_Start_Address[4]={0x80, 0xC0, 0x90, 0xD0};
  1143                           ;TextLCD.c: 41: line&=0b11;
  1144  0577  3003               	movlw	3
  1145  0578  05F8               	andwf	TextLCD_Puts@line,f
  1146                           
  1147                           ;TextLCD.c: 42: idx&=0b1111;
  1148  0579  300F               	movlw	15
  1149  057A  05F3               	andwf	TextLCD_Puts@idx,f
  1150                           
  1151                           ;TextLCD.c: 43: uint8_t address=DDRAM_Start_Address[line]+idx;
  1152  057B  0878               	movf	TextLCD_Puts@line,w
  1153  057C  3E00               	addlw	low (TextLCD_Puts@DDRAM_Start_Address| (0+32768))
  1154  057D  0084               	movwf	4
  1155  057E  3088               	movlw	high (TextLCD_Puts@DDRAM_Start_Address| (0+32768))
  1156  057F  1803               	skipnc
  1157  0580  3E01               	addlw	1
  1158  0581  0085               	movwf	5
  1159  0582  0800               	movf	0,w	;code access
  1160  0583  0773               	addwf	TextLCD_Puts@idx,w
  1161  0584  00F9               	movwf	TextLCD_Puts@address
  1162                           
  1163                           ;TextLCD.c: 44: TextLCD_CMD(address);
  1164  0585  0879               	movf	TextLCD_Puts@address,w
  1165  0586  25FF  3185         	fcall	_TextLCD_CMD
  1166                           
  1167                           ;TextLCD.c: 45: _delay((unsigned long)((50)*(32000000/4000000.0)));
  1168  0588  3085               	movlw	133
  1169  0589                     u717:	
  1170  0589  0B89               	decfsz	9,f
  1171  058A  2D89               	goto	u717
  1172  058B  0000               	nop
  1173                           
  1174                           ;TextLCD.c: 47: if(length_or_type==0) while(*data!=0) TextLCD_PutChar(*data++);
  1175  058C  0876               	movf	TextLCD_Puts@length_or_type,w
  1176  058D  1903               	btfsc	3,2
  1177  058E  2D97               	goto	l1173
  1178  058F  2D9F               	goto	l1175
  1179  0590                     l1169:	
  1180  0590  27FA  3185         	fcall	PL14	;call to abstracted procedure
  1181  0592  25AD  3185         	fcall	_TextLCD_PutChar
  1182  0594  0AF4               	incf	TextLCD_Puts@data,f
  1183  0595  1903               	skipnz
  1184  0596  0AF5               	incf	TextLCD_Puts@data+1,f
  1185  0597                     l1173:	
  1186  0597  0874               	movf	TextLCD_Puts@data,w
  1187  0598  0084               	movwf	4
  1188  0599  0875               	movf	TextLCD_Puts@data+1,w
  1189  059A  0085               	movwf	5
  1190  059B  0012               	moviw fsr0++
  1191  059C  1903               	btfsc	3,2
  1192  059D  0008               	return
  1193  059E  2D90               	goto	l1169
  1194  059F                     l1175:	
  1195                           
  1196                           ;TextLCD.c: 48: else for(address=0; address<length_or_type; address++) TextLCD_PutChar(*
      +                          data++);
  1197  059F  01F9               	clrf	TextLCD_Puts@address
  1198  05A0                     l1183:	
  1199  05A0  0876               	movf	TextLCD_Puts@length_or_type,w
  1200  05A1  0279               	subwf	TextLCD_Puts@address,w
  1201  05A2  1803               	btfsc	3,0
  1202  05A3  0008               	return
  1203  05A4  27FA  3185         	fcall	PL14	;call to abstracted procedure
  1204  05A6  25AD  3185         	fcall	_TextLCD_PutChar
  1205  05A8  0AF4               	incf	TextLCD_Puts@data,f
  1206  05A9  1903               	skipnz
  1207  05AA  0AF5               	incf	TextLCD_Puts@data+1,f
  1208  05AB  0AF9               	incf	TextLCD_Puts@address,f
  1209  05AC  2DA0               	goto	l1183
  1210  05AD                     __end_of_TextLCD_Puts:	
  1211  05AD                     __ptext7:	
  1212 ;; *************** function _TextLCD_PutChar *****************
  1213 ;; Defined at:
  1214 ;;		line 31 in file "TextLCD.c"
  1215 ;; Parameters:    Size  Location     Type
  1216 ;;  data            1    wreg     unsigned char 
  1217 ;; Auto vars:     Size  Location     Type
  1218 ;;  data            1    2[COMMON] unsigned char 
  1219 ;; Return value:  Size  Location     Type
  1220 ;;                  1    wreg      void 
  1221 ;; Registers used:
  1222 ;;		wreg, status,2, status,0, pclath, cstack
  1223 ;; Tracked objects:
  1224 ;;		On entry : 0/0
  1225 ;;		On exit  : 1F/2
  1226 ;;		Unchanged: 0/0
  1227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1228 ;;      Params:         0       0       0       0       0       0       0       0
  1229 ;;      Locals:         1       0       0       0       0       0       0       0
  1230 ;;      Temps:          0       0       0       0       0       0       0       0
  1231 ;;      Totals:         1       0       0       0       0       0       0       0
  1232 ;;Total ram usage:        1 bytes
  1233 ;; Hardware stack levels used:    1
  1234 ;; Hardware stack levels required when called:    2
  1235 ;; This function calls:
  1236 ;;		_TextLCD_CMD
  1237 ;; This function is called by:
  1238 ;;		_TextLCD_Puts
  1239 ;; This function uses a non-reentrant model
  1240 ;;
  1241                           
  1242                           
  1243                           ;psect for function _TextLCD_PutChar
  1244  05AD                     _TextLCD_PutChar:	
  1245                           
  1246                           ;incstack = 0
  1247                           ; Regs used in _TextLCD_PutChar: [wreg+status,2+status,0+pclath+cstack]
  1248                           ;TextLCD_PutChar@data stored from wreg
  1249  05AD  00F2               	movwf	TextLCD_PutChar@data
  1250                           
  1251                           ;TextLCD.c: 33: LATCbits.LATC1=1;
  1252  05AE  0022               	movlb	2	; select bank2
  1253  05AF  148E               	bsf	14,1	;volatile
  1254                           
  1255                           ;TextLCD.c: 34: TextLCD_CMD(data);
  1256  05B0  0872               	movf	TextLCD_PutChar@data,w
  1257  05B1  25FF               	fcall	_TextLCD_CMD
  1258                           
  1259                           ;TextLCD.c: 35: LATCbits.LATC1=0;
  1260  05B2  0022               	movlb	2	; select bank2
  1261  05B3  108E               	bcf	14,1	;volatile
  1262  05B4  0008               	return
  1263  05B5                     __end_of_TextLCD_PutChar:	
  1264  05B5                     __ptext8:	
  1265 ;; *************** function _TextLCD_Init *****************
  1266 ;; Defined at:
  1267 ;;		line 56 in file "TextLCD.c"
  1268 ;; Parameters:    Size  Location     Type
  1269 ;;		None
  1270 ;; Auto vars:     Size  Location     Type
  1271 ;;		None
  1272 ;; Return value:  Size  Location     Type
  1273 ;;                  1    wreg      void 
  1274 ;; Registers used:
  1275 ;;		wreg, status,2, status,0, pclath, cstack
  1276 ;; Tracked objects:
  1277 ;;		On entry : B1F/0
  1278 ;;		On exit  : 0/0
  1279 ;;		Unchanged: 0/0
  1280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1281 ;;      Params:         0       0       0       0       0       0       0       0
  1282 ;;      Locals:         0       0       0       0       0       0       0       0
  1283 ;;      Temps:          2       0       0       0       0       0       0       0
  1284 ;;      Totals:         2       0       0       0       0       0       0       0
  1285 ;;Total ram usage:        2 bytes
  1286 ;; Hardware stack levels used:    1
  1287 ;; Hardware stack levels required when called:    2
  1288 ;; This function calls:
  1289 ;;		_TextLCD_4Bits_Write
  1290 ;;		_TextLCD_CMD
  1291 ;;		_TextLCD_Enable
  1292 ;; This function is called by:
  1293 ;;		_main
  1294 ;; This function uses a non-reentrant model
  1295 ;;
  1296                           
  1297                           
  1298                           ;psect for function _TextLCD_Init
  1299  05B5                     _TextLCD_Init:	
  1300                           
  1301                           ;TextLCD.c: 58: _delay((unsigned long)((40)*(32000000/4000.0)));
  1302                           
  1303                           ;incstack = 0
  1304                           ; Regs used in _TextLCD_Init: [wreg+status,2+status,0+pclath+cstack]
  1305  05B5  3002               	movlw	2
  1306  05B6  00F3               	movwf	??_TextLCD_Init+1
  1307  05B7  30A0               	movlw	160
  1308  05B8  00F2               	movwf	??_TextLCD_Init
  1309  05B9  3092               	movlw	146
  1310  05BA                     u727:	
  1311  05BA  0B89               	decfsz	9,f
  1312  05BB  2DBA               	goto	u727
  1313  05BC  0BF2               	decfsz	??_TextLCD_Init,f
  1314  05BD  2DBA               	goto	u727
  1315  05BE  0BF3               	decfsz	??_TextLCD_Init+1,f
  1316  05BF  2DBA               	goto	u727
  1317  05C0  3200               	nop2
  1318                           
  1319                           ;TextLCD.c: 59: TextLCD_4Bits_Write(0x03);
  1320  05C1  3003               	movlw	3
  1321  05C2  260A  3185         	fcall	_TextLCD_4Bits_Write
  1322                           
  1323                           ;TextLCD.c: 60: TextLCD_Enable();
  1324  05C4  25F3  3185         	fcall	_TextLCD_Enable
  1325                           
  1326                           ;TextLCD.c: 61: _delay((unsigned long)((5)*(32000000/4000.0)));
  1327  05C6  3034               	movlw	52
  1328  05C7  00F2               	movwf	??_TextLCD_Init
  1329  05C8  30F2               	movlw	242
  1330  05C9                     u737:	
  1331  05C9  0B89               	decfsz	9,f
  1332  05CA  2DC9               	goto	u737
  1333  05CB  0BF2               	decfsz	??_TextLCD_Init,f
  1334  05CC  2DC9               	goto	u737
  1335                           
  1336                           ;TextLCD.c: 62: TextLCD_Enable();
  1337  05CD  25F3  3185         	fcall	_TextLCD_Enable
  1338                           
  1339                           ;TextLCD.c: 63: _delay((unsigned long)((100)*(32000000/4000000.0)));
  1340  05CF  30A0               	movlw	160
  1341  05D0                     u747:	
  1342  05D0  3200               	nop2
  1343  05D1  0B89               	decfsz	9,f
  1344  05D2  2DD0               	goto	u747
  1345                           
  1346                           ;TextLCD.c: 64: TextLCD_Enable();
  1347  05D3  25F3  3185         	fcall	_TextLCD_Enable
  1348                           
  1349                           ;TextLCD.c: 65: TextLCD_4Bits_Write(0x02);
  1350  05D5  3002               	movlw	2
  1351  05D6  260A  3185         	fcall	_TextLCD_4Bits_Write
  1352                           
  1353                           ;TextLCD.c: 66: TextLCD_Enable();
  1354  05D8  25F3  3185         	fcall	_TextLCD_Enable
  1355                           
  1356                           ;TextLCD.c: 67: TextLCD_CMD(0x28);
  1357  05DA  3028               	movlw	40
  1358  05DB  25FF  3185         	fcall	_TextLCD_CMD
  1359                           
  1360                           ;TextLCD.c: 68: TextLCD_CMD(0x0c);
  1361  05DD  300C               	movlw	12
  1362  05DE  25FF  3185         	fcall	_TextLCD_CMD
  1363                           
  1364                           ;TextLCD.c: 69: TextLCD_CMD(0x06);
  1365  05E0  3006               	movlw	6
  1366  05E1  25FF  3185         	fcall	_TextLCD_CMD
  1367                           
  1368                           ;TextLCD.c: 70: TextLCD_CMD(0x01);
  1369  05E3  3001               	movlw	1
  1370  05E4  25FF  3185         	fcall	_TextLCD_CMD
  1371                           
  1372                           ;TextLCD.c: 71: _delay((unsigned long)((100)*(32000000/4000.0)));
  1373  05E6  3005               	movlw	5
  1374  05E7  00F3               	movwf	??_TextLCD_Init+1
  1375  05E8  300F               	movlw	15
  1376  05E9  00F2               	movwf	??_TextLCD_Init
  1377  05EA  30F1               	movlw	241
  1378  05EB                     u757:	
  1379  05EB  0B89               	decfsz	9,f
  1380  05EC  2DEB               	goto	u757
  1381  05ED  0BF2               	decfsz	??_TextLCD_Init,f
  1382  05EE  2DEB               	goto	u757
  1383  05EF  0BF3               	decfsz	??_TextLCD_Init+1,f
  1384  05F0  2DEB               	goto	u757
  1385  05F1  0000               	nop
  1386  05F2  0008               	return
  1387  05F3                     __end_of_TextLCD_Init:	
  1388  05F3                     __ptext10:	
  1389 ;; *************** function _TextLCD_Enable *****************
  1390 ;; Defined at:
  1391 ;;		line 15 in file "TextLCD.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;		None
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;		None
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  1    wreg      void 
  1398 ;; Registers used:
  1399 ;;		wreg
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/2
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1405 ;;      Params:         0       0       0       0       0       0       0       0
  1406 ;;      Locals:         0       0       0       0       0       0       0       0
  1407 ;;      Temps:          0       0       0       0       0       0       0       0
  1408 ;;      Totals:         0       0       0       0       0       0       0       0
  1409 ;;Total ram usage:        0 bytes
  1410 ;; Hardware stack levels used:    1
  1411 ;; This function calls:
  1412 ;;		Nothing
  1413 ;; This function is called by:
  1414 ;;		_TextLCD_CMD
  1415 ;;		_TextLCD_Init
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           
  1420                           ;psect for function _TextLCD_Enable
  1421  05F3                     _TextLCD_Enable:	
  1422  05F3                     l1009:	
  1423                           ;incstack = 0
  1424                           ; Regs used in _TextLCD_Enable: [wreg]
  1425                           
  1426                           
  1427                           ;TextLCD.c: 17: LATCbits.LATC2=1;
  1428  05F3  0022               	movlb	2	; select bank2
  1429  05F4  150E               	bsf	14,2	;volatile
  1430                           
  1431                           ;TextLCD.c: 18: _delay((unsigned long)((3)*(32000000/4000000.0)));
  1432  05F5  3008               	movlw	8
  1433  05F6                     u767:	
  1434  05F6  0B89               	decfsz	9,f
  1435  05F7  2DF6               	goto	u767
  1436                           
  1437                           ;TextLCD.c: 19: LATCbits.LATC2=0;
  1438  05F8  0022               	movlb	2	; select bank2
  1439  05F9  110E               	bcf	14,2	;volatile
  1440                           
  1441                           ;TextLCD.c: 20: _delay((unsigned long)((50)*(32000000/4000000.0)));
  1442  05FA  3085               	movlw	133
  1443  05FB                     u777:	
  1444  05FB  0B89               	decfsz	9,f
  1445  05FC  2DFB               	goto	u777
  1446  05FD  0000               	nop
  1447  05FE  0008               	return
  1448  05FF                     __end_of_TextLCD_Enable:	
  1449  05FF                     __ptext9:	
  1450 ;; *************** function _TextLCD_CMD *****************
  1451 ;; Defined at:
  1452 ;;		line 23 in file "TextLCD.c"
  1453 ;; Parameters:    Size  Location     Type
  1454 ;;  cmd             1    wreg     unsigned char 
  1455 ;; Auto vars:     Size  Location     Type
  1456 ;;  cmd             1    1[COMMON] unsigned char 
  1457 ;; Return value:  Size  Location     Type
  1458 ;;                  1    wreg      void 
  1459 ;; Registers used:
  1460 ;;		wreg, status,2, status,0, pclath, cstack
  1461 ;; Tracked objects:
  1462 ;;		On entry : 0/0
  1463 ;;		On exit  : 0/0
  1464 ;;		Unchanged: 0/0
  1465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1466 ;;      Params:         0       0       0       0       0       0       0       0
  1467 ;;      Locals:         1       0       0       0       0       0       0       0
  1468 ;;      Temps:          0       0       0       0       0       0       0       0
  1469 ;;      Totals:         1       0       0       0       0       0       0       0
  1470 ;;Total ram usage:        1 bytes
  1471 ;; Hardware stack levels used:    1
  1472 ;; Hardware stack levels required when called:    1
  1473 ;; This function calls:
  1474 ;;		_TextLCD_4Bits_Write
  1475 ;;		_TextLCD_Enable
  1476 ;; This function is called by:
  1477 ;;		_TextLCD_PutChar
  1478 ;;		_TextLCD_Puts
  1479 ;;		_TextLCD_Init
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482                           
  1483                           
  1484                           ;psect for function _TextLCD_CMD
  1485  05FF                     _TextLCD_CMD:	
  1486                           
  1487                           ;incstack = 0
  1488                           ; Regs used in _TextLCD_CMD: [wreg+status,2+status,0+pclath+cstack]
  1489                           ;TextLCD_CMD@cmd stored from wreg
  1490  05FF  00F1               	movwf	TextLCD_CMD@cmd
  1491                           
  1492                           ;TextLCD.c: 25: TextLCD_4Bits_Write(cmd>>4);
  1493  0600  0E71               	swapf	TextLCD_CMD@cmd,w
  1494  0601  390F               	andlw	15
  1495  0602  260A  3185         	fcall	_TextLCD_4Bits_Write
  1496                           
  1497                           ;TextLCD.c: 26: TextLCD_Enable();
  1498  0604  25F3  3185         	fcall	_TextLCD_Enable
  1499                           
  1500                           ;TextLCD.c: 27: TextLCD_4Bits_Write(cmd);
  1501  0606  0871               	movf	TextLCD_CMD@cmd,w
  1502  0607  260A  3185         	fcall	_TextLCD_4Bits_Write
  1503                           
  1504                           ;TextLCD.c: 28: TextLCD_Enable();
  1505  0609  2DF3               	ljmp	l1009
  1506  060A                     __end_of_TextLCD_CMD:	
  1507  060A                     __ptext11:	
  1508 ;; *************** function _TextLCD_4Bits_Write *****************
  1509 ;; Defined at:
  1510 ;;		line 4 in file "TextLCD.c"
  1511 ;; Parameters:    Size  Location     Type
  1512 ;;  nib             1    wreg     unsigned char 
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;  nib             1    0[COMMON] unsigned char 
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  1    wreg      void 
  1517 ;; Registers used:
  1518 ;;		wreg, status,0
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 1F/2
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1524 ;;      Params:         0       0       0       0       0       0       0       0
  1525 ;;      Locals:         1       0       0       0       0       0       0       0
  1526 ;;      Temps:          0       0       0       0       0       0       0       0
  1527 ;;      Totals:         1       0       0       0       0       0       0       0
  1528 ;;Total ram usage:        1 bytes
  1529 ;; Hardware stack levels used:    1
  1530 ;; This function calls:
  1531 ;;		Nothing
  1532 ;; This function is called by:
  1533 ;;		_TextLCD_CMD
  1534 ;;		_TextLCD_Init
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           
  1539                           ;psect for function _TextLCD_4Bits_Write
  1540  060A                     _TextLCD_4Bits_Write:	
  1541                           
  1542                           ;incstack = 0
  1543                           ; Regs used in _TextLCD_4Bits_Write: [wreg+status,0]
  1544                           ;TextLCD_4Bits_Write@nib stored from wreg
  1545  060A  00F0               	movwf	TextLCD_4Bits_Write@nib
  1546                           
  1547                           ;TextLCD.c: 6: LATCbits.LATC3=(bool)nib;
  1548  060B  0C70               	rrf	TextLCD_4Bits_Write@nib,w
  1549  060C  0022               	movlb	2	; select bank2
  1550  060D  1C03               	skipc
  1551  060E  118E               	bcf	14,3	;volatile
  1552  060F  1803               	skipnc
  1553  0610  158E               	bsf	14,3	;volatile
  1554                           
  1555                           ;TextLCD.c: 7: nib>>=1;
  1556  0611  36F0               	lsrf	TextLCD_4Bits_Write@nib,f
  1557                           
  1558                           ;TextLCD.c: 8: LATCbits.LATC4=(bool)nib;
  1559  0612  0C70               	rrf	TextLCD_4Bits_Write@nib,w
  1560  0613  1C03               	skipc
  1561  0614  120E               	bcf	14,4	;volatile
  1562  0615  1803               	skipnc
  1563  0616  160E               	bsf	14,4	;volatile
  1564                           
  1565                           ;TextLCD.c: 9: nib>>=1;
  1566  0617  36F0               	lsrf	TextLCD_4Bits_Write@nib,f
  1567                           
  1568                           ;TextLCD.c: 10: LATCbits.LATC5=(bool)nib;
  1569  0618  0C70               	rrf	TextLCD_4Bits_Write@nib,w
  1570  0619  1C03               	skipc
  1571  061A  128E               	bcf	14,5	;volatile
  1572  061B  1803               	skipnc
  1573  061C  168E               	bsf	14,5	;volatile
  1574                           
  1575                           ;TextLCD.c: 11: nib>>=1;
  1576  061D  36F0               	lsrf	TextLCD_4Bits_Write@nib,f
  1577                           
  1578                           ;TextLCD.c: 12: LATCbits.LATC6=(bool)nib;
  1579  061E  0C70               	rrf	TextLCD_4Bits_Write@nib,w
  1580  061F  1C03               	skipc
  1581  0620  130E               	bcf	14,6	;volatile
  1582  0621  1803               	skipnc
  1583  0622  170E               	bsf	14,6	;volatile
  1584  0623  0008               	return
  1585  0624                     __end_of_TextLCD_4Bits_Write:	
  1586  0624                     __ptext13:	
  1587 ;; *************** function _SYSTEM_Initialize *****************
  1588 ;; Defined at:
  1589 ;;		line 70 in file "mcc_generated_files/mcc.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;		None
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;		None
  1594 ;; Return value:  Size  Location     Type
  1595 ;;                  1    wreg      void 
  1596 ;; Registers used:
  1597 ;;		wreg, status,2, status,0, pclath, cstack
  1598 ;; Tracked objects:
  1599 ;;		On entry : B1F/0
  1600 ;;		On exit  : B1F/0
  1601 ;;		Unchanged: B00/0
  1602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1603 ;;      Params:         0       0       0       0       0       0       0       0
  1604 ;;      Locals:         0       0       0       0       0       0       0       0
  1605 ;;      Temps:          0       0       0       0       0       0       0       0
  1606 ;;      Totals:         0       0       0       0       0       0       0       0
  1607 ;;Total ram usage:        0 bytes
  1608 ;; Hardware stack levels used:    1
  1609 ;; Hardware stack levels required when called:    2
  1610 ;; This function calls:
  1611 ;;		_OSCILLATOR_Initialize
  1612 ;;		_PIN_MANAGER_Initialize
  1613 ;;		_TMR1_Initialize
  1614 ;;		_WDT_Initialize
  1615 ;; This function is called by:
  1616 ;;		_main
  1617 ;; This function uses a non-reentrant model
  1618 ;;
  1619                           
  1620                           
  1621                           ;psect for function _SYSTEM_Initialize
  1622  0624                     _SYSTEM_Initialize:	
  1623                           
  1624                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  1625                           
  1626                           ;incstack = 0
  1627                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1628  0624  2632  3185         	fcall	_PIN_MANAGER_Initialize
  1629                           
  1630                           ;mcc.c: 74: OSCILLATOR_Initialize();
  1631  0626  262B  3185         	fcall	_OSCILLATOR_Initialize
  1632                           
  1633                           ;mcc.c: 75: WDT_Initialize();
  1634  0628  27C2  3185         	fcall	_WDT_Initialize
  1635                           
  1636                           ;mcc.c: 76: TMR1_Initialize();
  1637  062A  2FB5               	ljmp	l1045
  1638  062B                     __end_of_SYSTEM_Initialize:	
  1639  062B                     __ptext18:	
  1640 ;; *************** function _OSCILLATOR_Initialize *****************
  1641 ;; Defined at:
  1642 ;;		line 79 in file "mcc_generated_files/mcc.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;		None
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;		None
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  1    wreg      void 
  1649 ;; Registers used:
  1650 ;;		wreg, status,2
  1651 ;; Tracked objects:
  1652 ;;		On entry : B1F/2
  1653 ;;		On exit  : B1F/1
  1654 ;;		Unchanged: B00/0
  1655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1656 ;;      Params:         0       0       0       0       0       0       0       0
  1657 ;;      Locals:         0       0       0       0       0       0       0       0
  1658 ;;      Temps:          0       0       0       0       0       0       0       0
  1659 ;;      Totals:         0       0       0       0       0       0       0       0
  1660 ;;Total ram usage:        0 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; This function calls:
  1663 ;;		Nothing
  1664 ;; This function is called by:
  1665 ;;		_SYSTEM_Initialize
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           
  1670                           ;psect for function _OSCILLATOR_Initialize
  1671  062B                     _OSCILLATOR_Initialize:	
  1672                           
  1673                           ;mcc.c: 82: OSCCON = 0x70;
  1674                           
  1675                           ;incstack = 0
  1676                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  1677  062B  3070               	movlw	112
  1678  062C  0021               	movlb	1	; select bank1
  1679  062D  0099               	movwf	25	;volatile
  1680                           
  1681                           ;mcc.c: 84: OSCTUNE = 0x00;
  1682  062E  0198               	clrf	24	;volatile
  1683  062F                     l56:	
  1684                           ;mcc.c: 87: {
  1685                           
  1686  062F  1B1A               	btfsc	26,6	;volatile
  1687  0630  0008               	return
  1688  0631  2E2F               	goto	l56
  1689  0632                     __end_of_OSCILLATOR_Initialize:	
  1690  007E                     btemp	set	126	;btemp
  1691  007E                     wtemp0	set	126
  1692  0632                     __ptext17:	
  1693 ;; *************** function _PIN_MANAGER_Initialize *****************
  1694 ;; Defined at:
  1695 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;		None
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;		None
  1700 ;; Return value:  Size  Location     Type
  1701 ;;                  1    wreg      void 
  1702 ;; Registers used:
  1703 ;;		wreg, status,2
  1704 ;; Tracked objects:
  1705 ;;		On entry : B1F/0
  1706 ;;		On exit  : B1F/2
  1707 ;;		Unchanged: B00/0
  1708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1709 ;;      Params:         0       0       0       0       0       0       0       0
  1710 ;;      Locals:         0       0       0       0       0       0       0       0
  1711 ;;      Temps:          0       0       0       0       0       0       0       0
  1712 ;;      Totals:         0       0       0       0       0       0       0       0
  1713 ;;Total ram usage:        0 bytes
  1714 ;; Hardware stack levels used:    1
  1715 ;; This function calls:
  1716 ;;		Nothing
  1717 ;; This function is called by:
  1718 ;;		_SYSTEM_Initialize
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722                           
  1723                           ;psect for function _PIN_MANAGER_Initialize
  1724  0632                     _PIN_MANAGER_Initialize:	
  1725                           
  1726                           ;pin_manager.c: 57: LATE = 0x00;
  1727                           
  1728                           ;incstack = 0
  1729                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  1730  0632  0022               	movlb	2	; select bank2
  1731  0633  0190               	clrf	16	;volatile
  1732                           
  1733                           ;pin_manager.c: 58: LATA = 0x00;
  1734  0634  018C               	clrf	12	;volatile
  1735                           
  1736                           ;pin_manager.c: 59: LATB = 0x00;
  1737  0635  018D               	clrf	13	;volatile
  1738                           
  1739                           ;pin_manager.c: 60: LATC = 0x00;
  1740  0636  018E               	clrf	14	;volatile
  1741                           
  1742                           ;pin_manager.c: 65: TRISE = 0x08;
  1743  0637  3008               	movlw	8
  1744  0638  0021               	movlb	1	; select bank1
  1745  0639  0090               	movwf	16	;volatile
  1746                           
  1747                           ;pin_manager.c: 66: TRISA = 0xFF;
  1748  063A  30FF               	movlw	255
  1749  063B  008C               	movwf	12	;volatile
  1750                           
  1751                           ;pin_manager.c: 67: TRISB = 0xFF;
  1752  063C  008D               	movwf	13	;volatile
  1753                           
  1754                           ;pin_manager.c: 68: TRISC = 0x81;
  1755  063D  3081               	movlw	129
  1756  063E  008E               	movwf	14	;volatile
  1757                           
  1758                           ;pin_manager.c: 73: ANSELB = 0x3F;
  1759  063F  303F               	movlw	63
  1760  0640  0023               	movlb	3	; select bank3
  1761  0641  008D               	movwf	13	;volatile
  1762                           
  1763                           ;pin_manager.c: 74: ANSELA = 0x3F;
  1764  0642  008C               	movwf	12	;volatile
  1765                           
  1766                           ;pin_manager.c: 79: WPUE = 0x08;
  1767  0643  3008               	movlw	8
  1768  0644  0024               	movlb	4	; select bank4
  1769  0645  0090               	movwf	16	;volatile
  1770                           
  1771                           ;pin_manager.c: 80: WPUB = 0xFF;
  1772  0646  30FF               	movlw	255
  1773  0647  008D               	movwf	13	;volatile
  1774                           
  1775                           ;pin_manager.c: 81: OPTION_REGbits.nWPUEN = 0;
  1776  0648  0021               	movlb	1	; select bank1
  1777  0649  1395               	bcf	21,7	;volatile
  1778                           
  1779                           ;pin_manager.c: 87: APFCON = 0x00;
  1780  064A  0022               	movlb	2	; select bank2
  1781  064B  019D               	clrf	29	;volatile
  1782  064C  0008               	return
  1783  064D                     __end_of_PIN_MANAGER_Initialize:	
  1784  064D                     __ptext12:	
  1785 ;; *************** function _TMR1_ReadTimer *****************
  1786 ;; Defined at:
  1787 ;;		line 100 in file "mcc_generated_files/tmr1.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;		None
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;  readVal         2    2[COMMON] unsigned int 
  1792 ;;  readValLow      1    5[COMMON] unsigned char 
  1793 ;;  readValHigh     1    4[COMMON] unsigned char 
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  2    0[COMMON] unsigned int 
  1796 ;; Registers used:
  1797 ;;		wreg
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 1F/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1803 ;;      Params:         2       0       0       0       0       0       0       0
  1804 ;;      Locals:         4       0       0       0       0       0       0       0
  1805 ;;      Temps:          0       0       0       0       0       0       0       0
  1806 ;;      Totals:         6       0       0       0       0       0       0       0
  1807 ;;Total ram usage:        6 bytes
  1808 ;; Hardware stack levels used:    1
  1809 ;; This function calls:
  1810 ;;		Nothing
  1811 ;; This function is called by:
  1812 ;;		_main
  1813 ;; This function uses a non-reentrant model
  1814 ;;
  1815                           
  1816                           
  1817                           ;psect for function _TMR1_ReadTimer
  1818  064D                     _TMR1_ReadTimer:	
  1819                           
  1820                           ;tmr1.c: 102: uint16_t readVal;
  1821                           ;tmr1.c: 103: uint8_t readValHigh;
  1822                           ;tmr1.c: 104: uint8_t readValLow;
  1823                           ;tmr1.c: 106: readValLow = TMR1L;
  1824                           
  1825                           ;incstack = 0
  1826                           ; Regs used in _TMR1_ReadTimer: [wreg]
  1827  064D  0020               	movlb	0	; select bank0
  1828  064E  0816               	movf	22,w	;volatile
  1829  064F  00F5               	movwf	TMR1_ReadTimer@readValLow
  1830                           
  1831                           ;tmr1.c: 107: readValHigh = TMR1H;
  1832  0650  0817               	movf	23,w	;volatile
  1833  0651  00F4               	movwf	TMR1_ReadTimer@readValHigh
  1834                           
  1835                           ;tmr1.c: 109: readVal = ((uint16_t)readValHigh << 8) | readValLow;
  1836  0652  00F3               	movwf	TMR1_ReadTimer@readVal+1
  1837  0653  01F2               	clrf	TMR1_ReadTimer@readVal
  1838  0654  0875               	movf	TMR1_ReadTimer@readValLow,w
  1839  0655  04F2               	iorwf	TMR1_ReadTimer@readVal,f
  1840                           
  1841                           ;tmr1.c: 111: return readVal;
  1842  0656  0873               	movf	TMR1_ReadTimer@readVal+1,w
  1843  0657  00F1               	movwf	?_TMR1_ReadTimer+1
  1844  0658  0872               	movf	TMR1_ReadTimer@readVal,w
  1845  0659  00F0               	movwf	?_TMR1_ReadTimer
  1846  065A  0008               	return
  1847  065B                     __end_of_TMR1_ReadTimer:	
  1848  065B                     __ptext1:	
  1849 ;; *************** function _sprintf *****************
  1850 ;; Defined at:
  1851 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;  sp              1    wreg     PTR unsigned char 
  1854 ;;		 -> main@str(16), 
  1855 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1856 ;;		 -> STR_2(11), 
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;  sp              1   15[BANK0 ] PTR unsigned char 
  1859 ;;		 -> main@str(16), 
  1860 ;;  tmpval          4    0        struct .
  1861 ;;  width           2   13[BANK0 ] int 
  1862 ;;  val             2   10[BANK0 ] unsigned int 
  1863 ;;  cp              2    0        PTR const unsigned char 
  1864 ;;  len             2    0        unsigned int 
  1865 ;;  c               1   16[BANK0 ] char 
  1866 ;;  flag            1   12[BANK0 ] unsigned char 
  1867 ;;  prec            1    9[BANK0 ] char 
  1868 ;;  ap              1    8[BANK0 ] PTR void [1]
  1869 ;;		 -> ?_sprintf(2), 
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  2    0[BANK0 ] int 
  1872 ;; Registers used:
  1873 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1874 ;; Tracked objects:
  1875 ;;		On entry : 1F/0
  1876 ;;		On exit  : 1F/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1879 ;;      Params:         0       4       0       0       0       0       0       0
  1880 ;;      Locals:         0       9       0       0       0       0       0       0
  1881 ;;      Temps:          0       4       0       0       0       0       0       0
  1882 ;;      Totals:         0      17       0       0       0       0       0       0
  1883 ;;Total ram usage:       17 bytes
  1884 ;; Hardware stack levels used:    1
  1885 ;; Hardware stack levels required when called:    1
  1886 ;; This function calls:
  1887 ;;		___lwdiv
  1888 ;;		___lwmod
  1889 ;;		___wmul
  1890 ;;		_isdigit
  1891 ;; This function is called by:
  1892 ;;		_main
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           
  1897                           ;psect for function _sprintf
  1898  065B                     _sprintf:	
  1899                           
  1900                           ;incstack = 0
  1901                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1902                           ;sprintf@sp stored from wreg
  1903  065B  00AF               	movwf	sprintf@sp
  1904                           
  1905                           ;doprnt.c: 494: va_list ap;
  1906                           ;doprnt.c: 499: signed char c;
  1907                           ;doprnt.c: 501: int width;
  1908                           ;doprnt.c: 506: signed char prec;
  1909                           ;doprnt.c: 508: unsigned char flag;
  1910                           ;doprnt.c: 523: union {
  1911                           ;doprnt.c: 524: unsigned long vd;
  1912                           ;doprnt.c: 525: double integ;
  1913                           ;doprnt.c: 526: } tmpval;
  1914                           ;doprnt.c: 528: unsigned int val;
  1915                           ;doprnt.c: 529: unsigned len;
  1916                           ;doprnt.c: 530: const char * cp;
  1917                           ;doprnt.c: 533: *ap = __va_start();
  1918  065C  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1919  065D  00A8               	movwf	sprintf@ap
  1920  065E                     l1297:	
  1921                           ;doprnt.c: 536: while(c = *f++) {
  1922                           
  1923  065E  27C7  3185         	fcall	PL2	;call to abstracted procedure
  1924  0660  0830               	movf	sprintf@c,w
  1925  0661  1903               	btfsc	3,2
  1926  0662  2F48               	goto	l1299
  1927                           
  1928                           ;doprnt.c: 538: if(c != '%')
  1929  0663  3025               	movlw	37
  1930  0664  0630               	xorwf	sprintf@c,w
  1931  0665  1903               	btfsc	3,2
  1932  0666  2E6A               	goto	l1197
  1933                           
  1934                           ;doprnt.c: 540: {
  1935                           ;doprnt.c: 541: ((*sp++ = (c)));
  1936  0667  27E6  3185         	fcall	PL8	;call to abstracted procedure
  1937                           
  1938                           ;doprnt.c: 542: continue;
  1939  0669  2E5E               	goto	l1297
  1940  066A                     l1197:	
  1941                           
  1942                           ;doprnt.c: 543: }
  1943                           ;doprnt.c: 546: width = 0;
  1944  066A  01AD               	clrf	sprintf@width
  1945  066B  01AE               	clrf	sprintf@width+1
  1946                           
  1947                           ;doprnt.c: 548: flag = 0;
  1948  066C  01AC               	clrf	sprintf@flag
  1949  066D  2E72               	goto	l1203
  1950  066E                     l181:	
  1951                           ;doprnt.c: 579: case '0':
  1952                           
  1953                           
  1954                           ;doprnt.c: 580: flag |= 0x04;
  1955  066E  152C               	bsf	sprintf@flag,2
  1956                           
  1957                           ;doprnt.c: 581: f++;
  1958  066F  0AA0               	incf	sprintf@f,f
  1959  0670  1903               	skipnz
  1960  0671  0AA1               	incf	sprintf@f+1,f
  1961  0672                     l1203:	
  1962                           ;doprnt.c: 582: continue;
  1963                           
  1964  0672  27E0  3185         	fcall	PL6	;call to abstracted procedure
  1965                           
  1966                           ; Switch size 1, requested type "space"
  1967                           ; Number of cases is 1, Range of values is 48 to 48
  1968                           ; switch strategies available:
  1969                           ; Name         Instructions Cycles
  1970                           ; simple_byte            4     3 (average)
  1971                           ; direct_byte           11     9 (fixed)
  1972                           ; jumptable            263     9 (fixed)
  1973                           ;	Chosen strategy is simple_byte
  1974  0674  3A30               	xorlw	48	; case 48
  1975  0675  1903               	skipnz
  1976  0676  2E6E               	goto	l181
  1977  0677  2E78               	goto	l1205
  1978  0678                     l1205:	
  1979                           
  1980                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1981  0678  27E0  3185         	fcall	PL6	;call to abstracted procedure
  1982  067A  274D  3185         	fcall	_isdigit
  1983  067C  1C03               	btfss	3,0
  1984  067D  2EA2               	goto	l1219
  1985                           
  1986                           ;doprnt.c: 598: width = 0;
  1987  067E  01AD               	clrf	sprintf@width
  1988  067F  01AE               	clrf	sprintf@width+1
  1989  0680                     l1209:	
  1990                           
  1991                           ;doprnt.c: 600: width *= 10;
  1992  0680  300A               	movlw	10
  1993  0681  00F0               	movwf	___wmul@multiplier
  1994  0682  01F1               	clrf	___wmul@multiplier+1
  1995  0683  082E               	movf	sprintf@width+1,w
  1996  0684  00F3               	movwf	___wmul@multiplicand+1
  1997  0685  082D               	movf	sprintf@width,w
  1998  0686  00F2               	movwf	___wmul@multiplicand
  1999  0687  27A0  3185         	fcall	___wmul
  2000  0689  0871               	movf	?___wmul+1,w
  2001  068A  00AE               	movwf	sprintf@width+1
  2002  068B  0870               	movf	?___wmul,w
  2003  068C  00AD               	movwf	sprintf@width
  2004                           
  2005                           ;doprnt.c: 601: width += *f++ - '0';
  2006  068D  27E0  3185         	fcall	PL6	;call to abstracted procedure
  2007  068F  3ED0               	addlw	208
  2008  0690  00A4               	movwf	??_sprintf
  2009  0691  30FF               	movlw	255
  2010  0692  1803               	skipnc
  2011  0693  3000               	movlw	0
  2012  0694  00A5               	movwf	??_sprintf+1
  2013  0695  0824               	movf	??_sprintf,w
  2014  0696  07AD               	addwf	sprintf@width,f
  2015  0697  0825               	movf	??_sprintf+1,w
  2016  0698  3DAE               	addwfc	sprintf@width+1,f
  2017  0699  0AA0               	incf	sprintf@f,f
  2018  069A  1903               	skipnz
  2019  069B  0AA1               	incf	sprintf@f+1,f
  2020                           
  2021                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2022  069C  27E0  3185         	fcall	PL6	;call to abstracted procedure
  2023  069E  274D  3185         	fcall	_isdigit
  2024  06A0  1803               	btfsc	3,0
  2025  06A1  2E80               	goto	l1209
  2026  06A2                     l1219:	
  2027  06A2  27C7  3185         	fcall	PL2	;call to abstracted procedure
  2028                           
  2029                           ; Switch size 1, requested type "space"
  2030                           ; Number of cases is 3, Range of values is 0 to 105
  2031                           ; switch strategies available:
  2032                           ; Name         Instructions Cycles
  2033                           ; simple_byte           10     6 (average)
  2034                           ; direct_byte          218     6 (fixed)
  2035                           ; jumptable            260     6 (fixed)
  2036                           ;	Chosen strategy is simple_byte
  2037  06A4  3A00               	xorlw	0	; case 0
  2038  06A5  1903               	skipnz
  2039  06A6  2F48               	goto	l1299
  2040  06A7  3A64               	xorlw	100	; case 100
  2041  06A8  1903               	skipnz
  2042  06A9  2EAE               	goto	l1221
  2043  06AA  3A0D               	xorlw	13	; case 105
  2044  06AB  1903               	skipnz
  2045  06AC  2EAE               	goto	l1221
  2046  06AD  2E5E               	goto	l1297
  2047  06AE                     l1221:	
  2048                           
  2049                           ;doprnt.c: 1253: {
  2050                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2051  06AE  0828               	movf	sprintf@ap,w
  2052  06AF  0086               	movwf	6
  2053  06B0  0187               	clrf	7
  2054  06B1  3F40               	moviw [0]fsr1
  2055  06B2  00AA               	movwf	sprintf@val
  2056  06B3  3F41               	moviw [1]fsr1
  2057  06B4  00AB               	movwf	sprintf@val+1
  2058  06B5  0AA8               	incf	sprintf@ap,f
  2059  06B6  0AA8               	incf	sprintf@ap,f
  2060                           
  2061                           ;doprnt.c: 1261: if((int)val < 0) {
  2062  06B7  1FAB               	btfss	sprintf@val+1,7
  2063  06B8  2EC0               	goto	l1231
  2064                           
  2065                           ;doprnt.c: 1262: flag |= 0x03;
  2066  06B9  3003               	movlw	3
  2067  06BA  04AC               	iorwf	sprintf@flag,f
  2068                           
  2069                           ;doprnt.c: 1263: val = -val;
  2070  06BB  09AA               	comf	sprintf@val,f
  2071  06BC  09AB               	comf	sprintf@val+1,f
  2072  06BD  0AAA               	incf	sprintf@val,f
  2073  06BE  1903               	skipnz
  2074  06BF  0AAB               	incf	sprintf@val+1,f
  2075  06C0                     l1231:	
  2076                           
  2077                           ;doprnt.c: 1264: }
  2078                           ;doprnt.c: 1266: }
  2079                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2080  06C0  01B0               	clrf	sprintf@c
  2081  06C1  0AB0               	incf	sprintf@c,f
  2082  06C2                     l1237:	
  2083                           
  2084                           ;doprnt.c: 1306: if(val < dpowers[c])
  2085  06C2  0830               	movf	sprintf@c,w
  2086  06C3  27D4  3185         	fcall	PL4	;call to abstracted procedure
  2087  06C5  00A6               	movwf	??_sprintf+2
  2088  06C6  3F01               	moviw [1]fsr0
  2089  06C7  00A7               	movwf	??_sprintf+3
  2090  06C8  022B               	subwf	sprintf@val+1,w
  2091  06C9  1D03               	skipz
  2092  06CA  2ECD               	goto	u565
  2093  06CB  0826               	movf	??_sprintf+2,w
  2094  06CC  022A               	subwf	sprintf@val,w
  2095  06CD                     u565:	
  2096  06CD  1C03               	btfss	3,0
  2097  06CE  2ED4               	goto	l1245
  2098  06CF  3005               	movlw	5
  2099  06D0  0AB0               	incf	sprintf@c,f
  2100  06D1  0630               	xorwf	sprintf@c,w
  2101  06D2  1D03               	btfss	3,2
  2102  06D3  2EC2               	goto	l1237
  2103  06D4                     l1245:	
  2104                           
  2105                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2106  06D4  082D               	movf	sprintf@width,w
  2107  06D5  042E               	iorwf	sprintf@width+1,w
  2108  06D6  1903               	btfsc	3,2
  2109  06D7  2EE0               	goto	l1251
  2110  06D8  082C               	movf	sprintf@flag,w
  2111  06D9  3903               	andlw	3
  2112  06DA  1903               	btfsc	3,2
  2113  06DB  2EE0               	goto	l1251
  2114                           
  2115                           ;doprnt.c: 1346: width--;
  2116  06DC  30FF               	movlw	-1
  2117  06DD  07AD               	addwf	sprintf@width,f
  2118  06DE  1C03               	skipc
  2119  06DF  03AE               	decf	sprintf@width+1,f
  2120  06E0                     l1251:	
  2121                           
  2122                           ;doprnt.c: 1381: if(width > c)
  2123  06E0  0830               	movf	sprintf@c,w
  2124  06E1  00A4               	movwf	??_sprintf
  2125  06E2  01A5               	clrf	??_sprintf+1
  2126  06E3  1BA4               	btfsc	??_sprintf,7
  2127  06E4  03A5               	decf	??_sprintf+1,f
  2128  06E5  0825               	movf	??_sprintf+1,w
  2129  06E6  3A80               	xorlw	128
  2130  06E7  00A6               	movwf	??_sprintf+2
  2131  06E8  082E               	movf	sprintf@width+1,w
  2132  06E9  3A80               	xorlw	128
  2133  06EA  0226               	subwf	??_sprintf+2,w
  2134  06EB  1D03               	skipz
  2135  06EC  2EEF               	goto	u605
  2136  06ED  082D               	movf	sprintf@width,w
  2137  06EE  0224               	subwf	??_sprintf,w
  2138  06EF                     u605:	
  2139  06EF  1803               	skipnc
  2140  06F0  2EFB               	goto	l1255
  2141                           
  2142                           ;doprnt.c: 1382: width -= c;
  2143  06F1  0020               	movlb	0	; select bank0
  2144  06F2  0830               	movf	sprintf@c,w
  2145  06F3  00A4               	movwf	??_sprintf
  2146  06F4  01A5               	clrf	??_sprintf+1
  2147  06F5  1BA4               	btfsc	??_sprintf,7
  2148  06F6  03A5               	decf	??_sprintf+1,f
  2149  06F7  02AD               	subwf	sprintf@width,f
  2150  06F8  0825               	movf	??_sprintf+1,w
  2151  06F9  3BAE               	subwfb	sprintf@width+1,f
  2152  06FA  2EFE               	goto	l1257
  2153  06FB                     l1255:	
  2154                           
  2155                           ;doprnt.c: 1383: else
  2156                           ;doprnt.c: 1384: width = 0;
  2157  06FB  0020               	movlb	0	; select bank0
  2158  06FC  01AD               	clrf	sprintf@width
  2159  06FD  01AE               	clrf	sprintf@width+1
  2160  06FE                     l1257:	
  2161                           
  2162                           ;doprnt.c: 1387: if(flag & 0x04) {
  2163  06FE  1D2C               	btfss	sprintf@flag,2
  2164  06FF  2F12               	goto	l1273
  2165                           
  2166                           ;doprnt.c: 1392: if(flag & 0x03)
  2167  0700  082C               	movf	sprintf@flag,w
  2168  0701  3903               	andlw	3
  2169  0702  1903               	btfsc	3,2
  2170  0703  2F06               	goto	l1265
  2171                           
  2172                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  2173  0704  27ED  3185         	fcall	PL10	;call to abstracted procedure
  2174  0706                     l1265:	
  2175                           
  2176                           ;doprnt.c: 1415: if(width)
  2177  0706  082D               	movf	sprintf@width,w
  2178  0707  042E               	iorwf	sprintf@width+1,w
  2179  0708  1903               	btfsc	3,2
  2180  0709  2F27               	goto	l1287
  2181                           
  2182                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2183  070A  082F               	movf	sprintf@sp,w
  2184  070B  0086               	movwf	6
  2185  070C  3030               	movlw	48
  2186                           
  2187                           ;doprnt.c: 1418: while(--width);
  2188  070D  27F4  3185         	fcall	PL12	;call to abstracted procedure
  2189  070F  1C03               	skipc
  2190  0710  03AE               	decf	sprintf@width+1,f
  2191  0711  2F06               	goto	l1265
  2192  0712                     l1273:	
  2193                           
  2194                           ;doprnt.c: 1422: {
  2195                           ;doprnt.c: 1424: if(width
  2196                           ;doprnt.c: 1428: )
  2197  0712  082D               	movf	sprintf@width,w
  2198  0713  042E               	iorwf	sprintf@width+1,w
  2199  0714  1903               	btfsc	3,2
  2200  0715  2F21               	goto	l1281
  2201  0716                     l1275:	
  2202                           
  2203                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2204  0716  082F               	movf	sprintf@sp,w
  2205  0717  0086               	movwf	6
  2206  0718  3020               	movlw	32
  2207                           
  2208                           ;doprnt.c: 1431: while(--width);
  2209  0719  27F4  3185         	fcall	PL12	;call to abstracted procedure
  2210  071B  1C03               	skipc
  2211  071C  03AE               	decf	sprintf@width+1,f
  2212  071D  082D               	movf	sprintf@width,w
  2213  071E  042E               	iorwf	sprintf@width+1,w
  2214  071F  1D03               	btfss	3,2
  2215  0720  2F16               	goto	l1275
  2216  0721                     l1281:	
  2217                           
  2218                           ;doprnt.c: 1438: if(flag & 0x03)
  2219  0721  082C               	movf	sprintf@flag,w
  2220  0722  3903               	andlw	3
  2221  0723  1903               	btfsc	3,2
  2222  0724  2F27               	goto	l1287
  2223                           
  2224                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2225  0725  27ED  3185         	fcall	PL10	;call to abstracted procedure
  2226  0727                     l1287:	
  2227                           
  2228                           ;doprnt.c: 1469: }
  2229                           ;doprnt.c: 1472: prec = c;
  2230  0727  0830               	movf	sprintf@c,w
  2231  0728  00A9               	movwf	sprintf@prec
  2232                           
  2233                           ;doprnt.c: 1474: while(prec--) {
  2234  0729  2F44               	goto	l1295
  2235  072A                     l1289:	
  2236                           
  2237                           ;doprnt.c: 1478: {
  2238                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2239  072A  300A               	movlw	10
  2240  072B  00F7               	movwf	___lwmod@divisor
  2241  072C  01F8               	clrf	___lwmod@divisor+1
  2242  072D  0829               	movf	sprintf@prec,w
  2243  072E  27D4  3185         	fcall	PL4	;call to abstracted procedure
  2244  0730  00F0               	movwf	___lwdiv@divisor
  2245  0731  3F01               	moviw [1]fsr0
  2246  0732  00F1               	movwf	___lwdiv@divisor+1
  2247  0733  082B               	movf	sprintf@val+1,w
  2248  0734  00F3               	movwf	___lwdiv@dividend+1
  2249  0735  082A               	movf	sprintf@val,w
  2250  0736  00F2               	movwf	___lwdiv@dividend
  2251  0737  275B  3185         	fcall	___lwdiv
  2252  0739  0871               	movf	?___lwdiv+1,w
  2253  073A  00FA               	movwf	___lwmod@dividend+1
  2254  073B  0870               	movf	?___lwdiv,w
  2255  073C  00F9               	movwf	___lwmod@dividend
  2256  073D  2780  3185         	fcall	___lwmod
  2257  073F  0877               	movf	?___lwmod,w
  2258  0740  3E30               	addlw	48
  2259  0741  00B0               	movwf	sprintf@c
  2260                           
  2261                           ;doprnt.c: 1523: }
  2262                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2263  0742  27E6  3185         	fcall	PL8	;call to abstracted procedure
  2264  0744                     l1295:	
  2265  0744  03A9               	decf	sprintf@prec,f
  2266  0745  0F29               	incfsz	sprintf@prec,w
  2267  0746  2F2A               	goto	l1289
  2268  0747  2E5E               	goto	l1297
  2269  0748                     l1299:	
  2270                           
  2271                           ;doprnt.c: 1538: *sp = 0;
  2272  0748  082F               	movf	sprintf@sp,w
  2273  0749  0086               	movwf	6
  2274  074A  0187               	clrf	7
  2275  074B  0181               	clrf	1
  2276  074C  0008               	return
  2277  074D                     __end_of_sprintf:	
  2278  074D                     __ptext2:	
  2279 ;; *************** function _isdigit *****************
  2280 ;; Defined at:
  2281 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
  2282 ;; Parameters:    Size  Location     Type
  2283 ;;  c               1    wreg     unsigned char 
  2284 ;; Auto vars:     Size  Location     Type
  2285 ;;  c               1    1[COMMON] unsigned char 
  2286 ;; Return value:  Size  Location     Type
  2287 ;;		None               void
  2288 ;; Registers used:
  2289 ;;		wreg, status,2, status,0
  2290 ;; Tracked objects:
  2291 ;;		On entry : 1F/0
  2292 ;;		On exit  : 1F/0
  2293 ;;		Unchanged: 1F/0
  2294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2295 ;;      Params:         0       0       0       0       0       0       0       0
  2296 ;;      Locals:         2       0       0       0       0       0       0       0
  2297 ;;      Temps:          0       0       0       0       0       0       0       0
  2298 ;;      Totals:         2       0       0       0       0       0       0       0
  2299 ;;Total ram usage:        2 bytes
  2300 ;; Hardware stack levels used:    1
  2301 ;; This function calls:
  2302 ;;		Nothing
  2303 ;; This function is called by:
  2304 ;;		_sprintf
  2305 ;; This function uses a non-reentrant model
  2306 ;;
  2307                           
  2308                           
  2309                           ;psect for function _isdigit
  2310  074D                     _isdigit:	
  2311                           
  2312                           ;incstack = 0
  2313                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2314                           ;isdigit@c stored from wreg
  2315  074D  00F1               	movwf	isdigit@c
  2316  074E  303A               	movlw	58
  2317  074F  01F0               	clrf	_isdigit$531
  2318  0750  0271               	subwf	isdigit@c,w
  2319  0751  1803               	skipnc
  2320  0752  2F59               	goto	l1075
  2321  0753  3030               	movlw	48
  2322  0754  0271               	subwf	isdigit@c,w
  2323  0755  1C03               	skipc
  2324  0756  2F59               	goto	l1075
  2325  0757  01F0               	clrf	_isdigit$531
  2326  0758  0AF0               	incf	_isdigit$531,f
  2327  0759                     l1075:	
  2328  0759  0C70               	rrf	_isdigit$531,w
  2329  075A  0008               	return
  2330  075B                     __end_of_isdigit:	
  2331  075B                     __ptext5:	
  2332 ;; *************** function ___lwdiv *****************
  2333 ;; Defined at:
  2334 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  2335 ;; Parameters:    Size  Location     Type
  2336 ;;  divisor         2    0[COMMON] unsigned int 
  2337 ;;  dividend        2    2[COMMON] unsigned int 
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;  quotient        2    4[COMMON] unsigned int 
  2340 ;;  counter         1    6[COMMON] unsigned char 
  2341 ;; Return value:  Size  Location     Type
  2342 ;;                  2    0[COMMON] unsigned int 
  2343 ;; Registers used:
  2344 ;;		wreg, status,2, status,0
  2345 ;; Tracked objects:
  2346 ;;		On entry : 1F/0
  2347 ;;		On exit  : 1F/0
  2348 ;;		Unchanged: 1F/0
  2349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2350 ;;      Params:         4       0       0       0       0       0       0       0
  2351 ;;      Locals:         3       0       0       0       0       0       0       0
  2352 ;;      Temps:          0       0       0       0       0       0       0       0
  2353 ;;      Totals:         7       0       0       0       0       0       0       0
  2354 ;;Total ram usage:        7 bytes
  2355 ;; Hardware stack levels used:    1
  2356 ;; This function calls:
  2357 ;;		Nothing
  2358 ;; This function is called by:
  2359 ;;		_sprintf
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363                           
  2364                           ;psect for function ___lwdiv
  2365  075B                     ___lwdiv:	
  2366                           
  2367                           ;incstack = 0
  2368                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2369  075B  01F4               	clrf	___lwdiv@quotient
  2370  075C  01F5               	clrf	___lwdiv@quotient+1
  2371  075D  0870               	movf	___lwdiv@divisor,w
  2372  075E  0471               	iorwf	___lwdiv@divisor+1,w
  2373  075F  1903               	btfsc	3,2
  2374  0760  2F7B               	goto	l1117
  2375  0761  01F6               	clrf	___lwdiv@counter
  2376  0762                     L3:	
  2377  0762  0AF6               	incf	___lwdiv@counter,f
  2378  0763  1BF1               	btfsc	___lwdiv@divisor+1,7
  2379  0764  2F68               	goto	l1105
  2380  0765  35F0               	lslf	___lwdiv@divisor,f
  2381  0766  0DF1               	rlf	___lwdiv@divisor+1,f
  2382  0767  2F62               	goto	L3
  2383  0768                     l1105:	
  2384  0768  35F4               	lslf	___lwdiv@quotient,f
  2385  0769  0DF5               	rlf	___lwdiv@quotient+1,f
  2386  076A  0871               	movf	___lwdiv@divisor+1,w
  2387  076B  0273               	subwf	___lwdiv@dividend+1,w
  2388  076C  1D03               	skipz
  2389  076D  2F70               	goto	u435
  2390  076E  0870               	movf	___lwdiv@divisor,w
  2391  076F  0272               	subwf	___lwdiv@dividend,w
  2392  0770                     u435:	
  2393  0770  1C03               	skipc
  2394  0771  2F77               	goto	l1113
  2395  0772  0870               	movf	___lwdiv@divisor,w
  2396  0773  02F2               	subwf	___lwdiv@dividend,f
  2397  0774  0871               	movf	___lwdiv@divisor+1,w
  2398  0775  3BF3               	subwfb	___lwdiv@dividend+1,f
  2399  0776  1474               	bsf	___lwdiv@quotient,0
  2400  0777                     l1113:	
  2401  0777  36F1               	lsrf	___lwdiv@divisor+1,f
  2402  0778  0CF0               	rrf	___lwdiv@divisor,f
  2403  0779  0BF6               	decfsz	___lwdiv@counter,f
  2404  077A  2F68               	goto	l1105
  2405  077B                     l1117:	
  2406  077B  0875               	movf	___lwdiv@quotient+1,w
  2407  077C  00F1               	movwf	?___lwdiv+1
  2408  077D  0874               	movf	___lwdiv@quotient,w
  2409  077E  00F0               	movwf	?___lwdiv
  2410  077F  0008               	return
  2411  0780                     __end_of___lwdiv:	
  2412  0780                     __ptext4:	
  2413 ;; *************** function ___lwmod *****************
  2414 ;; Defined at:
  2415 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;  divisor         2    7[COMMON] unsigned int 
  2418 ;;  dividend        2    9[COMMON] unsigned int 
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;  counter         1   11[COMMON] unsigned char 
  2421 ;; Return value:  Size  Location     Type
  2422 ;;                  2    7[COMMON] unsigned int 
  2423 ;; Registers used:
  2424 ;;		wreg, status,2, status,0
  2425 ;; Tracked objects:
  2426 ;;		On entry : 1F/0
  2427 ;;		On exit  : 1F/0
  2428 ;;		Unchanged: 1F/0
  2429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2430 ;;      Params:         4       0       0       0       0       0       0       0
  2431 ;;      Locals:         1       0       0       0       0       0       0       0
  2432 ;;      Temps:          0       0       0       0       0       0       0       0
  2433 ;;      Totals:         5       0       0       0       0       0       0       0
  2434 ;;Total ram usage:        5 bytes
  2435 ;; Hardware stack levels used:    1
  2436 ;; This function calls:
  2437 ;;		Nothing
  2438 ;; This function is called by:
  2439 ;;		_sprintf
  2440 ;; This function uses a non-reentrant model
  2441 ;;
  2442                           
  2443                           
  2444                           ;psect for function ___lwmod
  2445  0780                     ___lwmod:	
  2446                           
  2447                           ;incstack = 0
  2448                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2449  0780  0877               	movf	___lwmod@divisor,w
  2450  0781  0478               	iorwf	___lwmod@divisor+1,w
  2451  0782  1903               	btfsc	3,2
  2452  0783  2F9B               	goto	l1137
  2453  0784  01FB               	clrf	___lwmod@counter
  2454  0785                     L2:	
  2455  0785  0AFB               	incf	___lwmod@counter,f
  2456  0786  1BF8               	btfsc	___lwmod@divisor+1,7
  2457  0787  2F8B               	goto	l1129
  2458  0788  35F7               	lslf	___lwmod@divisor,f
  2459  0789  0DF8               	rlf	___lwmod@divisor+1,f
  2460  078A  2F85               	goto	L2
  2461  078B                     l1129:	
  2462  078B  0878               	movf	___lwmod@divisor+1,w
  2463  078C  027A               	subwf	___lwmod@dividend+1,w
  2464  078D  1D03               	skipz
  2465  078E  2F91               	goto	u475
  2466  078F  0877               	movf	___lwmod@divisor,w
  2467  0790  0279               	subwf	___lwmod@dividend,w
  2468  0791                     u475:	
  2469  0791  1C03               	skipc
  2470  0792  2F97               	goto	l1133
  2471  0793  0877               	movf	___lwmod@divisor,w
  2472  0794  02F9               	subwf	___lwmod@dividend,f
  2473  0795  0878               	movf	___lwmod@divisor+1,w
  2474  0796  3BFA               	subwfb	___lwmod@dividend+1,f
  2475  0797                     l1133:	
  2476  0797  36F8               	lsrf	___lwmod@divisor+1,f
  2477  0798  0CF7               	rrf	___lwmod@divisor,f
  2478  0799  0BFB               	decfsz	___lwmod@counter,f
  2479  079A  2F8B               	goto	l1129
  2480  079B                     l1137:	
  2481  079B  087A               	movf	___lwmod@dividend+1,w
  2482  079C  00F8               	movwf	?___lwmod+1
  2483  079D  0879               	movf	___lwmod@dividend,w
  2484  079E  00F7               	movwf	?___lwmod
  2485  079F  0008               	return
  2486  07A0                     __end_of___lwmod:	
  2487  07A0                     __ptext3:	
  2488 ;; *************** function ___wmul *****************
  2489 ;; Defined at:
  2490 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;  multiplier      2    0[COMMON] unsigned int 
  2493 ;;  multiplicand    2    2[COMMON] unsigned int 
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;  product         2    4[COMMON] unsigned int 
  2496 ;; Return value:  Size  Location     Type
  2497 ;;                  2    0[COMMON] unsigned int 
  2498 ;; Registers used:
  2499 ;;		wreg, status,2, status,0
  2500 ;; Tracked objects:
  2501 ;;		On entry : 1F/0
  2502 ;;		On exit  : 1F/0
  2503 ;;		Unchanged: 1F/0
  2504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2505 ;;      Params:         4       0       0       0       0       0       0       0
  2506 ;;      Locals:         2       0       0       0       0       0       0       0
  2507 ;;      Temps:          0       0       0       0       0       0       0       0
  2508 ;;      Totals:         6       0       0       0       0       0       0       0
  2509 ;;Total ram usage:        6 bytes
  2510 ;; Hardware stack levels used:    1
  2511 ;; This function calls:
  2512 ;;		Nothing
  2513 ;; This function is called by:
  2514 ;;		_sprintf
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           
  2519                           ;psect for function ___wmul
  2520  07A0                     ___wmul:	
  2521                           
  2522                           ;incstack = 0
  2523                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2524  07A0  01F4               	clrf	___wmul@product
  2525  07A1  01F5               	clrf	___wmul@product+1
  2526  07A2                     l1081:	
  2527  07A2  1C70               	btfss	___wmul@multiplier,0
  2528  07A3  2FA8               	goto	l1085
  2529  07A4  0872               	movf	___wmul@multiplicand,w
  2530  07A5  07F4               	addwf	___wmul@product,f
  2531  07A6  0873               	movf	___wmul@multiplicand+1,w
  2532  07A7  3DF5               	addwfc	___wmul@product+1,f
  2533  07A8                     l1085:	
  2534  07A8  35F2               	lslf	___wmul@multiplicand,f
  2535  07A9  0DF3               	rlf	___wmul@multiplicand+1,f
  2536  07AA  36F1               	lsrf	___wmul@multiplier+1,f
  2537  07AB  0CF0               	rrf	___wmul@multiplier,f
  2538  07AC  0870               	movf	___wmul@multiplier,w
  2539  07AD  0471               	iorwf	___wmul@multiplier+1,w
  2540  07AE  1D03               	btfss	3,2
  2541  07AF  2FA2               	goto	l1081
  2542  07B0  0875               	movf	___wmul@product+1,w
  2543  07B1  00F1               	movwf	?___wmul+1
  2544  07B2  0874               	movf	___wmul@product,w
  2545  07B3  00F0               	movwf	?___wmul
  2546  07B4  0008               	return
  2547  07B5                     __end_of___wmul:	
  2548  07B5                     __ptext15:	
  2549 ;; *************** function _TMR1_Initialize *****************
  2550 ;; Defined at:
  2551 ;;		line 62 in file "mcc_generated_files/tmr1.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;		None
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;		None
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  1    wreg      void 
  2558 ;; Registers used:
  2559 ;;		wreg, status,2, status,0, pclath, cstack
  2560 ;; Tracked objects:
  2561 ;;		On entry : B1F/1
  2562 ;;		On exit  : B1F/0
  2563 ;;		Unchanged: B00/0
  2564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2565 ;;      Params:         0       0       0       0       0       0       0       0
  2566 ;;      Locals:         0       0       0       0       0       0       0       0
  2567 ;;      Temps:          0       0       0       0       0       0       0       0
  2568 ;;      Totals:         0       0       0       0       0       0       0       0
  2569 ;;Total ram usage:        0 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    1
  2572 ;; This function calls:
  2573 ;;		_TMR1_StartTimer
  2574 ;; This function is called by:
  2575 ;;		_SYSTEM_Initialize
  2576 ;; This function uses a non-reentrant model
  2577 ;;
  2578                           
  2579                           
  2580                           ;psect for function _TMR1_Initialize
  2581  07B5                     _TMR1_Initialize:	
  2582  07B5                     l1045:	
  2583                           ;incstack = 0
  2584                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2585                           
  2586                           
  2587                           ;tmr1.c: 67: T1CON = 0x80;
  2588  07B5  3080               	movlw	128
  2589  07B6  0020               	movlb	0	; select bank0
  2590  07B7  0098               	movwf	24	;volatile
  2591                           
  2592                           ;tmr1.c: 70: T1GCON = 0x00;
  2593  07B8  0199               	clrf	25	;volatile
  2594                           
  2595                           ;tmr1.c: 73: TMR1H = 0x00;
  2596  07B9  0197               	clrf	23	;volatile
  2597                           
  2598                           ;tmr1.c: 76: TMR1L = 0x00;
  2599  07BA  0196               	clrf	22	;volatile
  2600                           
  2601                           ;tmr1.c: 79: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  2602  07BB  0817               	movf	23,w	;volatile
  2603  07BC  00FD               	movwf	_timer1ReloadVal+1	;volatile
  2604  07BD  01FC               	clrf	_timer1ReloadVal	;volatile
  2605  07BE  0816               	movf	22,w	;volatile
  2606  07BF  04FC               	iorwf	_timer1ReloadVal,f	;volatile
  2607                           
  2608                           ;tmr1.c: 82: PIR1bits.TMR1IF = 0;
  2609  07C0  1011               	bcf	17,0	;volatile
  2610                           
  2611                           ;tmr1.c: 85: TMR1_StartTimer();
  2612  07C1  2FC5               	ljmp	l1015
  2613  07C2                     __end_of_TMR1_Initialize:	
  2614  07C2                     __ptext14:	
  2615 ;; *************** function _WDT_Initialize *****************
  2616 ;; Defined at:
  2617 ;;		line 91 in file "mcc_generated_files/mcc.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;		None
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;		None
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  1    wreg      void 
  2624 ;; Registers used:
  2625 ;;		wreg
  2626 ;; Tracked objects:
  2627 ;;		On entry : B1F/1
  2628 ;;		On exit  : B1F/1
  2629 ;;		Unchanged: B00/0
  2630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2631 ;;      Params:         0       0       0       0       0       0       0       0
  2632 ;;      Locals:         0       0       0       0       0       0       0       0
  2633 ;;      Temps:          0       0       0       0       0       0       0       0
  2634 ;;      Totals:         0       0       0       0       0       0       0       0
  2635 ;;Total ram usage:        0 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; This function calls:
  2638 ;;		Nothing
  2639 ;; This function is called by:
  2640 ;;		_SYSTEM_Initialize
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           
  2645                           ;psect for function _WDT_Initialize
  2646  07C2                     _WDT_Initialize:	
  2647                           
  2648                           ;mcc.c: 94: WDTCON = 0x16;
  2649                           
  2650                           ;incstack = 0
  2651                           ; Regs used in _WDT_Initialize: [wreg]
  2652  07C2  3016               	movlw	22
  2653  07C3  0097               	movwf	23	;volatile
  2654  07C4  0008               	return
  2655  07C5                     __end_of_WDT_Initialize:	
  2656  07C5                     __ptext16:	
  2657 ;; *************** function _TMR1_StartTimer *****************
  2658 ;; Defined at:
  2659 ;;		line 88 in file "mcc_generated_files/tmr1.c"
  2660 ;; Parameters:    Size  Location     Type
  2661 ;;		None
  2662 ;; Auto vars:     Size  Location     Type
  2663 ;;		None
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  1    wreg      void 
  2666 ;; Registers used:
  2667 ;;		None
  2668 ;; Tracked objects:
  2669 ;;		On entry : B1F/0
  2670 ;;		On exit  : B1F/0
  2671 ;;		Unchanged: B00/0
  2672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2673 ;;      Params:         0       0       0       0       0       0       0       0
  2674 ;;      Locals:         0       0       0       0       0       0       0       0
  2675 ;;      Temps:          0       0       0       0       0       0       0       0
  2676 ;;      Totals:         0       0       0       0       0       0       0       0
  2677 ;;Total ram usage:        0 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; This function calls:
  2680 ;;		Nothing
  2681 ;; This function is called by:
  2682 ;;		_TMR1_Initialize
  2683 ;; This function uses a non-reentrant model
  2684 ;;
  2685                           
  2686                           
  2687                           ;psect for function _TMR1_StartTimer
  2688  07C5                     _TMR1_StartTimer:	
  2689  07C5                     l1015:	
  2690                           ;incstack = 0
  2691                           ; Regs used in _TMR1_StartTimer: []
  2692                           
  2693                           
  2694                           ;tmr1.c: 91: T1CONbits.TMR1ON = 1;
  2695  07C5  1418               	bsf	24,0	;volatile
  2696  07C6  0008               	return
  2697  07C7                     __end_of_TMR1_StartTimer:	
  2698  07C7                     PL2:	
  2699  07C7  0821               	movf	sprintf@f+1,w
  2700  07C8  00A5               	movwf	??_sprintf+1
  2701  07C9  0820               	movf	sprintf@f,w
  2702  07CA  00A4               	movwf	??_sprintf
  2703  07CB  0AA0               	incf	sprintf@f,f
  2704  07CC  1903               	skipnz
  2705  07CD  0AA1               	incf	sprintf@f+1,f
  2706  07CE  0084               	movwf	4
  2707  07CF  0825               	movf	??_sprintf+1,w
  2708  07D0  0085               	movwf	5
  2709  07D1  0800               	movf	0,w	;code access
  2710  07D2  00B0               	movwf	sprintf@c
  2711  07D3  0008               	return
  2712  07D4                     __end_ofPL2:	
  2713  07D4                     PL4:	
  2714  07D4  00A4               	movwf	??_sprintf
  2715  07D5  301E               	movlw	low (_dpowers| (0+32768))
  2716  07D6  01A5               	clrf	??_sprintf+1
  2717  07D7  35A4               	lslf	??_sprintf,f
  2718  07D8  0DA5               	rlf	??_sprintf+1,f
  2719  07D9  0724               	addwf	??_sprintf,w
  2720  07DA  0084               	movwf	4
  2721  07DB  3088               	movlw	high (_dpowers| (0+32768))
  2722  07DC  3D25               	addwfc	??_sprintf+1,w
  2723  07DD  0085               	movwf	5
  2724  07DE  3F00               	moviw [0]fsr0
  2725  07DF  0008               	return
  2726  07E0                     __end_ofPL4:	
  2727  07E0                     PL6:	
  2728  07E0  0820               	movf	sprintf@f,w
  2729  07E1  0084               	movwf	4
  2730  07E2  0821               	movf	sprintf@f+1,w
  2731  07E3  0085               	movwf	5
  2732  07E4  0800               	movf	0,w	;code access
  2733  07E5  0008               	return
  2734  07E6                     __end_ofPL6:	
  2735  07E6                     PL8:	
  2736  07E6  082F               	movf	sprintf@sp,w
  2737  07E7  0086               	movwf	6
  2738  07E8  0187               	clrf	7
  2739  07E9  0830               	movf	sprintf@c,w
  2740  07EA  0081               	movwf	1
  2741  07EB  0AAF               	incf	sprintf@sp,f
  2742  07EC  0008               	return
  2743  07ED                     __end_ofPL8:	
  2744  07ED                     PL10:	
  2745  07ED  082F               	movf	sprintf@sp,w
  2746  07EE  0086               	movwf	6
  2747  07EF  302D               	movlw	45
  2748  07F0  0187               	clrf	7
  2749  07F1  0081               	movwf	1
  2750  07F2  0AAF               	incf	sprintf@sp,f
  2751  07F3  0008               	return
  2752  07F4                     __end_ofPL10:	
  2753  07F4                     PL12:	
  2754  07F4  0187               	clrf	7
  2755  07F5  0081               	movwf	1
  2756  07F6  30FF               	movlw	-1
  2757  07F7  0AAF               	incf	sprintf@sp,f
  2758  07F8  07AD               	addwf	sprintf@width,f
  2759  07F9  0008               	return
  2760  07FA                     __end_ofPL12:	
  2761  07FA                     PL14:	
  2762  07FA  0874               	movf	TextLCD_Puts@data,w
  2763  07FB  0084               	movwf	4
  2764  07FC  0875               	movf	TextLCD_Puts@data+1,w
  2765  07FD  0085               	movwf	5
  2766  07FE  0800               	movf	0,w	;code access
  2767  07FF  0008               	return
  2768  0800                     __end_ofPL14:	
  2769                           
  2770                           	psect	bssCOMMON
  2771  007C                     __pbssCOMMON:	
  2772  007C                     _timer1ReloadVal:	
  2773  007C                     	ds	2
  2774                           
  2775                           	psect	dataBANK0
  2776  0043                     __pdataBANK0:	
  2777  0043                     main@prv_count:	
  2778  0043                     	ds	2
  2779                           
  2780                           	psect	cstackCOMMON
  2781  0070                     __pcstackCOMMON:	
  2782  0070                     ?_isdigit:	
  2783  0070                     ?_OSCILLATOR_Initialize:	
  2784                           ; 1 bit 
  2785                           
  2786  0070                     ??_OSCILLATOR_Initialize:	
  2787                           ; 1 bytes @ 0x0
  2788                           
  2789  0070                     ?_WDT_Initialize:	
  2790                           ; 1 bytes @ 0x0
  2791                           
  2792  0070                     ??_WDT_Initialize:	
  2793                           ; 1 bytes @ 0x0
  2794                           
  2795  0070                     ?_TMR1_Initialize:	
  2796                           ; 1 bytes @ 0x0
  2797                           
  2798  0070                     ??_TMR1_Initialize:	
  2799                           ; 1 bytes @ 0x0
  2800                           
  2801  0070                     ?_TextLCD_Init:	
  2802                           ; 1 bytes @ 0x0
  2803                           
  2804  0070                     ?_TMR1_StartTimer:	
  2805                           ; 1 bytes @ 0x0
  2806                           
  2807  0070                     ??_TMR1_StartTimer:	
  2808                           ; 1 bytes @ 0x0
  2809                           
  2810  0070                     ??_isdigit:	
  2811                           ; 1 bytes @ 0x0
  2812                           
  2813  0070                     ?_PIN_MANAGER_Initialize:	
  2814                           ; 1 bytes @ 0x0
  2815                           
  2816  0070                     ??_PIN_MANAGER_Initialize:	
  2817                           ; 1 bytes @ 0x0
  2818                           
  2819  0070                     ?_SYSTEM_Initialize:	
  2820                           ; 1 bytes @ 0x0
  2821                           
  2822  0070                     ??_SYSTEM_Initialize:	
  2823                           ; 1 bytes @ 0x0
  2824                           
  2825  0070                     ?_main:	
  2826                           ; 1 bytes @ 0x0
  2827                           
  2828  0070                     ?_TextLCD_4Bits_Write:	
  2829                           ; 1 bytes @ 0x0
  2830                           
  2831  0070                     ??_TextLCD_4Bits_Write:	
  2832                           ; 1 bytes @ 0x0
  2833                           
  2834  0070                     ?_TextLCD_Enable:	
  2835                           ; 1 bytes @ 0x0
  2836                           
  2837  0070                     ??_TextLCD_Enable:	
  2838                           ; 1 bytes @ 0x0
  2839                           
  2840  0070                     ?_TextLCD_CMD:	
  2841                           ; 1 bytes @ 0x0
  2842                           
  2843  0070                     ?_TextLCD_PutChar:	
  2844                           ; 1 bytes @ 0x0
  2845                           
  2846  0070                     ?_TMR1_ReadTimer:	
  2847                           ; 1 bytes @ 0x0
  2848                           
  2849  0070                     ?___wmul:	
  2850                           ; 2 bytes @ 0x0
  2851                           
  2852  0070                     ?___lwdiv:	
  2853                           ; 2 bytes @ 0x0
  2854                           
  2855  0070                     TextLCD_4Bits_Write@nib:	
  2856                           ; 2 bytes @ 0x0
  2857                           
  2858  0070                     _isdigit$531:	
  2859                           ; 1 bytes @ 0x0
  2860                           
  2861  0070                     ___wmul@multiplier:	
  2862                           ; 1 bytes @ 0x0
  2863                           
  2864  0070                     ___lwdiv@divisor:	
  2865                           ; 2 bytes @ 0x0
  2866                           
  2867                           
  2868                           ; 2 bytes @ 0x0
  2869  0070                     	ds	1
  2870  0071                     ??_TextLCD_CMD:	
  2871  0071                     TextLCD_CMD@cmd:	
  2872                           ; 1 bytes @ 0x1
  2873                           
  2874  0071                     isdigit@c:	
  2875                           ; 1 bytes @ 0x1
  2876                           
  2877                           
  2878                           ; 1 bytes @ 0x1
  2879  0071                     	ds	1
  2880  0072                     ??_TextLCD_Init:	
  2881  0072                     ??_TMR1_ReadTimer:	
  2882                           ; 1 bytes @ 0x2
  2883                           
  2884  0072                     ??_TextLCD_PutChar:	
  2885                           ; 1 bytes @ 0x2
  2886                           
  2887  0072                     TextLCD_PutChar@data:	
  2888                           ; 1 bytes @ 0x2
  2889                           
  2890  0072                     TMR1_ReadTimer@readVal:	
  2891                           ; 1 bytes @ 0x2
  2892                           
  2893  0072                     ___wmul@multiplicand:	
  2894                           ; 2 bytes @ 0x2
  2895                           
  2896  0072                     ___lwdiv@dividend:	
  2897                           ; 2 bytes @ 0x2
  2898                           
  2899                           
  2900                           ; 2 bytes @ 0x2
  2901  0072                     	ds	1
  2902  0073                     ?_TextLCD_Puts:	
  2903  0073                     TextLCD_Puts@idx:	
  2904                           ; 1 bytes @ 0x3
  2905                           
  2906                           
  2907                           ; 1 bytes @ 0x3
  2908  0073                     	ds	1
  2909  0074                     ??___wmul:	
  2910  0074                     ??___lwdiv:	
  2911                           ; 1 bytes @ 0x4
  2912                           
  2913  0074                     TMR1_ReadTimer@readValHigh:	
  2914                           ; 1 bytes @ 0x4
  2915                           
  2916  0074                     TextLCD_Puts@data:	
  2917                           ; 1 bytes @ 0x4
  2918                           
  2919  0074                     ___wmul@product:	
  2920                           ; 2 bytes @ 0x4
  2921                           
  2922  0074                     ___lwdiv@quotient:	
  2923                           ; 2 bytes @ 0x4
  2924                           
  2925                           
  2926                           ; 2 bytes @ 0x4
  2927  0074                     	ds	1
  2928  0075                     TMR1_ReadTimer@readValLow:	
  2929                           
  2930                           ; 1 bytes @ 0x5
  2931  0075                     	ds	1
  2932  0076                     TextLCD_Puts@length_or_type:	
  2933  0076                     ___lwdiv@counter:	
  2934                           ; 1 bytes @ 0x6
  2935                           
  2936                           
  2937                           ; 1 bytes @ 0x6
  2938  0076                     	ds	1
  2939  0077                     ??_TextLCD_Puts:	
  2940  0077                     ?___lwmod:	
  2941                           ; 1 bytes @ 0x7
  2942                           
  2943  0077                     ___lwmod@divisor:	
  2944                           ; 2 bytes @ 0x7
  2945                           
  2946                           
  2947                           ; 2 bytes @ 0x7
  2948  0077                     	ds	1
  2949  0078                     TextLCD_Puts@line:	
  2950                           
  2951                           ; 1 bytes @ 0x8
  2952  0078                     	ds	1
  2953  0079                     TextLCD_Puts@address:	
  2954  0079                     ___lwmod@dividend:	
  2955                           ; 1 bytes @ 0x9
  2956                           
  2957                           
  2958                           ; 2 bytes @ 0x9
  2959  0079                     	ds	2
  2960  007B                     ??___lwmod:	
  2961  007B                     ___lwmod@counter:	
  2962                           ; 1 bytes @ 0xB
  2963                           
  2964                           
  2965                           ; 1 bytes @ 0xB
  2966  007B                     	ds	1
  2967  007C                     ??_main:	
  2968                           
  2969                           	psect	cstackBANK0
  2970  0020                     __pcstackBANK0:	
  2971                           ; 1 bytes @ 0xC
  2972                           
  2973  0020                     ?_sprintf:	
  2974  0020                     sprintf@f:	
  2975                           ; 2 bytes @ 0x0
  2976                           
  2977                           
  2978                           ; 2 bytes @ 0x0
  2979  0020                     	ds	4
  2980  0024                     ??_sprintf:	
  2981                           
  2982                           ; 1 bytes @ 0x4
  2983  0024                     	ds	4
  2984  0028                     sprintf@ap:	
  2985                           
  2986                           ; 1 bytes @ 0x8
  2987  0028                     	ds	1
  2988  0029                     sprintf@prec:	
  2989                           
  2990                           ; 1 bytes @ 0x9
  2991  0029                     	ds	1
  2992  002A                     sprintf@val:	
  2993                           
  2994                           ; 2 bytes @ 0xA
  2995  002A                     	ds	2
  2996  002C                     sprintf@flag:	
  2997                           
  2998                           ; 1 bytes @ 0xC
  2999  002C                     	ds	1
  3000  002D                     sprintf@width:	
  3001                           
  3002                           ; 2 bytes @ 0xD
  3003  002D                     	ds	2
  3004  002F                     sprintf@sp:	
  3005                           
  3006                           ; 1 bytes @ 0xF
  3007  002F                     	ds	1
  3008  0030                     sprintf@c:	
  3009                           
  3010                           ; 1 bytes @ 0x10
  3011  0030                     	ds	1
  3012  0031                     main@str:	
  3013                           
  3014                           ; 16 bytes @ 0x11
  3015  0031                     	ds	16
  3016  0041                     main@pre_count:	
  3017                           
  3018                           ; 2 bytes @ 0x21
  3019  0041                     	ds	2


Data Sizes:
    Strings     26
    Constant    14
    Data        2
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     35      37
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_2(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> main@str(BANK0[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    TextLCD_Puts@data	PTR unsigned char  size(2) Largest target is 16
		 -> main@str(BANK0[16]), STR_1(CODE[15]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _TextLCD_Puts->_TextLCD_PutChar
    _TextLCD_PutChar->_TextLCD_CMD
    _TextLCD_Init->_TextLCD_CMD
    _TextLCD_CMD->_TextLCD_4Bits_Write

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0    3172
                                             17 BANK0     18    18      0
                  _SYSTEM_Initialize
                     _TMR1_ReadTimer
                       _TextLCD_Init
                       _TextLCD_Puts
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    21      4    1867
                                              0 BANK0     17    13      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMMON     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _TextLCD_Puts                                         7     3      4     881
                                              3 COMMON     7     3      4
                        _TextLCD_CMD
                    _TextLCD_PutChar
 ---------------------------------------------------------------------------------
 (2) _TextLCD_PutChar                                      1     1      0     157
                                              2 COMMON     1     1      0
                        _TextLCD_CMD
 ---------------------------------------------------------------------------------
 (1) _TextLCD_Init                                         2     2      0     226
                                              2 COMMON     2     2      0
                _TextLCD_4Bits_Write
                        _TextLCD_CMD
                     _TextLCD_Enable
 ---------------------------------------------------------------------------------
 (3) _TextLCD_CMD                                          1     1      0     135
                                              1 COMMON     1     1      0
                _TextLCD_4Bits_Write
                     _TextLCD_Enable
 ---------------------------------------------------------------------------------
 (4) _TextLCD_Enable                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TextLCD_4Bits_Write                                  1     1      0      91
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR1_ReadTimer                                       6     4      2      70
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
     _WDT_Initialize
   _TMR1_ReadTimer
   _TextLCD_Init
     _TextLCD_4Bits_Write
     _TextLCD_CMD
       _TextLCD_4Bits_Write
       _TextLCD_Enable
     _TextLCD_Enable
   _TextLCD_Puts
     _TextLCD_CMD
       _TextLCD_4Bits_Write
       _TextLCD_Enable
     _TextLCD_PutChar
       _TextLCD_CMD
         _TextLCD_4Bits_Write
         _TextLCD_Enable
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      33       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     23      25       6       46.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      33      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sun Sep 03 23:44:37 2017

                            __CFG_CP$OFF 0000                                       PL2 07C7  
                                     PL4 07D4                                       PL6 07E0  
                                     PL8 07E6                                       l56 062F  
                    ___wmul@multiplicand 0072                                      PL10 07ED  
                                    PL12 07F4                                      PL14 07FA  
                            __CFG_LVP$ON 0000                                      l181 066E  
                           __CFG_CPD$OFF 0000                                      u435 0770  
                                    u605 06EF                                      u705 055E  
                                    u475 0791                                      u717 0589  
                                    u565 06CD                                      u727 05BA  
                                    u737 05C9                                      u747 05D0  
                                    u757 05EB                                      u767 05F6  
                                    u777 05FB                          _timer1ReloadVal 007C  
                           __CFG_BORV$LO 0000                                      wreg 0009  
                           __CFG_IESO$ON 0000                  __size_of_TextLCD_Enable 000C  
                                   l1015 07C5                                     l1009 05F3  
                                   l1113 0777                                     l1105 0768  
                                   l1203 0672                                     l1045 07B5  
                                   l1117 077B                                     l1133 0797  
                                   l1221 06AE                                     l1205 0678  
                                   l1231 06C0                                     l1129 078B  
                                   l1137 079B                                     l1081 07A2  
                                   l1209 0680                                     l1075 0759  
                                   l1251 06E0                                     l1219 06A2  
                                   l1307 0552                                     l1173 0597  
                                   l1085 07A8                                     l1245 06D4  
                                   l1237 06C2                                     l1183 05A0  
                                   l1175 059F                                     l1255 06FB  
                                   l1169 0590                                     l1281 0721  
                                   l1265 0706                                     l1273 0712  
                                   l1257 06FE                                     l1275 0716  
                                   l1197 066A                                     l1295 0744  
                                   l1287 0727                                     l1289 072A  
                                   l1297 065E                                     l1299 0748  
                                   STR_1 0804                                     STR_2 0813  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     _LATE 0110  
                                   _PLLR 04D6                                     _WPUB 020D  
                                   _WPUE 0210                             __CFG_WRT$OFF 0000  
                          __CFG_FCMEN$ON 0000                                     _main 0544  
                        TextLCD_Puts@idx 0073                                     fsr0h 0005  
                                   fsr1h 0007                                     indf0 0000  
                                   fsr0l 0004                                     indf1 0001  
                                   fsr1l 0006                                     btemp 007E  
                          __CFG_BOREN$ON 0000                                     start 0002  
                          __CFG_MCLRE$ON 0000                            __CFG_PLLEN$ON 0000  
         __size_of_OSCILLATOR_Initialize 0007            __end_of_OSCILLATOR_Initialize 0632  
                                  ?_main 0070                            __CFG_WDTE$OFF 0000  
               __size_of_TextLCD_PutChar 0008                          _TMR1_StartTimer 07C5  
                                  _T1CON 0018                          __end_of___lwdiv 0780  
                        __end_of___lwmod 07A0                                    _TMR1H 0017  
                                  _TMR1L 0016                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _TRISE 0090                         TextLCD_Puts@data 0074  
                        __end_of_dpowers 0828                           _WDT_Initialize 07C2  
                       TextLCD_Puts@line 0078                          __end_of_isdigit 075B  
                __end_of_TMR1_Initialize 07C2                                    status 0003  
                                  wtemp0 007E                          __end_of_sprintf 074D  
                        __initialization 053D                             __end_of_main 0576  
                                 ??_main 007C                   __end_of_WDT_Initialize 07C5  
                                 _APFCON 011D                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _T1GCON 0019  
                                 _OSCCON 0099                                   _WDTCON 0097  
                         __CFG_PWRTE$OFF 0000                            ??_TextLCD_CMD 0071  
                __end_of_TMR1_StartTimer 07C7               TextLCD_Puts@length_or_type 0076  
                                 ___wmul 07A0                           __CFG_STVREN$ON 0000  
                              ??___lwdiv 0074                                ??___lwmod 007B  
                          main@pre_count 0041                                ??_isdigit 0070  
                        ?_WDT_Initialize 0070                           _TextLCD_Enable 05F3  
                          main@prv_count 0043                        ??_TextLCD_PutChar 0072  
                              ??_sprintf 0024                         ?_TMR1_Initialize 0070  
                      _SYSTEM_Initialize 0624                  __end_of__initialization 0542  
                     ?_SYSTEM_Initialize 0070                           __pcstackCOMMON 0070  
                           __pidataBANK0 0000                      ??_SYSTEM_Initialize 0070  
                             __end_ofPL2 07D4                               __end_ofPL4 07E0  
                             __end_ofPL6 07E6                               __end_ofPL8 07ED  
                    __end_of_TextLCD_CMD 060A              __end_of_TextLCD_4Bits_Write 0624  
                 __end_of_TextLCD_Enable 05FF                           _OPTION_REGbits 0095  
                __size_of_TMR1_ReadTimer 000E                __end_of_SYSTEM_Initialize 062B  
                           sprintf@width 002D                   TextLCD_4Bits_Write@nib 0070  
                        __CFG_VCAPEN$OFF 0000                               __pmaintext 0544  
                                ?___wmul 0070                         ?_TMR1_StartTimer 0070  
                          ?_TextLCD_Init 0070                            ?_TextLCD_Puts 0073  
                        ?_TextLCD_Enable 0070                                  _OSCTUNE 0098  
                            _TextLCD_CMD 05FF                           ??_TextLCD_Init 0072  
                         ??_TextLCD_Puts 0077                          __size_of___wmul 0015  
                                ___lwdiv 075B                                  ___lwmod 0780  
               TMR1_ReadTimer@readValLow 0075                                  __ptext1 065B  
                                __ptext2 074D                                  __ptext3 07A0  
                                __ptext4 0780                                  __ptext5 075B  
                                __ptext6 0576                                  __ptext7 05AD  
                                __ptext8 05B5                                  __ptext9 05FF  
              TMR1_ReadTimer@readValHigh 0074                                _T1CONbits 0018  
                                _dpowers 081E                    _OSCILLATOR_Initialize 062B  
                                _isdigit 074D                 ??_PIN_MANAGER_Initialize 0070  
             __size_of_SYSTEM_Initialize 0007                                  _sprintf 065B  
                                main@str 0031                     end_of_initialization 0542  
                        _TextLCD_PutChar 05AD                         ??_WDT_Initialize 0070  
                       __CFG_FOSC$INTOSC 0000                           _TMR1_ReadTimer 064D  
                         __end_of___wmul 07B5                   ?_OSCILLATOR_Initialize 0070  
                 __end_of_TMR1_ReadTimer 065B                              __end_ofPL10 07F4  
                            __end_ofPL12 07FA                              __end_ofPL14 0800  
                    start_initialization 053D          __size_of_PIN_MANAGER_Initialize 001B  
                   __end_of_TextLCD_Init 05F3                     __end_of_TextLCD_Puts 05AD  
                __end_of_TextLCD_PutChar 05B5                 __size_of_TMR1_Initialize 000D  
                               ??___wmul 0074                              __pdataBANK0 0043  
                       ??_TextLCD_Enable 0070                          ?_TMR1_ReadTimer 0070  
                            __pbssCOMMON 007C                                ___latbits 0002  
                          __pcstackBANK0 0020             __size_of_TextLCD_4Bits_Write 001A  
                            sprintf@flag 002C                              sprintf@prec 0029  
                       ___lwdiv@dividend 0072                   _PIN_MANAGER_Initialize 0632  
                           ?_TextLCD_CMD 0070                                 ?___lwdiv 0070  
                               ?___lwmod 0077                 __size_of_TMR1_StartTimer 0002  
                               ?_isdigit 0070                         ___lwdiv@quotient 0074  
                               ?_sprintf 0020                      TextLCD_PutChar@data 0072  
                         ___wmul@product 0074                                 _LATCbits 010E  
                               _PIR1bits 0011                         ?_TextLCD_PutChar 0070  
                      ??_TMR1_Initialize 0070                        ___wmul@multiplier 0070  
                  __size_of_TextLCD_Init 003E                    __size_of_TextLCD_Puts 0037  
                  TMR1_ReadTimer@readVal 0072                  ??_OSCILLATOR_Initialize 0070  
                           _TextLCD_Init 05B5                             _TextLCD_Puts 0576  
                       __size_of___lwdiv 0025                         __size_of___lwmod 0020  
                            _isdigit$531 0070                               sprintf@val 002A  
                       __size_of_isdigit 000E                          ___lwdiv@divisor 0070  
                        ___lwdiv@counter 0076                                 __ptext10 05F3  
                               __ptext11 060A                                 __ptext12 064D  
                               __ptext13 0624                                 __ptext14 07C2  
                               __ptext15 07B5                                 __ptext16 07C5  
                               __ptext17 0632                                 __ptext18 062B  
                    TextLCD_Puts@address 0079                        ??_TMR1_StartTimer 0070  
                       __size_of_sprintf 00F2                            __size_of_main 0032  
__end_ofTextLCD_Puts@DDRAM_Start_Address 0804          TextLCD_Puts@DDRAM_Start_Address 0800  
                       ??_TMR1_ReadTimer 0072                      _TextLCD_4Bits_Write 060A  
                   __size_of_TextLCD_CMD 000B                                 isdigit@c 0071  
                __size_of_WDT_Initialize 0003                     ?_TextLCD_4Bits_Write 0070  
                              sprintf@ap 0028                                sprintf@sp 002F  
                       ___lwmod@dividend 0079                  ?_PIN_MANAGER_Initialize 0070  
                      __CFG_CLKOUTEN$OFF 0000                            __pstringtext1 081E  
                          __pstringtext2 0800                            __pstringtext3 0813  
                          __pstringtext4 0000                                 sprintf@c 0030  
                               sprintf@f 0020                          ___lwmod@divisor 0077  
                        ___lwmod@counter 007B                    ??_TextLCD_4Bits_Write 0070  
                         TextLCD_CMD@cmd 0071           __end_of_PIN_MANAGER_Initialize 064D  
                        _TMR1_Initialize 07B5  
