Version 3.2 HI-TECH Software Intermediate Code
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef signed short long int int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 43: typedef unsigned char uint8_t;
[; ;stdint.h: 49: typedef unsigned int uint16_t;
[; ;stdint.h: 56: typedef unsigned short long int uint24_t;
[; ;stdint.h: 63: typedef unsigned long int uint32_t;
[; ;stdint.h: 71: typedef signed char int_least8_t;
[; ;stdint.h: 78: typedef signed int int_least16_t;
[; ;stdint.h: 90: typedef signed short long int int_least24_t;
[; ;stdint.h: 98: typedef signed long int int_least32_t;
[; ;stdint.h: 105: typedef unsigned char uint_least8_t;
[; ;stdint.h: 111: typedef unsigned int uint_least16_t;
[; ;stdint.h: 121: typedef unsigned short long int uint_least24_t;
[; ;stdint.h: 128: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 137: typedef signed char int_fast8_t;
[; ;stdint.h: 144: typedef signed int int_fast16_t;
[; ;stdint.h: 156: typedef signed short long int int_fast24_t;
[; ;stdint.h: 164: typedef signed long int int_fast32_t;
[; ;stdint.h: 171: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 177: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 187: typedef unsigned short long int uint_fast24_t;
[; ;stdint.h: 194: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 200: typedef int32_t intmax_t;
[; ;stdint.h: 205: typedef uint32_t uintmax_t;
[; ;stdint.h: 210: typedef int16_t intptr_t;
[; ;stdint.h: 215: typedef uint16_t uintptr_t;
[; ;stdbool.h: 12: typedef unsigned char bool;
[; ;__size_t.h: 4: typedef unsigned size_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 43: struct __prbuf
[; ;stdio.h: 44: {
[; ;stdio.h: 45: char * ptr;
[; ;stdio.h: 46: void (* func)(char);
[; ;stdio.h: 47: };
[; ;errno.h: 29: extern int errno;
[; ;conio.h: 12: extern void init_uart(void);
[; ;conio.h: 14: extern char getch(void);
[; ;conio.h: 15: extern char getche(void);
[; ;conio.h: 16: extern void putch(char);
[; ;conio.h: 17: extern void ungetch(char);
[; ;conio.h: 19: extern __bit kbhit(void);
[; ;conio.h: 23: extern char * cgets(char *);
[; ;conio.h: 24: extern void cputs(const char *);
[; ;stdio.h: 88: extern int cprintf(char *, ...);
[; ;stdio.h: 93: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 183: extern char * gets(char *);
[; ;stdio.h: 184: extern int puts(const char *);
[; ;stdio.h: 185: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 186: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 187: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 188: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 189: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 190: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 194: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 195: extern int printf(const char *, ...);
[; ;string.h: 14: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 15: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 16: extern void * memset(void *, int, size_t);
[; ;string.h: 21: extern void * __builtin_memcpy(void *, const void *, size_t);
[; ;string.h: 36: extern char * strcat(char *, const char *);
[; ;string.h: 37: extern char * strcpy(char *, const char *);
[; ;string.h: 38: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 39: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 40: extern char * strdup(const char *);
[; ;string.h: 41: extern char * strtok(char *, const char *);
[; ;string.h: 44: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 45: extern int strcmp(const char *, const char *);
[; ;string.h: 46: extern int stricmp(const char *, const char *);
[; ;string.h: 47: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 48: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 49: extern void * memchr(const void *, int, size_t);
[; ;string.h: 50: extern size_t strcspn(const char *, const char *);
[; ;string.h: 51: extern char * strpbrk(const char *, const char *);
[; ;string.h: 52: extern size_t strspn(const char *, const char *);
[; ;string.h: 53: extern char * strstr(const char *, const char *);
[; ;string.h: 54: extern char * stristr(const char *, const char *);
[; ;string.h: 55: extern char * strerror(int);
[; ;string.h: 56: extern size_t strlen(const char *);
[; ;string.h: 57: extern char * strchr(const char *, int);
[; ;string.h: 58: extern char * strichr(const char *, int);
[; ;string.h: 59: extern char * strrchr(const char *, int);
[; ;string.h: 60: extern char * strrichr(const char *, int);
[; ;Data_Check.h: 8: bool Cmp(uint8_t *str1, uint8_t idx1, const uint8_t *str2, uint8_t len);
[; ;Data_Check.h: 9: bool Contain(uint8_t *str, uint8_t strlen, const uint8_t *sample, uint8_t samlen);
[; ;Data_Check.h: 10: uint16_t Copy(uint8_t *strin, uint8_t *strout);
[; ;Data_Check.h: 11: uint16_t Concatenate(uint8_t *strin1, uint8_t *strin2, uint8_t *strout);
"3 Data_Check.c
[v _Cmp `(uc ~T0 @X0 1 ef4`*uc`uc`*Cuc`uc ]
"4
{
[; ;Data_Check.c: 3: bool Cmp(uint8_t *str1, uint8_t idx1, const uint8_t *str2, uint8_t len)
[; ;Data_Check.c: 4: {
[e :U _Cmp ]
"3
[v _str1 `*uc ~T0 @X0 1 r1 ]
[v _idx1 `uc ~T0 @X0 1 r2 ]
[v _str2 `*Cuc ~T0 @X0 1 r3 ]
[v _len `uc ~T0 @X0 1 r4 ]
"4
[f ]
[; ;Data_Check.c: 5: while(len--)
"5
[e $U 3  ]
[e :U 4 ]
[; ;Data_Check.c: 6: {
"6
{
[; ;Data_Check.c: 7: if(str1[idx1]!=*str2) return 0;
"7
[e $ ! != -> *U + _str1 * -> _idx1 `ux -> -> # *U _str1 `ui `ux `i -> *U _str2 `i 6  ]
[e ) -> -> 0 `i `uc ]
[e $UE 2  ]
[e :U 6 ]
[; ;Data_Check.c: 8: idx1++;
"8
[e ++ _idx1 -> -> 1 `i `uc ]
[; ;Data_Check.c: 9: str2++;
"9
[e ++ _str2 * -> -> 1 `i `x -> -> # *U _str2 `i `x ]
"10
}
[e :U 3 ]
"5
[e $ != -> -- _len -> -> 1 `i `uc `i -> -> -> 0 `i `uc `i 4  ]
[e :U 5 ]
[; ;Data_Check.c: 10: }
[; ;Data_Check.c: 11: return 1;
"11
[e ) -> -> 1 `i `uc ]
[e $UE 2  ]
[; ;Data_Check.c: 12: }
"12
[e :UE 2 ]
}
"14
[v _Contain `(uc ~T0 @X0 1 ef4`*uc`uc`*Cuc`uc ]
"15
{
[; ;Data_Check.c: 14: bool Contain(uint8_t *str, uint8_t strlen, const uint8_t *sample, uint8_t samlen)
[; ;Data_Check.c: 15: {
[e :U _Contain ]
"14
[v _str `*uc ~T0 @X0 1 r1 ]
[v _strlen `uc ~T0 @X0 1 r2 ]
[v _sample `*Cuc ~T0 @X0 1 r3 ]
[v _samlen `uc ~T0 @X0 1 r4 ]
"15
[f ]
"16
[v _i `uc ~T0 @X0 1 a ]
[v _j `uc ~T0 @X0 1 a ]
[; ;Data_Check.c: 16: uint8_t i, j;
[; ;Data_Check.c: 18: for(i=0; i<strlen; i++)
"18
{
[e = _i -> -> 0 `i `uc ]
[e $U 11  ]
"19
[e :U 8 ]
[; ;Data_Check.c: 19: {
{
[; ;Data_Check.c: 20: if(str[i]==sample[0])
"20
[e $ ! == -> *U + _str * -> _i `ux -> -> # *U _str `ui `ux `i -> *U + _sample * -> -> 0 `i `x -> -> # *U _sample `i `x `i 12  ]
[; ;Data_Check.c: 21: {
"21
{
[; ;Data_Check.c: 22: i++;
"22
[e ++ _i -> -> 1 `i `uc ]
[; ;Data_Check.c: 23: for(j=1; j<samlen; j++, i++)
"23
{
[e = _j -> -> 1 `i `uc ]
[e $U 16  ]
"24
[e :U 13 ]
[; ;Data_Check.c: 24: {
{
[; ;Data_Check.c: 25: if(str[i]!=sample[j]) break;
"25
[e $ ! != -> *U + _str * -> _i `ux -> -> # *U _str `ui `ux `i -> *U + _sample * -> _j `ux -> -> # *U _sample `ui `ux `i 17  ]
[e $U 14  ]
[e :U 17 ]
"26
}
"23
[e ; ++ _j -> -> 1 `i `uc ++ _i -> -> 1 `i `uc ]
[e :U 16 ]
[e $ < -> _j `i -> _samlen `i 13  ]
[e :U 14 ]
"26
}
[; ;Data_Check.c: 26: }
[; ;Data_Check.c: 27: if(j==samlen) return 1;
"27
[e $ ! == -> _j `i -> _samlen `i 18  ]
[e ) -> -> 1 `i `uc ]
[e $UE 7  ]
[e $U 19  ]
"28
[e :U 18 ]
[; ;Data_Check.c: 28: else i--;
[e -- _i -> -> 1 `i `uc ]
[e :U 19 ]
"29
}
[e :U 12 ]
"30
}
"18
[e ++ _i -> -> 1 `i `uc ]
[e :U 11 ]
[e $ < -> _i `i -> _strlen `i 8  ]
[e :U 9 ]
"30
}
[; ;Data_Check.c: 29: }
[; ;Data_Check.c: 30: }
[; ;Data_Check.c: 31: return 0;
"31
[e ) -> -> 0 `i `uc ]
[e $UE 7  ]
[; ;Data_Check.c: 32: }
"32
[e :UE 7 ]
}
"34
[v _Copy `(ui ~T0 @X0 1 ef2`*uc`*uc ]
"35
{
[; ;Data_Check.c: 34: uint16_t Copy(uint8_t *strin, uint8_t *strout)
[; ;Data_Check.c: 35: {
[e :U _Copy ]
"34
[v _strin `*uc ~T0 @X0 1 r1 ]
[v _strout `*uc ~T0 @X0 1 r2 ]
"35
[f ]
"36
[v _lenout `ui ~T0 @X0 1 a ]
[; ;Data_Check.c: 36: uint16_t lenout=0;
[e = _lenout -> -> 0 `i `ui ]
[; ;Data_Check.c: 37: while(*strin!=0x00)
"37
[e $U 21  ]
[e :U 22 ]
[; ;Data_Check.c: 38: {
"38
{
[; ;Data_Check.c: 39: *strout=*strin;
"39
[e = *U _strout *U _strin ]
[; ;Data_Check.c: 40: strout++;
"40
[e ++ _strout * -> -> 1 `i `x -> -> # *U _strout `i `x ]
[; ;Data_Check.c: 41: strin++;
"41
[e ++ _strin * -> -> 1 `i `x -> -> # *U _strin `i `x ]
[; ;Data_Check.c: 42: lenout++;
"42
[e ++ _lenout -> -> 1 `i `ui ]
"43
}
[e :U 21 ]
"37
[e $ != -> *U _strin `i -> 0 `i 22  ]
[e :U 23 ]
[; ;Data_Check.c: 43: }
[; ;Data_Check.c: 44: return lenout;
"44
[e ) _lenout ]
[e $UE 20  ]
[; ;Data_Check.c: 45: }
"45
[e :UE 20 ]
}
"47
[v _Concatenate `(ui ~T0 @X0 1 ef3`*uc`*uc`*uc ]
"48
{
[; ;Data_Check.c: 47: uint16_t Concatenate(uint8_t *strin1, uint8_t *strin2, uint8_t *strout)
[; ;Data_Check.c: 48: {
[e :U _Concatenate ]
"47
[v _strin1 `*uc ~T0 @X0 1 r1 ]
[v _strin2 `*uc ~T0 @X0 1 r2 ]
[v _strout `*uc ~T0 @X0 1 r3 ]
"48
[f ]
"49
[v _lenout `ui ~T0 @X0 1 a ]
[; ;Data_Check.c: 49: uint16_t lenout=0;
[e = _lenout -> -> 0 `i `ui ]
[; ;Data_Check.c: 50: while(*strin1!=0x00)
"50
[e $U 25  ]
[e :U 26 ]
[; ;Data_Check.c: 51: {
"51
{
[; ;Data_Check.c: 52: *strout=*strin1;
"52
[e = *U _strout *U _strin1 ]
[; ;Data_Check.c: 53: strout++;
"53
[e ++ _strout * -> -> 1 `i `x -> -> # *U _strout `i `x ]
[; ;Data_Check.c: 54: strin1++;
"54
[e ++ _strin1 * -> -> 1 `i `x -> -> # *U _strin1 `i `x ]
[; ;Data_Check.c: 55: lenout++;
"55
[e ++ _lenout -> -> 1 `i `ui ]
"56
}
[e :U 25 ]
"50
[e $ != -> *U _strin1 `i -> 0 `i 26  ]
[e :U 27 ]
[; ;Data_Check.c: 56: }
[; ;Data_Check.c: 57: while(*strin2!=0x00)
"57
[e $U 28  ]
[e :U 29 ]
[; ;Data_Check.c: 58: {
"58
{
[; ;Data_Check.c: 59: *strout=*strin2;
"59
[e = *U _strout *U _strin2 ]
[; ;Data_Check.c: 60: strout++;
"60
[e ++ _strout * -> -> 1 `i `x -> -> # *U _strout `i `x ]
[; ;Data_Check.c: 61: strin2++;
"61
[e ++ _strin2 * -> -> 1 `i `x -> -> # *U _strin2 `i `x ]
[; ;Data_Check.c: 62: lenout++;
"62
[e ++ _lenout -> -> 1 `i `ui ]
"63
}
[e :U 28 ]
"57
[e $ != -> *U _strin2 `i -> 0 `i 29  ]
[e :U 30 ]
[; ;Data_Check.c: 63: }
[; ;Data_Check.c: 64: return lenout;
"64
[e ) _lenout ]
[e $UE 24  ]
[; ;Data_Check.c: 65: }
"65
[e :UE 24 ]
}
