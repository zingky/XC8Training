

Microchip Technology PIC LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sun Aug 20 15:51:24 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	16F1936
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 1.43
    35                           ; Generated 25/07/2017 GMT
    36                           ; 
    37                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F1936 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  0007                     	;# 
    76  0008                     	;# 
    77  0009                     	;# 
    78  000A                     	;# 
    79  000B                     	;# 
    80  000C                     	;# 
    81  000D                     	;# 
    82  000E                     	;# 
    83  0010                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0013                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  0090                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0093                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009B                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  0110                     	;# 
   120  0111                     	;# 
   121  0112                     	;# 
   122  0113                     	;# 
   123  0114                     	;# 
   124  0115                     	;# 
   125  0116                     	;# 
   126  0117                     	;# 
   127  0118                     	;# 
   128  0119                     	;# 
   129  011A                     	;# 
   130  011B                     	;# 
   131  011D                     	;# 
   132  018C                     	;# 
   133  018D                     	;# 
   134  0191                     	;# 
   135  0191                     	;# 
   136  0192                     	;# 
   137  0193                     	;# 
   138  0193                     	;# 
   139  0193                     	;# 
   140  0194                     	;# 
   141  0195                     	;# 
   142  0196                     	;# 
   143  0199                     	;# 
   144  019A                     	;# 
   145  019B                     	;# 
   146  019B                     	;# 
   147  019B                     	;# 
   148  019B                     	;# 
   149  019C                     	;# 
   150  019C                     	;# 
   151  019D                     	;# 
   152  019E                     	;# 
   153  019F                     	;# 
   154  020D                     	;# 
   155  0210                     	;# 
   156  0211                     	;# 
   157  0212                     	;# 
   158  0213                     	;# 
   159  0214                     	;# 
   160  0215                     	;# 
   161  0215                     	;# 
   162  0216                     	;# 
   163  0217                     	;# 
   164  0291                     	;# 
   165  0291                     	;# 
   166  0292                     	;# 
   167  0293                     	;# 
   168  0294                     	;# 
   169  0295                     	;# 
   170  0295                     	;# 
   171  0296                     	;# 
   172  0298                     	;# 
   173  0298                     	;# 
   174  0299                     	;# 
   175  029A                     	;# 
   176  029B                     	;# 
   177  029C                     	;# 
   178  029C                     	;# 
   179  029D                     	;# 
   180  029E                     	;# 
   181  029F                     	;# 
   182  0311                     	;# 
   183  0311                     	;# 
   184  0312                     	;# 
   185  0313                     	;# 
   186  0314                     	;# 
   187  0315                     	;# 
   188  0315                     	;# 
   189  0316                     	;# 
   190  0318                     	;# 
   191  0318                     	;# 
   192  0319                     	;# 
   193  031A                     	;# 
   194  031C                     	;# 
   195  031C                     	;# 
   196  031D                     	;# 
   197  031E                     	;# 
   198  0394                     	;# 
   199  0395                     	;# 
   200  0396                     	;# 
   201  0415                     	;# 
   202  0416                     	;# 
   203  0417                     	;# 
   204  041C                     	;# 
   205  041D                     	;# 
   206  041E                     	;# 
   207  0791                     	;# 
   208  0792                     	;# 
   209  0793                     	;# 
   210  0794                     	;# 
   211  0795                     	;# 
   212  0798                     	;# 
   213  0799                     	;# 
   214  07A0                     	;# 
   215  07A1                     	;# 
   216  07A3                     	;# 
   217  07A4                     	;# 
   218  07A6                     	;# 
   219  07A7                     	;# 
   220  07A9                     	;# 
   221  07AA                     	;# 
   222  0FE4                     	;# 
   223  0FE5                     	;# 
   224  0FE6                     	;# 
   225  0FE7                     	;# 
   226  0FE8                     	;# 
   227  0FE9                     	;# 
   228  0FEA                     	;# 
   229  0FEB                     	;# 
   230  0FED                     	;# 
   231  0FEE                     	;# 
   232  0FEF                     	;# 
   233  0000                     	;# 
   234  0001                     	;# 
   235  0002                     	;# 
   236  0003                     	;# 
   237  0004                     	;# 
   238  0005                     	;# 
   239  0006                     	;# 
   240  0007                     	;# 
   241  0008                     	;# 
   242  0009                     	;# 
   243  000A                     	;# 
   244  000B                     	;# 
   245  000C                     	;# 
   246  000D                     	;# 
   247  000E                     	;# 
   248  0010                     	;# 
   249  0011                     	;# 
   250  0012                     	;# 
   251  0013                     	;# 
   252  0015                     	;# 
   253  0016                     	;# 
   254  0016                     	;# 
   255  0017                     	;# 
   256  0018                     	;# 
   257  0019                     	;# 
   258  001A                     	;# 
   259  001B                     	;# 
   260  001C                     	;# 
   261  001E                     	;# 
   262  001F                     	;# 
   263  008C                     	;# 
   264  008D                     	;# 
   265  008E                     	;# 
   266  0090                     	;# 
   267  0091                     	;# 
   268  0092                     	;# 
   269  0093                     	;# 
   270  0095                     	;# 
   271  0096                     	;# 
   272  0097                     	;# 
   273  0098                     	;# 
   274  0099                     	;# 
   275  009A                     	;# 
   276  009B                     	;# 
   277  009B                     	;# 
   278  009C                     	;# 
   279  009D                     	;# 
   280  009E                     	;# 
   281  010C                     	;# 
   282  010D                     	;# 
   283  010E                     	;# 
   284  0110                     	;# 
   285  0111                     	;# 
   286  0112                     	;# 
   287  0113                     	;# 
   288  0114                     	;# 
   289  0115                     	;# 
   290  0116                     	;# 
   291  0117                     	;# 
   292  0118                     	;# 
   293  0119                     	;# 
   294  011A                     	;# 
   295  011B                     	;# 
   296  011D                     	;# 
   297  018C                     	;# 
   298  018D                     	;# 
   299  0191                     	;# 
   300  0191                     	;# 
   301  0192                     	;# 
   302  0193                     	;# 
   303  0193                     	;# 
   304  0193                     	;# 
   305  0194                     	;# 
   306  0195                     	;# 
   307  0196                     	;# 
   308  0199                     	;# 
   309  019A                     	;# 
   310  019B                     	;# 
   311  019B                     	;# 
   312  019B                     	;# 
   313  019B                     	;# 
   314  019C                     	;# 
   315  019C                     	;# 
   316  019D                     	;# 
   317  019E                     	;# 
   318  019F                     	;# 
   319  020D                     	;# 
   320  0210                     	;# 
   321  0211                     	;# 
   322  0212                     	;# 
   323  0213                     	;# 
   324  0214                     	;# 
   325  0215                     	;# 
   326  0215                     	;# 
   327  0216                     	;# 
   328  0217                     	;# 
   329  0291                     	;# 
   330  0291                     	;# 
   331  0292                     	;# 
   332  0293                     	;# 
   333  0294                     	;# 
   334  0295                     	;# 
   335  0295                     	;# 
   336  0296                     	;# 
   337  0298                     	;# 
   338  0298                     	;# 
   339  0299                     	;# 
   340  029A                     	;# 
   341  029B                     	;# 
   342  029C                     	;# 
   343  029C                     	;# 
   344  029D                     	;# 
   345  029E                     	;# 
   346  029F                     	;# 
   347  0311                     	;# 
   348  0311                     	;# 
   349  0312                     	;# 
   350  0313                     	;# 
   351  0314                     	;# 
   352  0315                     	;# 
   353  0315                     	;# 
   354  0316                     	;# 
   355  0318                     	;# 
   356  0318                     	;# 
   357  0319                     	;# 
   358  031A                     	;# 
   359  031C                     	;# 
   360  031C                     	;# 
   361  031D                     	;# 
   362  031E                     	;# 
   363  0394                     	;# 
   364  0395                     	;# 
   365  0396                     	;# 
   366  0415                     	;# 
   367  0416                     	;# 
   368  0417                     	;# 
   369  041C                     	;# 
   370  041D                     	;# 
   371  041E                     	;# 
   372  0791                     	;# 
   373  0792                     	;# 
   374  0793                     	;# 
   375  0794                     	;# 
   376  0795                     	;# 
   377  0798                     	;# 
   378  0799                     	;# 
   379  07A0                     	;# 
   380  07A1                     	;# 
   381  07A3                     	;# 
   382  07A4                     	;# 
   383  07A6                     	;# 
   384  07A7                     	;# 
   385  07A9                     	;# 
   386  07AA                     	;# 
   387  0FE4                     	;# 
   388  0FE5                     	;# 
   389  0FE6                     	;# 
   390  0FE7                     	;# 
   391  0FE8                     	;# 
   392  0FE9                     	;# 
   393  0FEA                     	;# 
   394  0FEB                     	;# 
   395  0FED                     	;# 
   396  0FEE                     	;# 
   397  0FEF                     	;# 
   398  0000                     	;# 
   399  0001                     	;# 
   400  0002                     	;# 
   401  0003                     	;# 
   402  0004                     	;# 
   403  0005                     	;# 
   404  0006                     	;# 
   405  0007                     	;# 
   406  0008                     	;# 
   407  0009                     	;# 
   408  000A                     	;# 
   409  000B                     	;# 
   410  000C                     	;# 
   411  000D                     	;# 
   412  000E                     	;# 
   413  0010                     	;# 
   414  0011                     	;# 
   415  0012                     	;# 
   416  0013                     	;# 
   417  0015                     	;# 
   418  0016                     	;# 
   419  0016                     	;# 
   420  0017                     	;# 
   421  0018                     	;# 
   422  0019                     	;# 
   423  001A                     	;# 
   424  001B                     	;# 
   425  001C                     	;# 
   426  001E                     	;# 
   427  001F                     	;# 
   428  008C                     	;# 
   429  008D                     	;# 
   430  008E                     	;# 
   431  0090                     	;# 
   432  0091                     	;# 
   433  0092                     	;# 
   434  0093                     	;# 
   435  0095                     	;# 
   436  0096                     	;# 
   437  0097                     	;# 
   438  0098                     	;# 
   439  0099                     	;# 
   440  009A                     	;# 
   441  009B                     	;# 
   442  009B                     	;# 
   443  009C                     	;# 
   444  009D                     	;# 
   445  009E                     	;# 
   446  010C                     	;# 
   447  010D                     	;# 
   448  010E                     	;# 
   449  0110                     	;# 
   450  0111                     	;# 
   451  0112                     	;# 
   452  0113                     	;# 
   453  0114                     	;# 
   454  0115                     	;# 
   455  0116                     	;# 
   456  0117                     	;# 
   457  0118                     	;# 
   458  0119                     	;# 
   459  011A                     	;# 
   460  011B                     	;# 
   461  011D                     	;# 
   462  018C                     	;# 
   463  018D                     	;# 
   464  0191                     	;# 
   465  0191                     	;# 
   466  0192                     	;# 
   467  0193                     	;# 
   468  0193                     	;# 
   469  0193                     	;# 
   470  0194                     	;# 
   471  0195                     	;# 
   472  0196                     	;# 
   473  0199                     	;# 
   474  019A                     	;# 
   475  019B                     	;# 
   476  019B                     	;# 
   477  019B                     	;# 
   478  019B                     	;# 
   479  019C                     	;# 
   480  019C                     	;# 
   481  019D                     	;# 
   482  019E                     	;# 
   483  019F                     	;# 
   484  020D                     	;# 
   485  0210                     	;# 
   486  0211                     	;# 
   487  0212                     	;# 
   488  0213                     	;# 
   489  0214                     	;# 
   490  0215                     	;# 
   491  0215                     	;# 
   492  0216                     	;# 
   493  0217                     	;# 
   494  0291                     	;# 
   495  0291                     	;# 
   496  0292                     	;# 
   497  0293                     	;# 
   498  0294                     	;# 
   499  0295                     	;# 
   500  0295                     	;# 
   501  0296                     	;# 
   502  0298                     	;# 
   503  0298                     	;# 
   504  0299                     	;# 
   505  029A                     	;# 
   506  029B                     	;# 
   507  029C                     	;# 
   508  029C                     	;# 
   509  029D                     	;# 
   510  029E                     	;# 
   511  029F                     	;# 
   512  0311                     	;# 
   513  0311                     	;# 
   514  0312                     	;# 
   515  0313                     	;# 
   516  0314                     	;# 
   517  0315                     	;# 
   518  0315                     	;# 
   519  0316                     	;# 
   520  0318                     	;# 
   521  0318                     	;# 
   522  0319                     	;# 
   523  031A                     	;# 
   524  031C                     	;# 
   525  031C                     	;# 
   526  031D                     	;# 
   527  031E                     	;# 
   528  0394                     	;# 
   529  0395                     	;# 
   530  0396                     	;# 
   531  0415                     	;# 
   532  0416                     	;# 
   533  0417                     	;# 
   534  041C                     	;# 
   535  041D                     	;# 
   536  041E                     	;# 
   537  0791                     	;# 
   538  0792                     	;# 
   539  0793                     	;# 
   540  0794                     	;# 
   541  0795                     	;# 
   542  0798                     	;# 
   543  0799                     	;# 
   544  07A0                     	;# 
   545  07A1                     	;# 
   546  07A3                     	;# 
   547  07A4                     	;# 
   548  07A6                     	;# 
   549  07A7                     	;# 
   550  07A9                     	;# 
   551  07AA                     	;# 
   552  0FE4                     	;# 
   553  0FE5                     	;# 
   554  0FE6                     	;# 
   555  0FE7                     	;# 
   556  0FE8                     	;# 
   557  0FE9                     	;# 
   558  0FEA                     	;# 
   559  0FEB                     	;# 
   560  0FED                     	;# 
   561  0FEE                     	;# 
   562  0FEF                     	;# 
   563  0000                     	;# 
   564  0001                     	;# 
   565  0002                     	;# 
   566  0003                     	;# 
   567  0004                     	;# 
   568  0005                     	;# 
   569  0006                     	;# 
   570  0007                     	;# 
   571  0008                     	;# 
   572  0009                     	;# 
   573  000A                     	;# 
   574  000B                     	;# 
   575  000C                     	;# 
   576  000D                     	;# 
   577  000E                     	;# 
   578  0010                     	;# 
   579  0011                     	;# 
   580  0012                     	;# 
   581  0013                     	;# 
   582  0015                     	;# 
   583  0016                     	;# 
   584  0016                     	;# 
   585  0017                     	;# 
   586  0018                     	;# 
   587  0019                     	;# 
   588  001A                     	;# 
   589  001B                     	;# 
   590  001C                     	;# 
   591  001E                     	;# 
   592  001F                     	;# 
   593  008C                     	;# 
   594  008D                     	;# 
   595  008E                     	;# 
   596  0090                     	;# 
   597  0091                     	;# 
   598  0092                     	;# 
   599  0093                     	;# 
   600  0095                     	;# 
   601  0096                     	;# 
   602  0097                     	;# 
   603  0098                     	;# 
   604  0099                     	;# 
   605  009A                     	;# 
   606  009B                     	;# 
   607  009B                     	;# 
   608  009C                     	;# 
   609  009D                     	;# 
   610  009E                     	;# 
   611  010C                     	;# 
   612  010D                     	;# 
   613  010E                     	;# 
   614  0110                     	;# 
   615  0111                     	;# 
   616  0112                     	;# 
   617  0113                     	;# 
   618  0114                     	;# 
   619  0115                     	;# 
   620  0116                     	;# 
   621  0117                     	;# 
   622  0118                     	;# 
   623  0119                     	;# 
   624  011A                     	;# 
   625  011B                     	;# 
   626  011D                     	;# 
   627  018C                     	;# 
   628  018D                     	;# 
   629  0191                     	;# 
   630  0191                     	;# 
   631  0192                     	;# 
   632  0193                     	;# 
   633  0193                     	;# 
   634  0193                     	;# 
   635  0194                     	;# 
   636  0195                     	;# 
   637  0196                     	;# 
   638  0199                     	;# 
   639  019A                     	;# 
   640  019B                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019C                     	;# 
   645  019C                     	;# 
   646  019D                     	;# 
   647  019E                     	;# 
   648  019F                     	;# 
   649  020D                     	;# 
   650  0210                     	;# 
   651  0211                     	;# 
   652  0212                     	;# 
   653  0213                     	;# 
   654  0214                     	;# 
   655  0215                     	;# 
   656  0215                     	;# 
   657  0216                     	;# 
   658  0217                     	;# 
   659  0291                     	;# 
   660  0291                     	;# 
   661  0292                     	;# 
   662  0293                     	;# 
   663  0294                     	;# 
   664  0295                     	;# 
   665  0295                     	;# 
   666  0296                     	;# 
   667  0298                     	;# 
   668  0298                     	;# 
   669  0299                     	;# 
   670  029A                     	;# 
   671  029B                     	;# 
   672  029C                     	;# 
   673  029C                     	;# 
   674  029D                     	;# 
   675  029E                     	;# 
   676  029F                     	;# 
   677  0311                     	;# 
   678  0311                     	;# 
   679  0312                     	;# 
   680  0313                     	;# 
   681  0314                     	;# 
   682  0315                     	;# 
   683  0315                     	;# 
   684  0316                     	;# 
   685  0318                     	;# 
   686  0318                     	;# 
   687  0319                     	;# 
   688  031A                     	;# 
   689  031C                     	;# 
   690  031C                     	;# 
   691  031D                     	;# 
   692  031E                     	;# 
   693  0394                     	;# 
   694  0395                     	;# 
   695  0396                     	;# 
   696  0415                     	;# 
   697  0416                     	;# 
   698  0417                     	;# 
   699  041C                     	;# 
   700  041D                     	;# 
   701  041E                     	;# 
   702  0791                     	;# 
   703  0792                     	;# 
   704  0793                     	;# 
   705  0794                     	;# 
   706  0795                     	;# 
   707  0798                     	;# 
   708  0799                     	;# 
   709  07A0                     	;# 
   710  07A1                     	;# 
   711  07A3                     	;# 
   712  07A4                     	;# 
   713  07A6                     	;# 
   714  07A7                     	;# 
   715  07A9                     	;# 
   716  07AA                     	;# 
   717  0FE4                     	;# 
   718  0FE5                     	;# 
   719  0FE6                     	;# 
   720  0FE7                     	;# 
   721  0FE8                     	;# 
   722  0FE9                     	;# 
   723  0FEA                     	;# 
   724  0FEB                     	;# 
   725  0FED                     	;# 
   726  0FEE                     	;# 
   727  0FEF                     	;# 
   728                           
   729                           	psect	idataBANK0
   730  0482                     __pidataBANK0:	
   731                           
   732                           ;initializer for BT1_Is_Pressed@lat
   733  0482  3401               	retlw	1
   734                           
   735                           	psect	stringtext1
   736  0820                     __pstringtext1:	
   737  0820                     _dpowers:	
   738  0820  3401               	retlw	1
   739  0821  3400               	retlw	0
   740  0822  340A               	retlw	10
   741  0823  3400               	retlw	0
   742  0824  3464               	retlw	100
   743  0825  3400               	retlw	0
   744  0826  34E8               	retlw	232
   745  0827  3403               	retlw	3
   746  0828  3410               	retlw	16
   747  0829  3427               	retlw	39
   748  082A                     __end_of_dpowers:	
   749                           
   750                           	psect	stringtext2
   751  0800                     __pstringtext2:	
   752  0800                     TextLCD_Puts@DDRAM_Start_Address:	
   753  0800  3480               	retlw	128
   754  0801  34C0               	retlw	192
   755  0802  3490               	retlw	144
   756  0803  34D0               	retlw	208
   757  0804                     __end_ofTextLCD_Puts@DDRAM_Start_Address:	
   758  000D                     _PORTBbits	set	13
   759  0097                     _WDTCON	set	151
   760  0098                     _OSCTUNE	set	152
   761  0099                     _OSCCON	set	153
   762  0095                     _OPTION_REGbits	set	149
   763  008E                     _TRISC	set	142
   764  008D                     _TRISB	set	141
   765  008C                     _TRISA	set	140
   766  0090                     _TRISE	set	144
   767  04D6                     _PLLR	set	1238
   768  010E                     _LATCbits	set	270
   769  011D                     _APFCON	set	285
   770  010E                     _LATC	set	270
   771  010D                     _LATB	set	269
   772  010C                     _LATA	set	268
   773  0110                     _LATE	set	272
   774  018C                     _ANSELA	set	396
   775  018D                     _ANSELB	set	397
   776  020D                     _WPUB	set	525
   777  0210                     _WPUE	set	528
   778  0804                     STR_3:	
   779  0804  3420               	retlw	32	;' '
   780  0805  3420               	retlw	32	;' '
   781  0806  3420               	retlw	32	;' '
   782  0807  3420               	retlw	32	;' '
   783  0808  3420               	retlw	32	;' '
   784  0809  3420               	retlw	32	;' '
   785  080A  3420               	retlw	32	;' '
   786  080B  3420               	retlw	32	;' '
   787  080C  3420               	retlw	32	;' '
   788  080D  3420               	retlw	32	;' '
   789  080E  3420               	retlw	32	;' '
   790  080F  3420               	retlw	32	;' '
   791  0810  3420               	retlw	32	;' '
   792  0811  3420               	retlw	32	;' '
   793  0812  3420               	retlw	32	;' '
   794  0813  3420               	retlw	32	;' '
   795  0814  3400               	retlw	0
   796                           
   797                           	psect	stringtext3
   798  0815                     __pstringtext3:	
   799  0815                     STR_2:	
   800  0815  3443               	retlw	67	;'C'
   801  0816  346F               	retlw	111	;'o'
   802  0817  3475               	retlw	117	;'u'
   803  0818  346E               	retlw	110	;'n'
   804  0819  3474               	retlw	116	;'t'
   805  081A  343D               	retlw	61	;'='
   806  081B  3425               	retlw	37	;'%'
   807  081C  3430               	retlw	48	;'0'
   808  081D  3433               	retlw	51	;'3'
   809  081E  3464               	retlw	100	;'d'
   810  081F  3400               	retlw	0
   811                           
   812                           	psect	stringtext4
   813  082A                     __pstringtext4:	
   814  082A                     STR_1:	
   815  082A  344C               	retlw	76	;'L'
   816  082B  3443               	retlw	67	;'C'
   817  082C  3444               	retlw	68	;'D'
   818  082D  3431               	retlw	49	;'1'
   819  082E  3436               	retlw	54	;'6'
   820  082F  3430               	retlw	48	;'0'
   821  0830  3432               	retlw	50	;'2'
   822  0831  3400               	retlw	0
   823                           
   824                           	psect	stringtext5
   825  0000                     __pstringtext5:	
   826                           
   827                           ; #config settings
   828  0000                     
   829                           	psect	cinit
   830  07F9                     start_initialization:	
   831  07F9                     __initialization:	
   832                           
   833                           ; Initialize objects allocated to BANK0
   834  07F9  3184  2482         	fcall	__pidataBANK0	;fetch initializer
   835  07FB  00C4               	movwf	__pdataBANK0& (0+127)
   836                           
   837                           ; Clear objects allocated to BANK0
   838  07FC  01C3               	clrf	__pbssBANK0& (0+127)
   839  07FD                     end_of_initialization:	
   840                           ;End of C runtime variable initialization code
   841                           
   842  07FD                     __end_of__initialization:	
   843  07FD  0020               	movlb	0
   844  07FE  3185  2DE0         	ljmp	_main	;jump to C main() function
   845                           
   846                           	psect	bssBANK0
   847  0043                     __pbssBANK0:	
   848  0043                     main@i:	
   849  0043                     	ds	1
   850                           
   851                           	psect	dataBANK0
   852  0044                     __pdataBANK0:	
   853  0044                     BT1_Is_Pressed@lat:	
   854  0044                     	ds	1
   855                           
   856                           	psect	cstackCOMMON
   857  0070                     __pcstackCOMMON:	
   858  0070                     ?_isdigit:	
   859  0070                     ?_OSCILLATOR_Initialize:	
   860                           ; 1 bit 
   861                           
   862  0070                     ??_OSCILLATOR_Initialize:	
   863                           ; 1 bytes @ 0x0
   864                           
   865  0070                     ?_WDT_Initialize:	
   866                           ; 1 bytes @ 0x0
   867                           
   868  0070                     ??_WDT_Initialize:	
   869                           ; 1 bytes @ 0x0
   870                           
   871  0070                     ?_TextLCD_Init:	
   872                           ; 1 bytes @ 0x0
   873                           
   874  0070                     ??_isdigit:	
   875                           ; 1 bytes @ 0x0
   876                           
   877  0070                     ?_PIN_MANAGER_Initialize:	
   878                           ; 1 bytes @ 0x0
   879                           
   880  0070                     ??_PIN_MANAGER_Initialize:	
   881                           ; 1 bytes @ 0x0
   882                           
   883  0070                     ?_SYSTEM_Initialize:	
   884                           ; 1 bytes @ 0x0
   885                           
   886  0070                     ??_SYSTEM_Initialize:	
   887                           ; 1 bytes @ 0x0
   888                           
   889  0070                     ?_BT1_Is_Pressed:	
   890                           ; 1 bytes @ 0x0
   891                           
   892  0070                     ??_BT1_Is_Pressed:	
   893                           ; 1 bytes @ 0x0
   894                           
   895  0070                     ?_main:	
   896                           ; 1 bytes @ 0x0
   897                           
   898  0070                     ?_TextLCD_4Bits_Write:	
   899                           ; 1 bytes @ 0x0
   900                           
   901  0070                     ??_TextLCD_4Bits_Write:	
   902                           ; 1 bytes @ 0x0
   903                           
   904  0070                     ?_TextLCD_Enable:	
   905                           ; 1 bytes @ 0x0
   906                           
   907  0070                     ??_TextLCD_Enable:	
   908                           ; 1 bytes @ 0x0
   909                           
   910  0070                     ?_TextLCD_CMD:	
   911                           ; 1 bytes @ 0x0
   912                           
   913  0070                     ?_TextLCD_PutChar:	
   914                           ; 1 bytes @ 0x0
   915                           
   916  0070                     ?___wmul:	
   917                           ; 1 bytes @ 0x0
   918                           
   919  0070                     ?___lwdiv:	
   920                           ; 2 bytes @ 0x0
   921                           
   922  0070                     TextLCD_4Bits_Write@nib:	
   923                           ; 2 bytes @ 0x0
   924                           
   925  0070                     _isdigit$426:	
   926                           ; 1 bytes @ 0x0
   927                           
   928  0070                     ___wmul@multiplier:	
   929                           ; 1 bytes @ 0x0
   930                           
   931  0070                     ___lwdiv@divisor:	
   932                           ; 2 bytes @ 0x0
   933                           
   934                           
   935                           ; 2 bytes @ 0x0
   936  0070                     	ds	1
   937  0071                     ??_TextLCD_CMD:	
   938  0071                     BT1_Is_Pressed@state:	
   939                           ; 1 bytes @ 0x1
   940                           
   941  0071                     isdigit@c:	
   942                           ; 1 bytes @ 0x1
   943                           
   944                           
   945                           ; 1 bytes @ 0x1
   946  0071                     	ds	1
   947  0072                     TextLCD_CMD@cmd:	
   948  0072                     ___wmul@multiplicand:	
   949                           ; 1 bytes @ 0x2
   950                           
   951  0072                     ___lwdiv@dividend:	
   952                           ; 2 bytes @ 0x2
   953                           
   954                           
   955                           ; 2 bytes @ 0x2
   956  0072                     	ds	1
   957  0073                     ??_TextLCD_Init:	
   958  0073                     ??_TextLCD_PutChar:	
   959                           ; 1 bytes @ 0x3
   960                           
   961  0073                     TextLCD_PutChar@data:	
   962                           ; 1 bytes @ 0x3
   963                           
   964                           
   965                           ; 1 bytes @ 0x3
   966  0073                     	ds	1
   967  0074                     ?_TextLCD_Puts:	
   968  0074                     ??___wmul:	
   969                           ; 1 bytes @ 0x4
   970                           
   971  0074                     ??___lwdiv:	
   972                           ; 1 bytes @ 0x4
   973                           
   974  0074                     TextLCD_Puts@idx:	
   975                           ; 1 bytes @ 0x4
   976                           
   977  0074                     ___wmul@product:	
   978                           ; 1 bytes @ 0x4
   979                           
   980                           
   981                           ; 2 bytes @ 0x4
   982  0074                     	ds	1
   983  0075                     TextLCD_Puts@data:	
   984  0075                     ___lwdiv@quotient:	
   985                           ; 2 bytes @ 0x5
   986                           
   987                           
   988                           ; 2 bytes @ 0x5
   989  0075                     	ds	2
   990  0077                     TextLCD_Puts@length_or_type:	
   991  0077                     ___lwdiv@counter:	
   992                           ; 1 bytes @ 0x7
   993                           
   994                           
   995                           ; 1 bytes @ 0x7
   996  0077                     	ds	1
   997  0078                     ??_TextLCD_Puts:	
   998  0078                     ?___lwmod:	
   999                           ; 1 bytes @ 0x8
  1000                           
  1001  0078                     ___lwmod@divisor:	
  1002                           ; 2 bytes @ 0x8
  1003                           
  1004                           
  1005                           ; 2 bytes @ 0x8
  1006  0078                     	ds	1
  1007  0079                     TextLCD_Puts@line:	
  1008                           
  1009                           ; 1 bytes @ 0x9
  1010  0079                     	ds	1
  1011  007A                     TextLCD_Puts@address:	
  1012  007A                     ___lwmod@dividend:	
  1013                           ; 1 bytes @ 0xA
  1014                           
  1015                           
  1016                           ; 2 bytes @ 0xA
  1017  007A                     	ds	2
  1018  007C                     ??___lwmod:	
  1019                           
  1020                           ; 1 bytes @ 0xC
  1021  007C                     	ds	1
  1022  007D                     ___lwmod@counter:	
  1023                           
  1024                           ; 1 bytes @ 0xD
  1025  007D                     	ds	1
  1026                           
  1027                           	psect	cstackBANK0
  1028  0020                     __pcstackBANK0:	
  1029  0020                     ?_sprintf:	
  1030  0020                     sprintf@f:	
  1031                           ; 2 bytes @ 0x0
  1032                           
  1033                           
  1034                           ; 2 bytes @ 0x0
  1035  0020                     	ds	4
  1036  0024                     ??_sprintf:	
  1037                           
  1038                           ; 1 bytes @ 0x4
  1039  0024                     	ds	4
  1040  0028                     sprintf@ap:	
  1041                           
  1042                           ; 1 bytes @ 0x8
  1043  0028                     	ds	1
  1044  0029                     sprintf@prec:	
  1045                           
  1046                           ; 1 bytes @ 0x9
  1047  0029                     	ds	1
  1048  002A                     sprintf@val:	
  1049                           
  1050                           ; 2 bytes @ 0xA
  1051  002A                     	ds	2
  1052  002C                     sprintf@flag:	
  1053                           
  1054                           ; 1 bytes @ 0xC
  1055  002C                     	ds	1
  1056  002D                     sprintf@width:	
  1057                           
  1058                           ; 2 bytes @ 0xD
  1059  002D                     	ds	2
  1060  002F                     sprintf@sp:	
  1061                           
  1062                           ; 1 bytes @ 0xF
  1063  002F                     	ds	1
  1064  0030                     sprintf@c:	
  1065                           
  1066                           ; 1 bytes @ 0x10
  1067  0030                     	ds	1
  1068  0031                     ??_main:	
  1069                           
  1070                           ; 1 bytes @ 0x11
  1071  0031                     	ds	2
  1072  0033                     main@buffer:	
  1073                           
  1074                           ; 16 bytes @ 0x13
  1075  0033                     	ds	16
  1076                           
  1077                           	psect	maintext
  1078  05E0                     __pmaintext:	
  1079 ;;
  1080 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1081 ;;
  1082 ;; *************** function _main *****************
  1083 ;; Defined at:
  1084 ;;		line 17 in file "main.c"
  1085 ;; Parameters:    Size  Location     Type
  1086 ;;		None
  1087 ;; Auto vars:     Size  Location     Type
  1088 ;;  buffer         16   19[BANK0 ] unsigned char [16]
  1089 ;; Return value:  Size  Location     Type
  1090 ;;                  1    wreg      void 
  1091 ;; Registers used:
  1092 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1093 ;; Tracked objects:
  1094 ;;		On entry : B1F/0
  1095 ;;		On exit  : 0/0
  1096 ;;		Unchanged: 0/0
  1097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1098 ;;      Params:         0       0       0       0       0       0       0       0
  1099 ;;      Locals:         0      16       0       0       0       0       0       0
  1100 ;;      Temps:          0       2       0       0       0       0       0       0
  1101 ;;      Totals:         0      18       0       0       0       0       0       0
  1102 ;;Total ram usage:       18 bytes
  1103 ;; Hardware stack levels required when called:    4
  1104 ;; This function calls:
  1105 ;;		_BT1_Is_Pressed
  1106 ;;		_SYSTEM_Initialize
  1107 ;;		_TextLCD_Init
  1108 ;;		_TextLCD_Puts
  1109 ;;		_sprintf
  1110 ;; This function is called by:
  1111 ;;		Startup code after reset
  1112 ;; This function uses a non-reentrant model
  1113 ;;
  1114                           
  1115                           
  1116                           ;psect for function _main
  1117  05E0                     _main:	
  1118                           
  1119                           ;main.c: 19: SYSTEM_Initialize();
  1120                           
  1121                           ;incstack = 0
  1122                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1123  05E0  3184  248E  3185   	fcall	_SYSTEM_Initialize
  1124                           
  1125                           ;main.c: 20: TextLCD_Init();
  1126  05E3  3185  2598  3185   	fcall	_TextLCD_Init
  1127                           
  1128                           ;main.c: 21: TextLCD_Puts(0, 0, (uint8_t *)"LCD1602", 0);
  1129  05E6  01F4               	clrf	TextLCD_Puts@idx
  1130  05E7  302A               	movlw	low (STR_1| (0+32768))
  1131  05E8  00F5               	movwf	TextLCD_Puts@data
  1132  05E9  3088               	movlw	high (STR_1| (0+32768))
  1133  05EA  00F6               	movwf	TextLCD_Puts@data+1
  1134  05EB  01F7               	clrf	TextLCD_Puts@length_or_type
  1135  05EC  3000               	movlw	0
  1136  05ED  3186  262A  3185   	fcall	_TextLCD_Puts
  1137  05F0                     l1258:	
  1138                           ;main.c: 22: while(1)
  1139                           
  1140                           
  1141                           ;main.c: 23: {
  1142                           ;main.c: 24: static uint8_t i;
  1143                           ;main.c: 25: if(BT1_Is_Pressed())
  1144  05F0  3184  24BA  3185   	fcall	_BT1_Is_Pressed
  1145  05F3  3A00               	xorlw	0
  1146  05F4  1903               	skipnz
  1147  05F5  2DF0               	goto	l1258
  1148                           
  1149                           ;main.c: 26: {
  1150                           ;main.c: 27: uint8_t buffer[16];
  1151                           ;main.c: 28: sprintf(buffer, "Count=%03d", i++);
  1152  05F6  3015               	movlw	low (STR_2| (0+32768))
  1153  05F7  0020               	movlb	0	; select bank0
  1154  05F8  00A0               	movwf	sprintf@f
  1155  05F9  3088               	movlw	high (STR_2| (0+32768))
  1156  05FA  00A1               	movwf	sprintf@f+1
  1157  05FB  0843               	movf	main@i,w
  1158  05FC  00B1               	movwf	??_main
  1159  05FD  01B2               	clrf	??_main+1
  1160  05FE  0831               	movf	??_main,w
  1161  05FF  00A2               	movwf	?_sprintf+2
  1162  0600  0832               	movf	??_main+1,w
  1163  0601  00A3               	movwf	?_sprintf+3
  1164  0602  3033               	movlw	(low (main@buffer| 0))& (0+255)
  1165  0603  3186  2675  3185   	fcall	_sprintf
  1166  0606  3001               	movlw	1
  1167  0607  0020               	movlb	0	; select bank0
  1168  0608  00B1               	movwf	??_main
  1169  0609  0831               	movf	??_main,w
  1170  060A  07C3               	addwf	main@i,f
  1171                           
  1172                           ;main.c: 29: TextLCD_Puts(1, 5, buffer, 0);
  1173  060B  3005               	movlw	5
  1174  060C  00B1               	movwf	??_main
  1175  060D  0831               	movf	??_main,w
  1176  060E  00F4               	movwf	TextLCD_Puts@idx
  1177  060F  3033               	movlw	low main@buffer
  1178  0610  00F5               	movwf	TextLCD_Puts@data
  1179  0611  3000               	movlw	high main@buffer
  1180  0612  00F6               	movwf	TextLCD_Puts@data+1
  1181  0613  01F7               	clrf	TextLCD_Puts@length_or_type
  1182  0614  3001               	movlw	1
  1183  0615  3186  262A  3185   	fcall	_TextLCD_Puts
  1184                           
  1185                           ;main.c: 30: if(i>10)
  1186  0618  300B               	movlw	11
  1187  0619  0020               	movlb	0	; select bank0
  1188  061A  0243               	subwf	main@i,w
  1189  061B  1C03               	skipc
  1190  061C  2DF0               	goto	l1258
  1191                           
  1192                           ;main.c: 31: {
  1193                           ;main.c: 32: TextLCD_Puts(1, 0, (uint8_t *)"                ", 0);
  1194  061D  01F4               	clrf	TextLCD_Puts@idx
  1195  061E  3004               	movlw	low (STR_3| (0+32768))
  1196  061F  00F5               	movwf	TextLCD_Puts@data
  1197  0620  3088               	movlw	high (STR_3| (0+32768))
  1198  0621  00F6               	movwf	TextLCD_Puts@data+1
  1199  0622  01F7               	clrf	TextLCD_Puts@length_or_type
  1200  0623  3001               	movlw	1
  1201  0624  3186  262A  3185   	fcall	_TextLCD_Puts
  1202                           
  1203                           ;main.c: 33: i=0;
  1204  0627  0020               	movlb	0	; select bank0
  1205  0628  01C3               	clrf	main@i
  1206  0629  2DF0               	goto	l1258
  1207  062A                     __end_of_main:	
  1208                           
  1209                           	psect	text1
  1210  0675                     __ptext1:	
  1211 ;; *************** function _sprintf *****************
  1212 ;; Defined at:
  1213 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;  sp              1    wreg     PTR unsigned char 
  1216 ;;		 -> main@buffer(16), 
  1217 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1218 ;;		 -> STR_2(11), 
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;  sp              1   15[BANK0 ] PTR unsigned char 
  1221 ;;		 -> main@buffer(16), 
  1222 ;;  tmpval          4    0        struct .
  1223 ;;  width           2   13[BANK0 ] int 
  1224 ;;  val             2   10[BANK0 ] unsigned int 
  1225 ;;  cp              2    0        PTR const unsigned char 
  1226 ;;  len             2    0        unsigned int 
  1227 ;;  c               1   16[BANK0 ] char 
  1228 ;;  flag            1   12[BANK0 ] unsigned char 
  1229 ;;  prec            1    9[BANK0 ] char 
  1230 ;;  ap              1    8[BANK0 ] PTR void [1]
  1231 ;;		 -> ?_sprintf(2), 
  1232 ;; Return value:  Size  Location     Type
  1233 ;;                  2    0[BANK0 ] int 
  1234 ;; Registers used:
  1235 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1236 ;; Tracked objects:
  1237 ;;		On entry : 0/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1241 ;;      Params:         0       4       0       0       0       0       0       0
  1242 ;;      Locals:         0       9       0       0       0       0       0       0
  1243 ;;      Temps:          0       4       0       0       0       0       0       0
  1244 ;;      Totals:         0      17       0       0       0       0       0       0
  1245 ;;Total ram usage:       17 bytes
  1246 ;; Hardware stack levels used:    1
  1247 ;; Hardware stack levels required when called:    1
  1248 ;; This function calls:
  1249 ;;		___lwdiv
  1250 ;;		___lwmod
  1251 ;;		___wmul
  1252 ;;		_isdigit
  1253 ;; This function is called by:
  1254 ;;		_main
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           
  1259                           ;psect for function _sprintf
  1260  0675                     _sprintf:	
  1261                           
  1262                           ;incstack = 0
  1263                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1264                           ;sprintf@sp stored from wreg
  1265  0675  0020               	movlb	0	; select bank0
  1266  0676  00AF               	movwf	sprintf@sp
  1267                           
  1268                           ;doprnt.c: 494: va_list ap;
  1269                           ;doprnt.c: 499: signed char c;
  1270                           ;doprnt.c: 501: int width;
  1271                           ;doprnt.c: 506: signed char prec;
  1272                           ;doprnt.c: 508: unsigned char flag;
  1273                           ;doprnt.c: 523: union {
  1274                           ;doprnt.c: 524: unsigned long vd;
  1275                           ;doprnt.c: 525: double integ;
  1276                           ;doprnt.c: 526: } tmpval;
  1277                           ;doprnt.c: 528: unsigned int val;
  1278                           ;doprnt.c: 529: unsigned len;
  1279                           ;doprnt.c: 530: const char * cp;
  1280                           ;doprnt.c: 533: *ap = __va_start();
  1281  0677  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1282  0678  00A4               	movwf	??_sprintf
  1283  0679  0824               	movf	??_sprintf,w
  1284  067A  00A8               	movwf	sprintf@ap
  1285  067B                     l1248:	
  1286                           ;doprnt.c: 536: while(c = *f++) {
  1287                           
  1288  067B  0020               	movlb	0	; select bank0
  1289  067C  0821               	movf	sprintf@f+1,w
  1290  067D  00A5               	movwf	??_sprintf+1
  1291  067E  0820               	movf	sprintf@f,w
  1292  067F  00A4               	movwf	??_sprintf
  1293  0680  0AA0               	incf	sprintf@f,f
  1294  0681  1903               	skipnz
  1295  0682  0AA1               	incf	sprintf@f+1,f
  1296  0683  0824               	movf	??_sprintf,w
  1297  0684  0084               	movwf	4
  1298  0685  0825               	movf	??_sprintf+1,w
  1299  0686  0085               	movwf	5
  1300  0687  0800               	movf	0,w	;code access
  1301  0688  00A6               	movwf	??_sprintf+2
  1302  0689  0826               	movf	??_sprintf+2,w
  1303  068A  00B0               	movwf	sprintf@c
  1304  068B  0830               	movf	sprintf@c,w
  1305  068C  1903               	btfsc	3,2
  1306  068D  2FF3               	goto	l1250
  1307                           
  1308                           ;doprnt.c: 538: if(c != '%')
  1309  068E  3025               	movlw	37
  1310  068F  0630               	xorwf	sprintf@c,w
  1311  0690  1903               	btfsc	3,2
  1312  0691  2E9E               	goto	l1152
  1313                           
  1314                           ;doprnt.c: 540: {
  1315                           ;doprnt.c: 541: ((*sp++ = (c)));
  1316  0692  0830               	movf	sprintf@c,w
  1317  0693  00A4               	movwf	??_sprintf
  1318  0694  082F               	movf	sprintf@sp,w
  1319  0695  0086               	movwf	6
  1320  0696  0187               	clrf	7
  1321  0697  0824               	movf	??_sprintf,w
  1322  0698  0081               	movwf	1
  1323  0699  3001               	movlw	1
  1324  069A  00A4               	movwf	??_sprintf
  1325  069B  0824               	movf	??_sprintf,w
  1326  069C  07AF               	addwf	sprintf@sp,f
  1327                           
  1328                           ;doprnt.c: 542: continue;
  1329  069D  2E7B               	goto	l1248
  1330  069E                     l1152:	
  1331                           
  1332                           ;doprnt.c: 543: }
  1333                           ;doprnt.c: 546: width = 0;
  1334  069E  01AD               	clrf	sprintf@width
  1335  069F  01AE               	clrf	sprintf@width+1
  1336                           
  1337                           ;doprnt.c: 548: flag = 0;
  1338  06A0  01AC               	clrf	sprintf@flag
  1339                           
  1340                           ;doprnt.c: 551: switch(*f) {
  1341                           
  1342                           ;doprnt.c: 550: for(;;) {
  1343  06A1  2EA7               	goto	l1158
  1344  06A2                     l140:	
  1345                           ;doprnt.c: 579: case '0':
  1346                           
  1347                           
  1348                           ;doprnt.c: 580: flag |= 0x04;
  1349  06A2  152C               	bsf	sprintf@flag,2
  1350                           
  1351                           ;doprnt.c: 581: f++;
  1352  06A3  3001               	movlw	1
  1353  06A4  07A0               	addwf	sprintf@f,f
  1354  06A5  3000               	movlw	0
  1355  06A6  3DA1               	addwfc	sprintf@f+1,f
  1356  06A7                     l1158:	
  1357                           ;doprnt.c: 584: }
  1358                           
  1359                           ;doprnt.c: 582: continue;
  1360                           
  1361  06A7  0820               	movf	sprintf@f,w
  1362  06A8  0084               	movwf	4
  1363  06A9  0821               	movf	sprintf@f+1,w
  1364  06AA  0085               	movwf	5
  1365  06AB  0800               	movf	0,w	;code access
  1366                           
  1367                           ; Switch size 1, requested type "space"
  1368                           ; Number of cases is 1, Range of values is 48 to 48
  1369                           ; switch strategies available:
  1370                           ; Name         Instructions Cycles
  1371                           ; simple_byte            4     3 (average)
  1372                           ; direct_byte           11     9 (fixed)
  1373                           ; jumptable            263     9 (fixed)
  1374                           ;	Chosen strategy is simple_byte
  1375  06AC  3A30               	xorlw	48	; case 48
  1376  06AD  1903               	skipnz
  1377  06AE  2EA2               	goto	l140
  1378  06AF  2EB0               	goto	l1160
  1379  06B0                     l1160:	
  1380                           ;doprnt.c: 586: }
  1381                           
  1382                           ;doprnt.c: 585: break;
  1383                           
  1384                           
  1385                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1386  06B0  0820               	movf	sprintf@f,w
  1387  06B1  0084               	movwf	4
  1388  06B2  0821               	movf	sprintf@f+1,w
  1389  06B3  0085               	movwf	5
  1390  06B4  0800               	movf	0,w	;code access
  1391  06B5  3184  24AC  3186   	fcall	_isdigit
  1392  06B8  1C03               	btfss	3,0
  1393  06B9  2EEB               	goto	l1174
  1394                           
  1395                           ;doprnt.c: 598: width = 0;
  1396  06BA  0020               	movlb	0	; select bank0
  1397  06BB  01AD               	clrf	sprintf@width
  1398  06BC  01AE               	clrf	sprintf@width+1
  1399  06BD                     l1164:	
  1400                           ;doprnt.c: 599: do {
  1401                           
  1402                           
  1403                           ;doprnt.c: 600: width *= 10;
  1404  06BD  300A               	movlw	10
  1405  06BE  00F0               	movwf	___wmul@multiplier
  1406  06BF  3000               	movlw	0
  1407  06C0  00F1               	movwf	___wmul@multiplier+1
  1408  06C1  0020               	movlb	0	; select bank0
  1409  06C2  082E               	movf	sprintf@width+1,w
  1410  06C3  00F3               	movwf	___wmul@multiplicand+1
  1411  06C4  082D               	movf	sprintf@width,w
  1412  06C5  00F2               	movwf	___wmul@multiplicand
  1413  06C6  3184  24E3  3186   	fcall	___wmul
  1414  06C9  0871               	movf	?___wmul+1,w
  1415  06CA  0020               	movlb	0	; select bank0
  1416  06CB  00AE               	movwf	sprintf@width+1
  1417  06CC  0870               	movf	?___wmul,w
  1418  06CD  00AD               	movwf	sprintf@width
  1419                           
  1420                           ;doprnt.c: 601: width += *f++ - '0';
  1421  06CE  0820               	movf	sprintf@f,w
  1422  06CF  0084               	movwf	4
  1423  06D0  0821               	movf	sprintf@f+1,w
  1424  06D1  0085               	movwf	5
  1425  06D2  0800               	movf	0,w	;code access
  1426  06D3  3ED0               	addlw	208
  1427  06D4  00A4               	movwf	??_sprintf
  1428  06D5  30FF               	movlw	255
  1429  06D6  1803               	skipnc
  1430  06D7  3000               	movlw	0
  1431  06D8  00A5               	movwf	??_sprintf+1
  1432  06D9  0824               	movf	??_sprintf,w
  1433  06DA  07AD               	addwf	sprintf@width,f
  1434  06DB  0825               	movf	??_sprintf+1,w
  1435  06DC  3DAE               	addwfc	sprintf@width+1,f
  1436  06DD  3001               	movlw	1
  1437  06DE  07A0               	addwf	sprintf@f,f
  1438  06DF  3000               	movlw	0
  1439  06E0  3DA1               	addwfc	sprintf@f+1,f
  1440                           
  1441                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1442  06E1  0820               	movf	sprintf@f,w
  1443  06E2  0084               	movwf	4
  1444  06E3  0821               	movf	sprintf@f+1,w
  1445  06E4  0085               	movwf	5
  1446  06E5  0800               	movf	0,w	;code access
  1447  06E6  3184  24AC  3186   	fcall	_isdigit
  1448  06E9  1803               	btfsc	3,0
  1449  06EA  2EBD               	goto	l1164
  1450  06EB                     l1174:	
  1451                           ;doprnt.c: 822: }
  1452                           
  1453                           ;doprnt.c: 813: continue;
  1454                           
  1455                           ;doprnt.c: 802: default:
  1456                           
  1457                           ;doprnt.c: 698: case 'i':
  1458                           ;doprnt.c: 699: break;
  1459                           
  1460                           ;doprnt.c: 697: case 'd':
  1461                           
  1462                           ;doprnt.c: 638: goto alldone;
  1463                           
  1464                           ;doprnt.c: 637: case 0:
  1465                           
  1466                           ;doprnt.c: 608: }
  1467                           ;doprnt.c: 635: switch(c = *f++) {
  1468                           
  1469  06EB  0020               	movlb	0	; select bank0
  1470  06EC  0821               	movf	sprintf@f+1,w
  1471  06ED  00A5               	movwf	??_sprintf+1
  1472  06EE  0820               	movf	sprintf@f,w
  1473  06EF  00A4               	movwf	??_sprintf
  1474  06F0  0AA0               	incf	sprintf@f,f
  1475  06F1  1903               	skipnz
  1476  06F2  0AA1               	incf	sprintf@f+1,f
  1477  06F3  0824               	movf	??_sprintf,w
  1478  06F4  0084               	movwf	4
  1479  06F5  0825               	movf	??_sprintf+1,w
  1480  06F6  0085               	movwf	5
  1481  06F7  0800               	movf	0,w	;code access
  1482  06F8  00B0               	movwf	sprintf@c
  1483                           
  1484                           ; Switch size 1, requested type "space"
  1485                           ; Number of cases is 3, Range of values is 0 to 105
  1486                           ; switch strategies available:
  1487                           ; Name         Instructions Cycles
  1488                           ; simple_byte           10     6 (average)
  1489                           ; direct_byte          218     6 (fixed)
  1490                           ; jumptable            260     6 (fixed)
  1491                           ;	Chosen strategy is simple_byte
  1492  06F9  3A00               	xorlw	0	; case 0
  1493  06FA  1903               	skipnz
  1494  06FB  2FF3               	goto	l1250
  1495  06FC  3A64               	xorlw	100	; case 100
  1496  06FD  1903               	skipnz
  1497  06FE  2F03               	goto	l1176
  1498  06FF  3A0D               	xorlw	13	; case 105
  1499  0700  1903               	skipnz
  1500  0701  2F03               	goto	l1176
  1501  0702  2E7B               	goto	l1248
  1502  0703                     l1176:	
  1503                           
  1504                           ;doprnt.c: 1253: {
  1505                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1506  0703  0020               	movlb	0	; select bank0
  1507  0704  0828               	movf	sprintf@ap,w
  1508  0705  0086               	movwf	6
  1509  0706  0187               	clrf	7
  1510  0707  3F40               	moviw [0]fsr1
  1511  0708  00AA               	movwf	sprintf@val
  1512  0709  3F41               	moviw [1]fsr1
  1513  070A  00AB               	movwf	sprintf@val+1
  1514  070B  3002               	movlw	2
  1515  070C  00A4               	movwf	??_sprintf
  1516  070D  0824               	movf	??_sprintf,w
  1517  070E  07A8               	addwf	sprintf@ap,f
  1518                           
  1519                           ;doprnt.c: 1261: if((int)val < 0) {
  1520  070F  1FAB               	btfss	sprintf@val+1,7
  1521  0710  2F1A               	goto	l1186
  1522                           
  1523                           ;doprnt.c: 1262: flag |= 0x03;
  1524  0711  3003               	movlw	3
  1525  0712  00A4               	movwf	??_sprintf
  1526  0713  0824               	movf	??_sprintf,w
  1527  0714  04AC               	iorwf	sprintf@flag,f
  1528                           
  1529                           ;doprnt.c: 1263: val = -val;
  1530  0715  09AA               	comf	sprintf@val,f
  1531  0716  09AB               	comf	sprintf@val+1,f
  1532  0717  0AAA               	incf	sprintf@val,f
  1533  0718  1903               	skipnz
  1534  0719  0AAB               	incf	sprintf@val+1,f
  1535  071A                     l1186:	
  1536                           
  1537                           ;doprnt.c: 1264: }
  1538                           ;doprnt.c: 1266: }
  1539                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1540  071A  01B0               	clrf	sprintf@c
  1541  071B  0AB0               	incf	sprintf@c,f
  1542  071C  3005               	movlw	5
  1543  071D  0630               	xorwf	sprintf@c,w
  1544  071E  1903               	btfsc	3,2
  1545  071F  2F3F               	goto	l1198
  1546  0720                     l1192:	
  1547                           
  1548                           ;doprnt.c: 1306: if(val < dpowers[c])
  1549  0720  0830               	movf	sprintf@c,w
  1550  0721  00A4               	movwf	??_sprintf
  1551  0722  01A5               	clrf	??_sprintf+1
  1552  0723  35A4               	lslf	??_sprintf,f
  1553  0724  0DA5               	rlf	??_sprintf+1,f
  1554  0725  3020               	movlw	low (_dpowers| (0+32768))
  1555  0726  0724               	addwf	??_sprintf,w
  1556  0727  0084               	movwf	4
  1557  0728  3088               	movlw	high (_dpowers| (0+32768))
  1558  0729  3D25               	addwfc	??_sprintf+1,w
  1559  072A  0085               	movwf	5
  1560  072B  3F00               	moviw [0]fsr0
  1561  072C  00A6               	movwf	??_sprintf+2
  1562  072D  3F01               	moviw [1]fsr0
  1563  072E  00A7               	movwf	??_sprintf+3
  1564  072F  0827               	movf	??_sprintf+3,w
  1565  0730  022B               	subwf	sprintf@val+1,w
  1566  0731  1D03               	skipz
  1567  0732  2F35               	goto	u795
  1568  0733  0826               	movf	??_sprintf+2,w
  1569  0734  022A               	subwf	sprintf@val,w
  1570  0735                     u795:	
  1571  0735  1C03               	btfss	3,0
  1572  0736  2F3F               	goto	l1198
  1573                           
  1574                           ;doprnt.c: 1307: break;
  1575  0737  3001               	movlw	1
  1576  0738  00A4               	movwf	??_sprintf
  1577  0739  0824               	movf	??_sprintf,w
  1578  073A  07B0               	addwf	sprintf@c,f
  1579  073B  3005               	movlw	5
  1580  073C  0630               	xorwf	sprintf@c,w
  1581  073D  1D03               	btfss	3,2
  1582  073E  2F20               	goto	l1192
  1583  073F                     l1198:	
  1584                           
  1585                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1586  073F  082D               	movf	sprintf@width,w
  1587  0740  042E               	iorwf	sprintf@width+1,w
  1588  0741  1903               	btfsc	3,2
  1589  0742  2F4B               	goto	l158
  1590  0743  082C               	movf	sprintf@flag,w
  1591  0744  3903               	andlw	3
  1592  0745  1903               	btfsc	3,2
  1593  0746  2F4B               	goto	l158
  1594                           
  1595                           ;doprnt.c: 1346: width--;
  1596  0747  30FF               	movlw	255
  1597  0748  07AD               	addwf	sprintf@width,f
  1598  0749  30FF               	movlw	255
  1599  074A  3DAE               	addwfc	sprintf@width+1,f
  1600  074B                     l158:	
  1601                           
  1602                           ;doprnt.c: 1381: if(width > c)
  1603  074B  0830               	movf	sprintf@c,w
  1604  074C  00A4               	movwf	??_sprintf
  1605  074D  01A5               	clrf	??_sprintf+1
  1606  074E  1BA4               	btfsc	??_sprintf,7
  1607  074F  03A5               	decf	??_sprintf+1,f
  1608  0750  0825               	movf	??_sprintf+1,w
  1609  0751  3A80               	xorlw	128
  1610  0752  00A6               	movwf	??_sprintf+2
  1611  0753  082E               	movf	sprintf@width+1,w
  1612  0754  3A80               	xorlw	128
  1613  0755  0226               	subwf	??_sprintf+2,w
  1614  0756  1D03               	skipz
  1615  0757  2F5A               	goto	u835
  1616  0758  082D               	movf	sprintf@width,w
  1617  0759  0224               	subwf	??_sprintf,w
  1618  075A                     u835:	
  1619  075A  1803               	skipnc
  1620  075B  2F67               	goto	l1206
  1621                           
  1622                           ;doprnt.c: 1382: width -= c;
  1623  075C  0020               	movlb	0	; select bank0
  1624  075D  0830               	movf	sprintf@c,w
  1625  075E  00A4               	movwf	??_sprintf
  1626  075F  01A5               	clrf	??_sprintf+1
  1627  0760  1BA4               	btfsc	??_sprintf,7
  1628  0761  03A5               	decf	??_sprintf+1,f
  1629  0762  0824               	movf	??_sprintf,w
  1630  0763  02AD               	subwf	sprintf@width,f
  1631  0764  0825               	movf	??_sprintf+1,w
  1632  0765  3BAE               	subwfb	sprintf@width+1,f
  1633  0766  2F6A               	goto	l1208
  1634  0767                     l1206:	
  1635                           
  1636                           ;doprnt.c: 1383: else
  1637                           ;doprnt.c: 1384: width = 0;
  1638  0767  0020               	movlb	0	; select bank0
  1639  0768  01AD               	clrf	sprintf@width
  1640  0769  01AE               	clrf	sprintf@width+1
  1641  076A                     l1208:	
  1642                           
  1643                           ;doprnt.c: 1387: if(flag & 0x04) {
  1644  076A  1D2C               	btfss	sprintf@flag,2
  1645  076B  2F8F               	goto	l1224
  1646                           
  1647                           ;doprnt.c: 1392: if(flag & 0x03)
  1648  076C  082C               	movf	sprintf@flag,w
  1649  076D  3903               	andlw	3
  1650  076E  1903               	btfsc	3,2
  1651  076F  2F7B               	goto	l1216
  1652                           
  1653                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  1654  0770  302D               	movlw	45
  1655  0771  00A4               	movwf	??_sprintf
  1656  0772  082F               	movf	sprintf@sp,w
  1657  0773  0086               	movwf	6
  1658  0774  0187               	clrf	7
  1659  0775  0824               	movf	??_sprintf,w
  1660  0776  0081               	movwf	1
  1661  0777  3001               	movlw	1
  1662  0778  00A4               	movwf	??_sprintf
  1663  0779  0824               	movf	??_sprintf,w
  1664  077A  07AF               	addwf	sprintf@sp,f
  1665  077B                     l1216:	
  1666                           
  1667                           ;doprnt.c: 1415: if(width)
  1668  077B  082D               	movf	sprintf@width,w
  1669  077C  042E               	iorwf	sprintf@width+1,w
  1670  077D  1903               	btfsc	3,2
  1671  077E  2FB5               	goto	l1238
  1672                           
  1673                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1674                           
  1675                           ;doprnt.c: 1416: do
  1676  077F  3030               	movlw	48
  1677  0780  00A4               	movwf	??_sprintf
  1678  0781  082F               	movf	sprintf@sp,w
  1679  0782  0086               	movwf	6
  1680  0783  0187               	clrf	7
  1681  0784  0824               	movf	??_sprintf,w
  1682  0785  0081               	movwf	1
  1683  0786  3001               	movlw	1
  1684  0787  00A4               	movwf	??_sprintf
  1685  0788  0824               	movf	??_sprintf,w
  1686  0789  07AF               	addwf	sprintf@sp,f
  1687                           
  1688                           ;doprnt.c: 1418: while(--width);
  1689  078A  30FF               	movlw	255
  1690  078B  07AD               	addwf	sprintf@width,f
  1691  078C  30FF               	movlw	255
  1692  078D  3DAE               	addwfc	sprintf@width+1,f
  1693  078E  2F7B               	goto	l1216
  1694  078F                     l1224:	
  1695                           ;doprnt.c: 1420: } else
  1696                           
  1697                           
  1698                           ;doprnt.c: 1422: {
  1699                           ;doprnt.c: 1424: if(width
  1700                           ;doprnt.c: 1428: )
  1701  078F  082D               	movf	sprintf@width,w
  1702  0790  042E               	iorwf	sprintf@width+1,w
  1703  0791  1903               	btfsc	3,2
  1704  0792  2FA6               	goto	l1232
  1705  0793                     l1226:	
  1706                           ;doprnt.c: 1429: do
  1707                           
  1708                           
  1709                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1710  0793  3020               	movlw	32
  1711  0794  00A4               	movwf	??_sprintf
  1712  0795  082F               	movf	sprintf@sp,w
  1713  0796  0086               	movwf	6
  1714  0797  0187               	clrf	7
  1715  0798  0824               	movf	??_sprintf,w
  1716  0799  0081               	movwf	1
  1717  079A  3001               	movlw	1
  1718  079B  00A4               	movwf	??_sprintf
  1719  079C  0824               	movf	??_sprintf,w
  1720  079D  07AF               	addwf	sprintf@sp,f
  1721                           
  1722                           ;doprnt.c: 1431: while(--width);
  1723  079E  30FF               	movlw	255
  1724  079F  07AD               	addwf	sprintf@width,f
  1725  07A0  30FF               	movlw	255
  1726  07A1  3DAE               	addwfc	sprintf@width+1,f
  1727  07A2  082D               	movf	sprintf@width,w
  1728  07A3  042E               	iorwf	sprintf@width+1,w
  1729  07A4  1D03               	btfss	3,2
  1730  07A5  2F93               	goto	l1226
  1731  07A6                     l1232:	
  1732                           
  1733                           ;doprnt.c: 1438: if(flag & 0x03)
  1734  07A6  082C               	movf	sprintf@flag,w
  1735  07A7  3903               	andlw	3
  1736  07A8  1903               	btfsc	3,2
  1737  07A9  2FB5               	goto	l1238
  1738                           
  1739                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1740  07AA  302D               	movlw	45
  1741  07AB  00A4               	movwf	??_sprintf
  1742  07AC  082F               	movf	sprintf@sp,w
  1743  07AD  0086               	movwf	6
  1744  07AE  0187               	clrf	7
  1745  07AF  0824               	movf	??_sprintf,w
  1746  07B0  0081               	movwf	1
  1747  07B1  3001               	movlw	1
  1748  07B2  00A4               	movwf	??_sprintf
  1749  07B3  0824               	movf	??_sprintf,w
  1750  07B4  07AF               	addwf	sprintf@sp,f
  1751  07B5                     l1238:	
  1752                           
  1753                           ;doprnt.c: 1469: }
  1754                           ;doprnt.c: 1472: prec = c;
  1755  07B5  0830               	movf	sprintf@c,w
  1756  07B6  00A4               	movwf	??_sprintf
  1757  07B7  0824               	movf	??_sprintf,w
  1758  07B8  00A9               	movwf	sprintf@prec
  1759  07B9                     l1246:	
  1760                           ;doprnt.c: 1474: while(prec--) {
  1761                           
  1762  07B9  30FF               	movlw	255
  1763  07BA  00A4               	movwf	??_sprintf
  1764  07BB  0824               	movf	??_sprintf,w
  1765  07BC  07A9               	addwf	sprintf@prec,f
  1766  07BD  0A29               	incf	sprintf@prec,w
  1767  07BE  1903               	btfsc	3,2
  1768  07BF  2E7B               	goto	l1248
  1769                           
  1770                           ;doprnt.c: 1478: {
  1771                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1772  07C0  300A               	movlw	10
  1773  07C1  00F8               	movwf	___lwmod@divisor
  1774  07C2  3000               	movlw	0
  1775  07C3  00F9               	movwf	___lwmod@divisor+1
  1776  07C4  0829               	movf	sprintf@prec,w
  1777  07C5  00A4               	movwf	??_sprintf
  1778  07C6  01A5               	clrf	??_sprintf+1
  1779  07C7  35A4               	lslf	??_sprintf,f
  1780  07C8  0DA5               	rlf	??_sprintf+1,f
  1781  07C9  3020               	movlw	low (_dpowers| (0+32768))
  1782  07CA  0724               	addwf	??_sprintf,w
  1783  07CB  0084               	movwf	4
  1784  07CC  3088               	movlw	high (_dpowers| (0+32768))
  1785  07CD  3D25               	addwfc	??_sprintf+1,w
  1786  07CE  0085               	movwf	5
  1787  07CF  3F00               	moviw [0]fsr0
  1788  07D0  00F0               	movwf	___lwdiv@divisor
  1789  07D1  3F01               	moviw [1]fsr0
  1790  07D2  00F1               	movwf	___lwdiv@divisor+1
  1791  07D3  082B               	movf	sprintf@val+1,w
  1792  07D4  00F3               	movwf	___lwdiv@dividend+1
  1793  07D5  082A               	movf	sprintf@val,w
  1794  07D6  00F2               	movwf	___lwdiv@dividend
  1795  07D7  3185  2564  3186   	fcall	___lwdiv
  1796  07DA  0871               	movf	?___lwdiv+1,w
  1797  07DB  00FB               	movwf	___lwmod@dividend+1
  1798  07DC  0870               	movf	?___lwdiv,w
  1799  07DD  00FA               	movwf	___lwmod@dividend
  1800  07DE  3185  2538  3186   	fcall	___lwmod
  1801  07E1  0878               	movf	?___lwmod,w
  1802  07E2  3E30               	addlw	48
  1803  07E3  0020               	movlb	0	; select bank0
  1804  07E4  00A6               	movwf	??_sprintf+2
  1805  07E5  0826               	movf	??_sprintf+2,w
  1806  07E6  00B0               	movwf	sprintf@c
  1807                           
  1808                           ;doprnt.c: 1523: }
  1809                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1810  07E7  0830               	movf	sprintf@c,w
  1811  07E8  00A4               	movwf	??_sprintf
  1812  07E9  082F               	movf	sprintf@sp,w
  1813  07EA  0086               	movwf	6
  1814  07EB  0187               	clrf	7
  1815  07EC  0824               	movf	??_sprintf,w
  1816  07ED  0081               	movwf	1
  1817  07EE  3001               	movlw	1
  1818  07EF  00A4               	movwf	??_sprintf
  1819  07F0  0824               	movf	??_sprintf,w
  1820  07F1  07AF               	addwf	sprintf@sp,f
  1821  07F2  2FB9               	goto	l1246
  1822  07F3                     l1250:	
  1823                           ;doprnt.c: 1525: }
  1824                           ;doprnt.c: 1533: }
  1825                           ;doprnt.c: 1535: alldone:
  1826                           
  1827                           
  1828                           ;doprnt.c: 1538: *sp = 0;
  1829  07F3  0020               	movlb	0	; select bank0
  1830  07F4  082F               	movf	sprintf@sp,w
  1831  07F5  0086               	movwf	6
  1832  07F6  0187               	clrf	7
  1833  07F7  0181               	clrf	1
  1834  07F8  0008               	return
  1835  07F9                     __end_of_sprintf:	
  1836                           ;doprnt.c: 1540: return 0;
  1837                           ;	Return value of _sprintf is never used
  1838                           
  1839                           
  1840                           	psect	text2
  1841  04AC                     __ptext2:	
  1842 ;; *************** function _isdigit *****************
  1843 ;; Defined at:
  1844 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
  1845 ;; Parameters:    Size  Location     Type
  1846 ;;  c               1    wreg     unsigned char 
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;  c               1    1[COMMON] unsigned char 
  1849 ;; Return value:  Size  Location     Type
  1850 ;;		None               void
  1851 ;; Registers used:
  1852 ;;		wreg, status,2, status,0
  1853 ;; Tracked objects:
  1854 ;;		On entry : 0/0
  1855 ;;		On exit  : 0/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1858 ;;      Params:         0       0       0       0       0       0       0       0
  1859 ;;      Locals:         2       0       0       0       0       0       0       0
  1860 ;;      Temps:          0       0       0       0       0       0       0       0
  1861 ;;      Totals:         2       0       0       0       0       0       0       0
  1862 ;;Total ram usage:        2 bytes
  1863 ;; Hardware stack levels used:    1
  1864 ;; This function calls:
  1865 ;;		Nothing
  1866 ;; This function is called by:
  1867 ;;		_sprintf
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           
  1872                           ;psect for function _isdigit
  1873  04AC                     _isdigit:	
  1874                           
  1875                           ;incstack = 0
  1876                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1877                           ;isdigit@c stored from wreg
  1878  04AC  00F1               	movwf	isdigit@c
  1879  04AD  01F0               	clrf	_isdigit$426
  1880  04AE  303A               	movlw	58
  1881  04AF  0271               	subwf	isdigit@c,w
  1882  04B0  1803               	skipnc
  1883  04B1  2CB8               	goto	l1018
  1884  04B2  3030               	movlw	48
  1885  04B3  0271               	subwf	isdigit@c,w
  1886  04B4  1C03               	skipc
  1887  04B5  2CB8               	goto	l1018
  1888  04B6  01F0               	clrf	_isdigit$426
  1889  04B7  0AF0               	incf	_isdigit$426,f
  1890  04B8                     l1018:	
  1891  04B8  0C70               	rrf	_isdigit$426,w
  1892  04B9  0008               	return
  1893  04BA                     __end_of_isdigit:	
  1894                           
  1895                           	psect	text3
  1896  04E3                     __ptext3:	
  1897 ;; *************** function ___wmul *****************
  1898 ;; Defined at:
  1899 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;  multiplier      2    0[COMMON] unsigned int 
  1902 ;;  multiplicand    2    2[COMMON] unsigned int 
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;  product         2    4[COMMON] unsigned int 
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  2    0[COMMON] unsigned int 
  1907 ;; Registers used:
  1908 ;;		wreg, status,2, status,0
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1914 ;;      Params:         4       0       0       0       0       0       0       0
  1915 ;;      Locals:         2       0       0       0       0       0       0       0
  1916 ;;      Temps:          0       0       0       0       0       0       0       0
  1917 ;;      Totals:         6       0       0       0       0       0       0       0
  1918 ;;Total ram usage:        6 bytes
  1919 ;; Hardware stack levels used:    1
  1920 ;; This function calls:
  1921 ;;		Nothing
  1922 ;; This function is called by:
  1923 ;;		_sprintf
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           
  1928                           ;psect for function ___wmul
  1929  04E3                     ___wmul:	
  1930                           
  1931                           ;incstack = 0
  1932                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1933  04E3  01F4               	clrf	___wmul@product
  1934  04E4  01F5               	clrf	___wmul@product+1
  1935  04E5                     l1024:	
  1936  04E5  1C70               	btfss	___wmul@multiplier,0
  1937  04E6  2CEB               	goto	l259
  1938  04E7  0872               	movf	___wmul@multiplicand,w
  1939  04E8  07F4               	addwf	___wmul@product,f
  1940  04E9  0873               	movf	___wmul@multiplicand+1,w
  1941  04EA  3DF5               	addwfc	___wmul@product+1,f
  1942  04EB                     l259:	
  1943  04EB  3001               	movlw	1
  1944  04EC                     u535:	
  1945  04EC  35F2               	lslf	___wmul@multiplicand,f
  1946  04ED  0DF3               	rlf	___wmul@multiplicand+1,f
  1947  04EE  0B89               	decfsz	9,f
  1948  04EF  2CEC               	goto	u535
  1949  04F0  3001               	movlw	1
  1950  04F1                     u545:	
  1951  04F1  36F1               	lsrf	___wmul@multiplier+1,f
  1952  04F2  0CF0               	rrf	___wmul@multiplier,f
  1953  04F3  0B89               	decfsz	9,f
  1954  04F4  2CF1               	goto	u545
  1955  04F5  0870               	movf	___wmul@multiplier,w
  1956  04F6  0471               	iorwf	___wmul@multiplier+1,w
  1957  04F7  1D03               	btfss	3,2
  1958  04F8  2CE5               	goto	l1024
  1959  04F9  0875               	movf	___wmul@product+1,w
  1960  04FA  00F1               	movwf	?___wmul+1
  1961  04FB  0874               	movf	___wmul@product,w
  1962  04FC  00F0               	movwf	?___wmul
  1963  04FD  0008               	return
  1964  04FE                     __end_of___wmul:	
  1965                           
  1966                           	psect	text4
  1967  0538                     __ptext4:	
  1968 ;; *************** function ___lwmod *****************
  1969 ;; Defined at:
  1970 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
  1971 ;; Parameters:    Size  Location     Type
  1972 ;;  divisor         2    8[COMMON] unsigned int 
  1973 ;;  dividend        2   10[COMMON] unsigned int 
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;  counter         1   13[COMMON] unsigned char 
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  2    8[COMMON] unsigned int 
  1978 ;; Registers used:
  1979 ;;		wreg, status,2, status,0
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1985 ;;      Params:         4       0       0       0       0       0       0       0
  1986 ;;      Locals:         1       0       0       0       0       0       0       0
  1987 ;;      Temps:          1       0       0       0       0       0       0       0
  1988 ;;      Totals:         6       0       0       0       0       0       0       0
  1989 ;;Total ram usage:        6 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; This function calls:
  1992 ;;		Nothing
  1993 ;; This function is called by:
  1994 ;;		_sprintf
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998                           
  1999                           ;psect for function ___lwmod
  2000  0538                     ___lwmod:	
  2001                           
  2002                           ;incstack = 0
  2003                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2004  0538  0878               	movf	___lwmod@divisor,w
  2005  0539  0479               	iorwf	___lwmod@divisor+1,w
  2006  053A  1903               	btfsc	3,2
  2007  053B  2D5F               	goto	l1080
  2008  053C  01FD               	clrf	___lwmod@counter
  2009  053D  0AFD               	incf	___lwmod@counter,f
  2010  053E                     l1070:	
  2011  053E  1BF9               	btfsc	___lwmod@divisor+1,7
  2012  053F  2D4A               	goto	l1072
  2013  0540  3001               	movlw	1
  2014  0541                     u645:	
  2015  0541  35F8               	lslf	___lwmod@divisor,f
  2016  0542  0DF9               	rlf	___lwmod@divisor+1,f
  2017  0543  0B89               	decfsz	9,f
  2018  0544  2D41               	goto	u645
  2019  0545  3001               	movlw	1
  2020  0546  00FC               	movwf	??___lwmod
  2021  0547  087C               	movf	??___lwmod,w
  2022  0548  07FD               	addwf	___lwmod@counter,f
  2023  0549  2D3E               	goto	l1070
  2024  054A                     l1072:	
  2025  054A  0879               	movf	___lwmod@divisor+1,w
  2026  054B  027B               	subwf	___lwmod@dividend+1,w
  2027  054C  1D03               	skipz
  2028  054D  2D50               	goto	u665
  2029  054E  0878               	movf	___lwmod@divisor,w
  2030  054F  027A               	subwf	___lwmod@dividend,w
  2031  0550                     u665:	
  2032  0550  1C03               	skipc
  2033  0551  2D56               	goto	l1076
  2034  0552  0878               	movf	___lwmod@divisor,w
  2035  0553  02FA               	subwf	___lwmod@dividend,f
  2036  0554  0879               	movf	___lwmod@divisor+1,w
  2037  0555  3BFB               	subwfb	___lwmod@dividend+1,f
  2038  0556                     l1076:	
  2039  0556  3001               	movlw	1
  2040  0557                     u675:	
  2041  0557  36F9               	lsrf	___lwmod@divisor+1,f
  2042  0558  0CF8               	rrf	___lwmod@divisor,f
  2043  0559  0B89               	decfsz	9,f
  2044  055A  2D57               	goto	u675
  2045  055B  3001               	movlw	1
  2046  055C  02FD               	subwf	___lwmod@counter,f
  2047  055D  1D03               	btfss	3,2
  2048  055E  2D4A               	goto	l1072
  2049  055F                     l1080:	
  2050  055F  087B               	movf	___lwmod@dividend+1,w
  2051  0560  00F9               	movwf	?___lwmod+1
  2052  0561  087A               	movf	___lwmod@dividend,w
  2053  0562  00F8               	movwf	?___lwmod
  2054  0563  0008               	return
  2055  0564                     __end_of___lwmod:	
  2056                           
  2057                           	psect	text5
  2058  0564                     __ptext5:	
  2059 ;; *************** function ___lwdiv *****************
  2060 ;; Defined at:
  2061 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  2062 ;; Parameters:    Size  Location     Type
  2063 ;;  divisor         2    0[COMMON] unsigned int 
  2064 ;;  dividend        2    2[COMMON] unsigned int 
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;  quotient        2    5[COMMON] unsigned int 
  2067 ;;  counter         1    7[COMMON] unsigned char 
  2068 ;; Return value:  Size  Location     Type
  2069 ;;                  2    0[COMMON] unsigned int 
  2070 ;; Registers used:
  2071 ;;		wreg, status,2, status,0
  2072 ;; Tracked objects:
  2073 ;;		On entry : 0/0
  2074 ;;		On exit  : 0/0
  2075 ;;		Unchanged: 0/0
  2076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2077 ;;      Params:         4       0       0       0       0       0       0       0
  2078 ;;      Locals:         3       0       0       0       0       0       0       0
  2079 ;;      Temps:          1       0       0       0       0       0       0       0
  2080 ;;      Totals:         8       0       0       0       0       0       0       0
  2081 ;;Total ram usage:        8 bytes
  2082 ;; Hardware stack levels used:    1
  2083 ;; This function calls:
  2084 ;;		Nothing
  2085 ;; This function is called by:
  2086 ;;		_sprintf
  2087 ;; This function uses a non-reentrant model
  2088 ;;
  2089                           
  2090                           
  2091                           ;psect for function ___lwdiv
  2092  0564                     ___lwdiv:	
  2093                           
  2094                           ;incstack = 0
  2095                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2096  0564  01F5               	clrf	___lwdiv@quotient
  2097  0565  01F6               	clrf	___lwdiv@quotient+1
  2098  0566  0870               	movf	___lwdiv@divisor,w
  2099  0567  0471               	iorwf	___lwdiv@divisor+1,w
  2100  0568  1903               	btfsc	3,2
  2101  0569  2D93               	goto	l1058
  2102  056A  01F7               	clrf	___lwdiv@counter
  2103  056B  0AF7               	incf	___lwdiv@counter,f
  2104  056C                     l1046:	
  2105  056C  1BF1               	btfsc	___lwdiv@divisor+1,7
  2106  056D  2D78               	goto	l1048
  2107  056E  3001               	movlw	1
  2108  056F                     u575:	
  2109  056F  35F0               	lslf	___lwdiv@divisor,f
  2110  0570  0DF1               	rlf	___lwdiv@divisor+1,f
  2111  0571  0B89               	decfsz	9,f
  2112  0572  2D6F               	goto	u575
  2113  0573  3001               	movlw	1
  2114  0574  00F4               	movwf	??___lwdiv
  2115  0575  0874               	movf	??___lwdiv,w
  2116  0576  07F7               	addwf	___lwdiv@counter,f
  2117  0577  2D6C               	goto	l1046
  2118  0578                     l1048:	
  2119  0578  3001               	movlw	1
  2120  0579                     u595:	
  2121  0579  35F5               	lslf	___lwdiv@quotient,f
  2122  057A  0DF6               	rlf	___lwdiv@quotient+1,f
  2123  057B  0B89               	decfsz	9,f
  2124  057C  2D79               	goto	u595
  2125  057D  0871               	movf	___lwdiv@divisor+1,w
  2126  057E  0273               	subwf	___lwdiv@dividend+1,w
  2127  057F  1D03               	skipz
  2128  0580  2D83               	goto	u605
  2129  0581  0870               	movf	___lwdiv@divisor,w
  2130  0582  0272               	subwf	___lwdiv@dividend,w
  2131  0583                     u605:	
  2132  0583  1C03               	skipc
  2133  0584  2D8A               	goto	l1054
  2134  0585  0870               	movf	___lwdiv@divisor,w
  2135  0586  02F2               	subwf	___lwdiv@dividend,f
  2136  0587  0871               	movf	___lwdiv@divisor+1,w
  2137  0588  3BF3               	subwfb	___lwdiv@dividend+1,f
  2138  0589  1475               	bsf	___lwdiv@quotient,0
  2139  058A                     l1054:	
  2140  058A  3001               	movlw	1
  2141  058B                     u615:	
  2142  058B  36F1               	lsrf	___lwdiv@divisor+1,f
  2143  058C  0CF0               	rrf	___lwdiv@divisor,f
  2144  058D  0B89               	decfsz	9,f
  2145  058E  2D8B               	goto	u615
  2146  058F  3001               	movlw	1
  2147  0590  02F7               	subwf	___lwdiv@counter,f
  2148  0591  1D03               	btfss	3,2
  2149  0592  2D78               	goto	l1048
  2150  0593                     l1058:	
  2151  0593  0876               	movf	___lwdiv@quotient+1,w
  2152  0594  00F1               	movwf	?___lwdiv+1
  2153  0595  0875               	movf	___lwdiv@quotient,w
  2154  0596  00F0               	movwf	?___lwdiv
  2155  0597  0008               	return
  2156  0598                     __end_of___lwdiv:	
  2157                           
  2158                           	psect	text6
  2159  062A                     __ptext6:	
  2160 ;; *************** function _TextLCD_Puts *****************
  2161 ;; Defined at:
  2162 ;;		line 38 in file "C:/Users/dungl/Documents/GitHub/XC8Training/TextLCD.X/TextLCD.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;  line            1    wreg     unsigned char 
  2165 ;;  idx             1    4[COMMON] unsigned char 
  2166 ;;  data            2    5[COMMON] PTR unsigned char 
  2167 ;;		 -> STR_3(17), main@buffer(16), STR_1(8), 
  2168 ;;  length_or_ty    1    7[COMMON] unsigned char 
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;  line            1    9[COMMON] unsigned char 
  2171 ;;  address         1   10[COMMON] unsigned char 
  2172 ;; Return value:  Size  Location     Type
  2173 ;;                  1    wreg      void 
  2174 ;; Registers used:
  2175 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2176 ;; Tracked objects:
  2177 ;;		On entry : 0/0
  2178 ;;		On exit  : 0/0
  2179 ;;		Unchanged: 0/0
  2180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2181 ;;      Params:         4       0       0       0       0       0       0       0
  2182 ;;      Locals:         2       0       0       0       0       0       0       0
  2183 ;;      Temps:          1       0       0       0       0       0       0       0
  2184 ;;      Totals:         7       0       0       0       0       0       0       0
  2185 ;;Total ram usage:        7 bytes
  2186 ;; Hardware stack levels used:    1
  2187 ;; Hardware stack levels required when called:    3
  2188 ;; This function calls:
  2189 ;;		_TextLCD_CMD
  2190 ;;		_TextLCD_PutChar
  2191 ;; This function is called by:
  2192 ;;		_main
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           
  2197                           ;psect for function _TextLCD_Puts
  2198  062A                     _TextLCD_Puts:	
  2199                           
  2200                           ;incstack = 0
  2201                           ; Regs used in _TextLCD_Puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2202                           ;TextLCD_Puts@line stored from wreg
  2203  062A  00F9               	movwf	TextLCD_Puts@line
  2204                           
  2205                           ;TextLCD.c: 40: const uint8_t DDRAM_Start_Address[4]={0x80, 0xC0, 0x90, 0xD0};
  2206                           ;TextLCD.c: 41: line&=0b11;
  2207  062B  3003               	movlw	3
  2208  062C  00F8               	movwf	??_TextLCD_Puts
  2209  062D  0878               	movf	??_TextLCD_Puts,w
  2210  062E  05F9               	andwf	TextLCD_Puts@line,f
  2211                           
  2212                           ;TextLCD.c: 42: idx&=0b1111;
  2213  062F  300F               	movlw	15
  2214  0630  00F8               	movwf	??_TextLCD_Puts
  2215  0631  0878               	movf	??_TextLCD_Puts,w
  2216  0632  05F4               	andwf	TextLCD_Puts@idx,f
  2217                           
  2218                           ;TextLCD.c: 43: uint8_t address=DDRAM_Start_Address[line]+idx;
  2219  0633  0879               	movf	TextLCD_Puts@line,w
  2220  0634  3E00               	addlw	low (TextLCD_Puts@DDRAM_Start_Address| (0+32768))
  2221  0635  0084               	movwf	4
  2222  0636  3088               	movlw	high (TextLCD_Puts@DDRAM_Start_Address| (0+32768))
  2223  0637  1803               	skipnc
  2224  0638  3E01               	addlw	1
  2225  0639  0085               	movwf	5
  2226  063A  0800               	movf	0,w	;code access
  2227  063B  0774               	addwf	TextLCD_Puts@idx,w
  2228  063C  00F8               	movwf	??_TextLCD_Puts
  2229  063D  0878               	movf	??_TextLCD_Puts,w
  2230  063E  00FA               	movwf	TextLCD_Puts@address
  2231                           
  2232                           ;TextLCD.c: 44: TextLCD_CMD(address);
  2233  063F  087A               	movf	TextLCD_Puts@address,w
  2234  0640  3184  24CE  3186   	fcall	_TextLCD_CMD
  2235                           
  2236                           ;TextLCD.c: 45: _delay((unsigned long)((50)*(32000000/4000000.0)));
  2237  0643  3085               	movlw	133
  2238  0644                     u957:	
  2239  0644  0B89               	decfsz	9,f
  2240  0645  2E44               	goto	u957
  2241  0646  0000               	nop
  2242                           
  2243                           ;TextLCD.c: 47: if(length_or_type==0) while(*data!=0) TextLCD_PutChar(*data++);
  2244  0647  0877               	movf	TextLCD_Puts@length_or_type,w
  2245  0648  1903               	btfsc	3,2
  2246  0649  2E57               	goto	l1132
  2247  064A  2E5F               	goto	l1134
  2248  064B                     l1128:	
  2249  064B  0875               	movf	TextLCD_Puts@data,w
  2250  064C  0084               	movwf	4
  2251  064D  0876               	movf	TextLCD_Puts@data+1,w
  2252  064E  0085               	movwf	5
  2253  064F  0800               	movf	0,w	;code access
  2254  0650  3184  2497  3186   	fcall	_TextLCD_PutChar
  2255  0653  3001               	movlw	1
  2256  0654  07F5               	addwf	TextLCD_Puts@data,f
  2257  0655  3000               	movlw	0
  2258  0656  3DF6               	addwfc	TextLCD_Puts@data+1,f
  2259  0657                     l1132:	
  2260  0657  0875               	movf	TextLCD_Puts@data,w
  2261  0658  0084               	movwf	4
  2262  0659  0876               	movf	TextLCD_Puts@data+1,w
  2263  065A  0085               	movwf	5
  2264  065B  0012               	moviw fsr0++
  2265  065C  1903               	btfsc	3,2
  2266  065D  0008               	return
  2267  065E  2E4B               	goto	l1128
  2268  065F                     l1134:	
  2269                           
  2270                           ;TextLCD.c: 48: else for(address=0; address<length_or_type; address++) TextLCD_PutChar(*
      +                          data++);
  2271  065F  01FA               	clrf	TextLCD_Puts@address
  2272  0660                     l1142:	
  2273  0660  0877               	movf	TextLCD_Puts@length_or_type,w
  2274  0661  027A               	subwf	TextLCD_Puts@address,w
  2275  0662  1803               	btfsc	3,0
  2276  0663  0008               	return
  2277  0664  0875               	movf	TextLCD_Puts@data,w
  2278  0665  0084               	movwf	4
  2279  0666  0876               	movf	TextLCD_Puts@data+1,w
  2280  0667  0085               	movwf	5
  2281  0668  0800               	movf	0,w	;code access
  2282  0669  3184  2497  3186   	fcall	_TextLCD_PutChar
  2283  066C  3001               	movlw	1
  2284  066D  07F5               	addwf	TextLCD_Puts@data,f
  2285  066E  3000               	movlw	0
  2286  066F  3DF6               	addwfc	TextLCD_Puts@data+1,f
  2287  0670  3001               	movlw	1
  2288  0671  00F8               	movwf	??_TextLCD_Puts
  2289  0672  0878               	movf	??_TextLCD_Puts,w
  2290  0673  07FA               	addwf	TextLCD_Puts@address,f
  2291  0674  2E60               	goto	l1142
  2292  0675                     __end_of_TextLCD_Puts:	
  2293                           
  2294                           	psect	text7
  2295  0497                     __ptext7:	
  2296 ;; *************** function _TextLCD_PutChar *****************
  2297 ;; Defined at:
  2298 ;;		line 31 in file "C:/Users/dungl/Documents/GitHub/XC8Training/TextLCD.X/TextLCD.c"
  2299 ;; Parameters:    Size  Location     Type
  2300 ;;  data            1    wreg     unsigned char 
  2301 ;; Auto vars:     Size  Location     Type
  2302 ;;  data            1    3[COMMON] unsigned char 
  2303 ;; Return value:  Size  Location     Type
  2304 ;;                  1    wreg      void 
  2305 ;; Registers used:
  2306 ;;		wreg, status,2, status,0, pclath, cstack
  2307 ;; Tracked objects:
  2308 ;;		On entry : 0/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2312 ;;      Params:         0       0       0       0       0       0       0       0
  2313 ;;      Locals:         1       0       0       0       0       0       0       0
  2314 ;;      Temps:          0       0       0       0       0       0       0       0
  2315 ;;      Totals:         1       0       0       0       0       0       0       0
  2316 ;;Total ram usage:        1 bytes
  2317 ;; Hardware stack levels used:    1
  2318 ;; Hardware stack levels required when called:    2
  2319 ;; This function calls:
  2320 ;;		_TextLCD_CMD
  2321 ;; This function is called by:
  2322 ;;		_TextLCD_Puts
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325                           
  2326                           
  2327                           ;psect for function _TextLCD_PutChar
  2328  0497                     _TextLCD_PutChar:	
  2329                           
  2330                           ;incstack = 0
  2331                           ; Regs used in _TextLCD_PutChar: [wreg+status,2+status,0+pclath+cstack]
  2332                           ;TextLCD_PutChar@data stored from wreg
  2333  0497  00F3               	movwf	TextLCD_PutChar@data
  2334                           
  2335                           ;TextLCD.c: 33: LATCbits.LATC0=1;
  2336  0498  0022               	movlb	2	; select bank2
  2337  0499  140E               	bsf	14,0	;volatile
  2338                           
  2339                           ;TextLCD.c: 34: TextLCD_CMD(data);
  2340  049A  0873               	movf	TextLCD_PutChar@data,w
  2341  049B  3184  24CE         	fcall	_TextLCD_CMD
  2342                           
  2343                           ;TextLCD.c: 35: LATCbits.LATC0=0;
  2344  049D  0022               	movlb	2	; select bank2
  2345  049E  100E               	bcf	14,0	;volatile
  2346  049F  0008               	return
  2347  04A0                     __end_of_TextLCD_PutChar:	
  2348                           
  2349                           	psect	text8
  2350  0598                     __ptext8:	
  2351 ;; *************** function _TextLCD_Init *****************
  2352 ;; Defined at:
  2353 ;;		line 56 in file "C:/Users/dungl/Documents/GitHub/XC8Training/TextLCD.X/TextLCD.c"
  2354 ;; Parameters:    Size  Location     Type
  2355 ;;		None
  2356 ;; Auto vars:     Size  Location     Type
  2357 ;;		None
  2358 ;; Return value:  Size  Location     Type
  2359 ;;                  1    wreg      void 
  2360 ;; Registers used:
  2361 ;;		wreg, status,2, status,0, pclath, cstack
  2362 ;; Tracked objects:
  2363 ;;		On entry : 0/0
  2364 ;;		On exit  : 0/0
  2365 ;;		Unchanged: 0/0
  2366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2367 ;;      Params:         0       0       0       0       0       0       0       0
  2368 ;;      Locals:         0       0       0       0       0       0       0       0
  2369 ;;      Temps:          2       0       0       0       0       0       0       0
  2370 ;;      Totals:         2       0       0       0       0       0       0       0
  2371 ;;Total ram usage:        2 bytes
  2372 ;; Hardware stack levels used:    1
  2373 ;; Hardware stack levels required when called:    2
  2374 ;; This function calls:
  2375 ;;		_TextLCD_4Bits_Write
  2376 ;;		_TextLCD_CMD
  2377 ;;		_TextLCD_Enable
  2378 ;; This function is called by:
  2379 ;;		_main
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382                           
  2383                           
  2384                           ;psect for function _TextLCD_Init
  2385  0598                     _TextLCD_Init:	
  2386                           
  2387                           ;TextLCD.c: 58: _delay((unsigned long)((40)*(32000000/4000.0)));
  2388                           
  2389                           ;incstack = 0
  2390                           ; Regs used in _TextLCD_Init: [wreg+status,2+status,0+pclath+cstack]
  2391  0598  3002               	movlw	2
  2392  0599  00F4               	movwf	??_TextLCD_Init+1
  2393  059A  30A0               	movlw	160
  2394  059B  00F3               	movwf	??_TextLCD_Init
  2395  059C  3092               	movlw	146
  2396  059D                     u967:	
  2397  059D  0B89               	decfsz	9,f
  2398  059E  2D9D               	goto	u967
  2399  059F  0BF3               	decfsz	??_TextLCD_Init,f
  2400  05A0  2D9D               	goto	u967
  2401  05A1  0BF4               	decfsz	??_TextLCD_Init+1,f
  2402  05A2  2D9D               	goto	u967
  2403  05A3  3200               	nop2
  2404                           
  2405                           ;TextLCD.c: 59: TextLCD_4Bits_Write(0x03);
  2406  05A4  3003               	movlw	3
  2407  05A5  3185  251B  3185   	fcall	_TextLCD_4Bits_Write
  2408                           
  2409                           ;TextLCD.c: 60: TextLCD_Enable();
  2410  05A8  3184  24A0  3185   	fcall	_TextLCD_Enable
  2411                           
  2412                           ;TextLCD.c: 61: _delay((unsigned long)((5)*(32000000/4000.0)));
  2413  05AB  3034               	movlw	52
  2414  05AC  00F3               	movwf	??_TextLCD_Init
  2415  05AD  30F2               	movlw	242
  2416  05AE                     u977:	
  2417  05AE  0B89               	decfsz	9,f
  2418  05AF  2DAE               	goto	u977
  2419  05B0  0BF3               	decfsz	??_TextLCD_Init,f
  2420  05B1  2DAE               	goto	u977
  2421                           
  2422                           ;TextLCD.c: 62: TextLCD_Enable();
  2423  05B2  3184  24A0  3185   	fcall	_TextLCD_Enable
  2424                           
  2425                           ;TextLCD.c: 63: _delay((unsigned long)((100)*(32000000/4000000.0)));
  2426  05B5  30A0               	movlw	160
  2427  05B6                     u987:	
  2428  05B6  3200               	nop2
  2429  05B7  0B89               	decfsz	9,f
  2430  05B8  2DB6               	goto	u987
  2431                           
  2432                           ;TextLCD.c: 64: TextLCD_Enable();
  2433  05B9  3184  24A0  3185   	fcall	_TextLCD_Enable
  2434                           
  2435                           ;TextLCD.c: 65: TextLCD_4Bits_Write(0x02);
  2436  05BC  3002               	movlw	2
  2437  05BD  3185  251B  3185   	fcall	_TextLCD_4Bits_Write
  2438                           
  2439                           ;TextLCD.c: 66: TextLCD_Enable();
  2440  05C0  3184  24A0  3185   	fcall	_TextLCD_Enable
  2441                           
  2442                           ;TextLCD.c: 67: TextLCD_CMD(0x28);
  2443  05C3  3028               	movlw	40
  2444  05C4  3184  24CE  3185   	fcall	_TextLCD_CMD
  2445                           
  2446                           ;TextLCD.c: 68: TextLCD_CMD(0x0c);
  2447  05C7  300C               	movlw	12
  2448  05C8  3184  24CE  3185   	fcall	_TextLCD_CMD
  2449                           
  2450                           ;TextLCD.c: 69: TextLCD_CMD(0x06);
  2451  05CB  3006               	movlw	6
  2452  05CC  3184  24CE  3185   	fcall	_TextLCD_CMD
  2453                           
  2454                           ;TextLCD.c: 70: TextLCD_CMD(0x01);
  2455  05CF  3001               	movlw	1
  2456  05D0  3184  24CE  3185   	fcall	_TextLCD_CMD
  2457                           
  2458                           ;TextLCD.c: 71: _delay((unsigned long)((100)*(32000000/4000.0)));
  2459  05D3  3005               	movlw	5
  2460  05D4  00F4               	movwf	??_TextLCD_Init+1
  2461  05D5  300F               	movlw	15
  2462  05D6  00F3               	movwf	??_TextLCD_Init
  2463  05D7  30F1               	movlw	241
  2464  05D8                     u997:	
  2465  05D8  0B89               	decfsz	9,f
  2466  05D9  2DD8               	goto	u997
  2467  05DA  0BF3               	decfsz	??_TextLCD_Init,f
  2468  05DB  2DD8               	goto	u997
  2469  05DC  0BF4               	decfsz	??_TextLCD_Init+1,f
  2470  05DD  2DD8               	goto	u997
  2471  05DE  0000               	nop
  2472  05DF  0008               	return
  2473  05E0                     __end_of_TextLCD_Init:	
  2474                           
  2475                           	psect	text9
  2476  04CE                     __ptext9:	
  2477 ;; *************** function _TextLCD_CMD *****************
  2478 ;; Defined at:
  2479 ;;		line 23 in file "C:/Users/dungl/Documents/GitHub/XC8Training/TextLCD.X/TextLCD.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;  cmd             1    wreg     unsigned char 
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;  cmd             1    2[COMMON] unsigned char 
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  1    wreg      void 
  2486 ;; Registers used:
  2487 ;;		wreg, status,2, status,0, pclath, cstack
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2493 ;;      Params:         0       0       0       0       0       0       0       0
  2494 ;;      Locals:         1       0       0       0       0       0       0       0
  2495 ;;      Temps:          1       0       0       0       0       0       0       0
  2496 ;;      Totals:         2       0       0       0       0       0       0       0
  2497 ;;Total ram usage:        2 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; Hardware stack levels required when called:    1
  2500 ;; This function calls:
  2501 ;;		_TextLCD_4Bits_Write
  2502 ;;		_TextLCD_Enable
  2503 ;; This function is called by:
  2504 ;;		_TextLCD_PutChar
  2505 ;;		_TextLCD_Puts
  2506 ;;		_TextLCD_Init
  2507 ;;		_TextLCD_Clear
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511                           
  2512                           ;psect for function _TextLCD_CMD
  2513  04CE                     _TextLCD_CMD:	
  2514                           
  2515                           ;incstack = 0
  2516                           ; Regs used in _TextLCD_CMD: [wreg+status,2+status,0+pclath+cstack]
  2517                           ;TextLCD_CMD@cmd stored from wreg
  2518  04CE  00F2               	movwf	TextLCD_CMD@cmd
  2519                           
  2520                           ;TextLCD.c: 25: TextLCD_4Bits_Write(cmd>>4);
  2521  04CF  0872               	movf	TextLCD_CMD@cmd,w
  2522  04D0  00F1               	movwf	??_TextLCD_CMD
  2523  04D1  3004               	movlw	4
  2524  04D2                     u485:	
  2525  04D2  36F1               	lsrf	??_TextLCD_CMD,f
  2526  04D3  0B89               	decfsz	9,f
  2527  04D4  2CD2               	goto	u485
  2528  04D5  0871               	movf	??_TextLCD_CMD,w
  2529  04D6  3185  251B  3184   	fcall	_TextLCD_4Bits_Write
  2530                           
  2531                           ;TextLCD.c: 26: TextLCD_Enable();
  2532  04D9  3184  24A0  3184   	fcall	_TextLCD_Enable
  2533                           
  2534                           ;TextLCD.c: 27: TextLCD_4Bits_Write(cmd);
  2535  04DC  0872               	movf	TextLCD_CMD@cmd,w
  2536  04DD  3185  251B  3184   	fcall	_TextLCD_4Bits_Write
  2537                           
  2538                           ;TextLCD.c: 28: TextLCD_Enable();
  2539  04E0  3184  24A0         	fcall	_TextLCD_Enable
  2540  04E2  0008               	return
  2541  04E3                     __end_of_TextLCD_CMD:	
  2542                           
  2543                           	psect	text10
  2544  04A0                     __ptext10:	
  2545 ;; *************** function _TextLCD_Enable *****************
  2546 ;; Defined at:
  2547 ;;		line 15 in file "C:/Users/dungl/Documents/GitHub/XC8Training/TextLCD.X/TextLCD.c"
  2548 ;; Parameters:    Size  Location     Type
  2549 ;;		None
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;		None
  2552 ;; Return value:  Size  Location     Type
  2553 ;;                  1    wreg      void 
  2554 ;; Registers used:
  2555 ;;		wreg
  2556 ;; Tracked objects:
  2557 ;;		On entry : 0/0
  2558 ;;		On exit  : 0/0
  2559 ;;		Unchanged: 0/0
  2560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2561 ;;      Params:         0       0       0       0       0       0       0       0
  2562 ;;      Locals:         0       0       0       0       0       0       0       0
  2563 ;;      Temps:          0       0       0       0       0       0       0       0
  2564 ;;      Totals:         0       0       0       0       0       0       0       0
  2565 ;;Total ram usage:        0 bytes
  2566 ;; Hardware stack levels used:    1
  2567 ;; This function calls:
  2568 ;;		Nothing
  2569 ;; This function is called by:
  2570 ;;		_TextLCD_CMD
  2571 ;;		_TextLCD_Init
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575                           
  2576                           ;psect for function _TextLCD_Enable
  2577  04A0                     _TextLCD_Enable:	
  2578                           
  2579                           ;TextLCD.c: 17: LATCbits.LATC1=1;
  2580                           
  2581                           ;incstack = 0
  2582                           ; Regs used in _TextLCD_Enable: [wreg]
  2583  04A0  0022               	movlb	2	; select bank2
  2584  04A1  148E               	bsf	14,1	;volatile
  2585                           
  2586                           ;TextLCD.c: 18: _delay((unsigned long)((3)*(32000000/4000000.0)));
  2587  04A2  3008               	movlw	8
  2588  04A3                     u1007:	
  2589  04A3  0B89               	decfsz	9,f
  2590  04A4  2CA3               	goto	u1007
  2591                           
  2592                           ;TextLCD.c: 19: LATCbits.LATC1=0;
  2593  04A5  0022               	movlb	2	; select bank2
  2594  04A6  108E               	bcf	14,1	;volatile
  2595                           
  2596                           ;TextLCD.c: 20: _delay((unsigned long)((50)*(32000000/4000000.0)));
  2597  04A7  3085               	movlw	133
  2598  04A8                     u1017:	
  2599  04A8  0B89               	decfsz	9,f
  2600  04A9  2CA8               	goto	u1017
  2601  04AA  0000               	nop
  2602  04AB  0008               	return
  2603  04AC                     __end_of_TextLCD_Enable:	
  2604                           
  2605                           	psect	text11
  2606  051B                     __ptext11:	
  2607 ;; *************** function _TextLCD_4Bits_Write *****************
  2608 ;; Defined at:
  2609 ;;		line 4 in file "C:/Users/dungl/Documents/GitHub/XC8Training/TextLCD.X/TextLCD.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;  nib             1    wreg     unsigned char 
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;  nib             1    0[COMMON] unsigned char 
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  1    wreg      void 
  2616 ;; Registers used:
  2617 ;;		wreg, status,0
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2623 ;;      Params:         0       0       0       0       0       0       0       0
  2624 ;;      Locals:         1       0       0       0       0       0       0       0
  2625 ;;      Temps:          0       0       0       0       0       0       0       0
  2626 ;;      Totals:         1       0       0       0       0       0       0       0
  2627 ;;Total ram usage:        1 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; This function calls:
  2630 ;;		Nothing
  2631 ;; This function is called by:
  2632 ;;		_TextLCD_CMD
  2633 ;;		_TextLCD_Init
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           
  2638                           ;psect for function _TextLCD_4Bits_Write
  2639  051B                     _TextLCD_4Bits_Write:	
  2640                           
  2641                           ;incstack = 0
  2642                           ; Regs used in _TextLCD_4Bits_Write: [wreg+status,0]
  2643                           ;TextLCD_4Bits_Write@nib stored from wreg
  2644  051B  00F0               	movwf	TextLCD_4Bits_Write@nib
  2645                           
  2646                           ;TextLCD.c: 6: LATCbits.LATC2=(bool)nib;
  2647  051C  0C70               	rrf	TextLCD_4Bits_Write@nib,w
  2648  051D  0022               	movlb	2	; select bank2
  2649  051E  1C03               	skipc
  2650  051F  110E               	bcf	14,2	;volatile
  2651  0520  1803               	skipnc
  2652  0521  150E               	bsf	14,2	;volatile
  2653                           
  2654                           ;TextLCD.c: 7: nib>>=1;
  2655  0522  1003               	clrc
  2656  0523  0CF0               	rrf	TextLCD_4Bits_Write@nib,f
  2657                           
  2658                           ;TextLCD.c: 8: LATCbits.LATC3=(bool)nib;
  2659  0524  0C70               	rrf	TextLCD_4Bits_Write@nib,w
  2660  0525  1C03               	skipc
  2661  0526  118E               	bcf	14,3	;volatile
  2662  0527  1803               	skipnc
  2663  0528  158E               	bsf	14,3	;volatile
  2664                           
  2665                           ;TextLCD.c: 9: nib>>=1;
  2666  0529  1003               	clrc
  2667  052A  0CF0               	rrf	TextLCD_4Bits_Write@nib,f
  2668                           
  2669                           ;TextLCD.c: 10: LATCbits.LATC4=(bool)nib;
  2670  052B  0C70               	rrf	TextLCD_4Bits_Write@nib,w
  2671  052C  1C03               	skipc
  2672  052D  120E               	bcf	14,4	;volatile
  2673  052E  1803               	skipnc
  2674  052F  160E               	bsf	14,4	;volatile
  2675                           
  2676                           ;TextLCD.c: 11: nib>>=1;
  2677  0530  1003               	clrc
  2678  0531  0CF0               	rrf	TextLCD_4Bits_Write@nib,f
  2679                           
  2680                           ;TextLCD.c: 12: LATCbits.LATC5=(bool)nib;
  2681  0532  0C70               	rrf	TextLCD_4Bits_Write@nib,w
  2682  0533  1C03               	skipc
  2683  0534  128E               	bcf	14,5	;volatile
  2684  0535  1803               	skipnc
  2685  0536  168E               	bsf	14,5	;volatile
  2686  0537  0008               	return
  2687  0538                     __end_of_TextLCD_4Bits_Write:	
  2688                           
  2689                           	psect	text12
  2690  048E                     __ptext12:	
  2691 ;; *************** function _SYSTEM_Initialize *****************
  2692 ;; Defined at:
  2693 ;;		line 70 in file "mcc_generated_files/mcc.c"
  2694 ;; Parameters:    Size  Location     Type
  2695 ;;		None
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;		None
  2698 ;; Return value:  Size  Location     Type
  2699 ;;                  1    wreg      void 
  2700 ;; Registers used:
  2701 ;;		wreg, status,2, status,0, pclath, cstack
  2702 ;; Tracked objects:
  2703 ;;		On entry : 0/0
  2704 ;;		On exit  : 0/0
  2705 ;;		Unchanged: 0/0
  2706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2707 ;;      Params:         0       0       0       0       0       0       0       0
  2708 ;;      Locals:         0       0       0       0       0       0       0       0
  2709 ;;      Temps:          0       0       0       0       0       0       0       0
  2710 ;;      Totals:         0       0       0       0       0       0       0       0
  2711 ;;Total ram usage:        0 bytes
  2712 ;; Hardware stack levels used:    1
  2713 ;; Hardware stack levels required when called:    1
  2714 ;; This function calls:
  2715 ;;		_OSCILLATOR_Initialize
  2716 ;;		_PIN_MANAGER_Initialize
  2717 ;;		_WDT_Initialize
  2718 ;; This function is called by:
  2719 ;;		_main
  2720 ;; This function uses a non-reentrant model
  2721 ;;
  2722                           
  2723                           
  2724                           ;psect for function _SYSTEM_Initialize
  2725  048E                     _SYSTEM_Initialize:	
  2726                           
  2727                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  2728                           
  2729                           ;incstack = 0
  2730                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2731  048E  3184  24FE  3184   	fcall	_PIN_MANAGER_Initialize
  2732                           
  2733                           ;mcc.c: 74: OSCILLATOR_Initialize();
  2734  0491  3184  2487  3184   	fcall	_OSCILLATOR_Initialize
  2735                           
  2736                           ;mcc.c: 75: WDT_Initialize();
  2737  0494  3184  2483         	fcall	_WDT_Initialize
  2738  0496  0008               	return
  2739  0497                     __end_of_SYSTEM_Initialize:	
  2740                           
  2741                           	psect	text13
  2742  0483                     __ptext13:	
  2743 ;; *************** function _WDT_Initialize *****************
  2744 ;; Defined at:
  2745 ;;		line 90 in file "mcc_generated_files/mcc.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;		None
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;		None
  2750 ;; Return value:  Size  Location     Type
  2751 ;;                  1    wreg      void 
  2752 ;; Registers used:
  2753 ;;		wreg
  2754 ;; Tracked objects:
  2755 ;;		On entry : 0/0
  2756 ;;		On exit  : 0/0
  2757 ;;		Unchanged: 0/0
  2758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2759 ;;      Params:         0       0       0       0       0       0       0       0
  2760 ;;      Locals:         0       0       0       0       0       0       0       0
  2761 ;;      Temps:          0       0       0       0       0       0       0       0
  2762 ;;      Totals:         0       0       0       0       0       0       0       0
  2763 ;;Total ram usage:        0 bytes
  2764 ;; Hardware stack levels used:    1
  2765 ;; This function calls:
  2766 ;;		Nothing
  2767 ;; This function is called by:
  2768 ;;		_SYSTEM_Initialize
  2769 ;; This function uses a non-reentrant model
  2770 ;;
  2771                           
  2772                           
  2773                           ;psect for function _WDT_Initialize
  2774  0483                     _WDT_Initialize:	
  2775                           
  2776                           ;mcc.c: 93: WDTCON = 0x16;
  2777                           
  2778                           ;incstack = 0
  2779                           ; Regs used in _WDT_Initialize: [wreg]
  2780  0483  3016               	movlw	22
  2781  0484  0021               	movlb	1	; select bank1
  2782  0485  0097               	movwf	23	;volatile
  2783  0486  0008               	return
  2784  0487                     __end_of_WDT_Initialize:	
  2785                           
  2786                           	psect	text14
  2787  04FE                     __ptext14:	
  2788 ;; *************** function _PIN_MANAGER_Initialize *****************
  2789 ;; Defined at:
  2790 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  2791 ;; Parameters:    Size  Location     Type
  2792 ;;		None
  2793 ;; Auto vars:     Size  Location     Type
  2794 ;;		None
  2795 ;; Return value:  Size  Location     Type
  2796 ;;                  1    wreg      void 
  2797 ;; Registers used:
  2798 ;;		wreg, status,2
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2804 ;;      Params:         0       0       0       0       0       0       0       0
  2805 ;;      Locals:         0       0       0       0       0       0       0       0
  2806 ;;      Temps:          0       0       0       0       0       0       0       0
  2807 ;;      Totals:         0       0       0       0       0       0       0       0
  2808 ;;Total ram usage:        0 bytes
  2809 ;; Hardware stack levels used:    1
  2810 ;; This function calls:
  2811 ;;		Nothing
  2812 ;; This function is called by:
  2813 ;;		_SYSTEM_Initialize
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           
  2818                           ;psect for function _PIN_MANAGER_Initialize
  2819  04FE                     _PIN_MANAGER_Initialize:	
  2820                           
  2821                           ;pin_manager.c: 57: LATE = 0x00;
  2822                           
  2823                           ;incstack = 0
  2824                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2825  04FE  0022               	movlb	2	; select bank2
  2826  04FF  0190               	clrf	16	;volatile
  2827                           
  2828                           ;pin_manager.c: 58: LATA = 0x00;
  2829  0500  018C               	clrf	12	;volatile
  2830                           
  2831                           ;pin_manager.c: 59: LATB = 0x00;
  2832  0501  018D               	clrf	13	;volatile
  2833                           
  2834                           ;pin_manager.c: 60: LATC = 0x00;
  2835  0502  018E               	clrf	14	;volatile
  2836                           
  2837                           ;pin_manager.c: 65: TRISE = 0x08;
  2838  0503  3008               	movlw	8
  2839  0504  0021               	movlb	1	; select bank1
  2840  0505  0090               	movwf	16	;volatile
  2841                           
  2842                           ;pin_manager.c: 66: TRISA = 0xFF;
  2843  0506  30FF               	movlw	255
  2844  0507  008C               	movwf	12	;volatile
  2845                           
  2846                           ;pin_manager.c: 67: TRISB = 0xFF;
  2847  0508  30FF               	movlw	255
  2848  0509  008D               	movwf	13	;volatile
  2849                           
  2850                           ;pin_manager.c: 68: TRISC = 0xC0;
  2851  050A  30C0               	movlw	192
  2852  050B  008E               	movwf	14	;volatile
  2853                           
  2854                           ;pin_manager.c: 73: ANSELB = 0x3F;
  2855  050C  303F               	movlw	63
  2856  050D  0023               	movlb	3	; select bank3
  2857  050E  008D               	movwf	13	;volatile
  2858                           
  2859                           ;pin_manager.c: 74: ANSELA = 0x3F;
  2860  050F  303F               	movlw	63
  2861  0510  008C               	movwf	12	;volatile
  2862                           
  2863                           ;pin_manager.c: 79: WPUE = 0x08;
  2864  0511  3008               	movlw	8
  2865  0512  0024               	movlb	4	; select bank4
  2866  0513  0090               	movwf	16	;volatile
  2867                           
  2868                           ;pin_manager.c: 80: WPUB = 0xFF;
  2869  0514  30FF               	movlw	255
  2870  0515  008D               	movwf	13	;volatile
  2871                           
  2872                           ;pin_manager.c: 81: OPTION_REGbits.nWPUEN = 0;
  2873  0516  0021               	movlb	1	; select bank1
  2874  0517  1395               	bcf	21,7	;volatile
  2875                           
  2876                           ;pin_manager.c: 87: APFCON = 0x00;
  2877  0518  0022               	movlb	2	; select bank2
  2878  0519  019D               	clrf	29	;volatile
  2879  051A  0008               	return
  2880  051B                     __end_of_PIN_MANAGER_Initialize:	
  2881                           
  2882                           	psect	text15
  2883  0487                     __ptext15:	
  2884 ;; *************** function _OSCILLATOR_Initialize *****************
  2885 ;; Defined at:
  2886 ;;		line 78 in file "mcc_generated_files/mcc.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;		None
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;		None
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  1    wreg      void 
  2893 ;; Registers used:
  2894 ;;		wreg, status,2
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2900 ;;      Params:         0       0       0       0       0       0       0       0
  2901 ;;      Locals:         0       0       0       0       0       0       0       0
  2902 ;;      Temps:          0       0       0       0       0       0       0       0
  2903 ;;      Totals:         0       0       0       0       0       0       0       0
  2904 ;;Total ram usage:        0 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; This function calls:
  2907 ;;		Nothing
  2908 ;; This function is called by:
  2909 ;;		_SYSTEM_Initialize
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           
  2914                           ;psect for function _OSCILLATOR_Initialize
  2915  0487                     _OSCILLATOR_Initialize:	
  2916                           
  2917                           ;mcc.c: 81: OSCCON = 0x70;
  2918                           
  2919                           ;incstack = 0
  2920                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2921  0487  3070               	movlw	112
  2922  0488  0021               	movlb	1	; select bank1
  2923  0489  0099               	movwf	25	;volatile
  2924                           
  2925                           ;mcc.c: 83: OSCTUNE = 0x00;
  2926  048A  0198               	clrf	24	;volatile
  2927  048B                     l54:	
  2928                           ;mcc.c: 86: {
  2929                           
  2930                           ;mcc.c: 85: while(PLLR == 0)
  2931                           
  2932  048B  1B1A               	btfsc	26,6	;volatile
  2933  048C  0008               	return
  2934  048D  2C8B               	goto	l54
  2935  048E                     __end_of_OSCILLATOR_Initialize:	
  2936                           
  2937                           	psect	text16
  2938  04BA                     __ptext16:	
  2939 ;; *************** function _BT1_Is_Pressed *****************
  2940 ;; Defined at:
  2941 ;;		line 5 in file "main.c"
  2942 ;; Parameters:    Size  Location     Type
  2943 ;;		None
  2944 ;; Auto vars:     Size  Location     Type
  2945 ;;  state           1    1[COMMON] unsigned char 
  2946 ;; Return value:  Size  Location     Type
  2947 ;;                  1    wreg      unsigned char 
  2948 ;; Registers used:
  2949 ;;		wreg, status,2, status,0
  2950 ;; Tracked objects:
  2951 ;;		On entry : 0/0
  2952 ;;		On exit  : 0/0
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2955 ;;      Params:         0       0       0       0       0       0       0       0
  2956 ;;      Locals:         1       0       0       0       0       0       0       0
  2957 ;;      Temps:          1       0       0       0       0       0       0       0
  2958 ;;      Totals:         2       0       0       0       0       0       0       0
  2959 ;;Total ram usage:        2 bytes
  2960 ;; Hardware stack levels used:    1
  2961 ;; This function calls:
  2962 ;;		Nothing
  2963 ;; This function is called by:
  2964 ;;		_main
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           
  2969                           ;psect for function _BT1_Is_Pressed
  2970  04BA                     _BT1_Is_Pressed:	
  2971                           
  2972                           ;main.c: 7: static bool lat=1;
  2973                           ;main.c: 8: bool state=PORTBbits.RB7;
  2974                           
  2975                           ;incstack = 0
  2976                           ; Regs used in _BT1_Is_Pressed: [wreg+status,2+status,0]
  2977  04BA  3000               	movlw	0
  2978  04BB  0020               	movlb	0	; select bank0
  2979  04BC  1B8D               	btfsc	13,7	;volatile
  2980  04BD  3001               	movlw	1
  2981  04BE  00F1               	movwf	BT1_Is_Pressed@state
  2982                           
  2983                           ;main.c: 9: if(lat!=state)
  2984  04BF  0844               	movf	BT1_Is_Pressed@lat,w
  2985  04C0  0671               	xorwf	BT1_Is_Pressed@state,w
  2986  04C1  1903               	skipnz
  2987  04C2  2CCC               	goto	l1098
  2988                           
  2989                           ;main.c: 10: {
  2990                           ;main.c: 11: lat=state;
  2991  04C3  0871               	movf	BT1_Is_Pressed@state,w
  2992  04C4  00F0               	movwf	??_BT1_Is_Pressed
  2993  04C5  0870               	movf	??_BT1_Is_Pressed,w
  2994  04C6  00C4               	movwf	BT1_Is_Pressed@lat
  2995                           
  2996                           ;main.c: 12: if(lat) return 1;
  2997  04C7  0844               	movf	BT1_Is_Pressed@lat,w
  2998  04C8  1903               	btfsc	3,2
  2999  04C9  2CCC               	goto	l1098
  3000  04CA  3001               	movlw	1
  3001  04CB  0008               	return
  3002  04CC                     l1098:	
  3003                           
  3004                           ;main.c: 13: }
  3005                           ;main.c: 14: return 0;
  3006  04CC  3000               	movlw	0
  3007  04CD  0008               	return
  3008  04CE                     __end_of_BT1_Is_Pressed:	
  3009  007E                     btemp	set	126	;btemp
  3010  007E                     wtemp0	set	126


Data Sizes:
    Strings     36
    Constant    14
    Data        1
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     35      37
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_2(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> main@buffer(BANK0[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    TextLCD_Puts@data	PTR unsigned char  size(2) Largest target is 17
		 -> STR_3(CODE[17]), main@buffer(BANK0[16]), STR_1(CODE[8]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _TextLCD_Puts->_TextLCD_PutChar
    _TextLCD_PutChar->_TextLCD_CMD
    _TextLCD_Init->_TextLCD_CMD
    _TextLCD_CMD->_TextLCD_4Bits_Write

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0    3272
                                             17 BANK0     18    18      0
                     _BT1_Is_Pressed
                  _SYSTEM_Initialize
                       _TextLCD_Init
                       _TextLCD_Puts
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    21      4    1867
                                              0 BANK0     17    13      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     290
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _TextLCD_Puts                                         7     3      4    1073
                                              4 COMMON     7     3      4
                        _TextLCD_CMD
                    _TextLCD_PutChar
 ---------------------------------------------------------------------------------
 (2) _TextLCD_PutChar                                      1     1      0     157
                                              3 COMMON     1     1      0
                        _TextLCD_CMD
 ---------------------------------------------------------------------------------
 (1) _TextLCD_Init                                         2     2      0     226
                                              3 COMMON     2     2      0
                _TextLCD_4Bits_Write
                        _TextLCD_CMD
                     _TextLCD_Enable
 ---------------------------------------------------------------------------------
 (3) _TextLCD_CMD                                          2     2      0     135
                                              1 COMMON     2     2      0
                _TextLCD_4Bits_Write
                     _TextLCD_Enable
 ---------------------------------------------------------------------------------
 (4) _TextLCD_Enable                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TextLCD_4Bits_Write                                  1     1      0      91
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BT1_Is_Pressed                                       2     2      0      45
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BT1_Is_Pressed
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _WDT_Initialize
   _TextLCD_Init
     _TextLCD_4Bits_Write
     _TextLCD_CMD
       _TextLCD_4Bits_Write
       _TextLCD_Enable
     _TextLCD_Enable
   _TextLCD_Puts
     _TextLCD_CMD
       _TextLCD_4Bits_Write
       _TextLCD_Enable
     _TextLCD_PutChar
       _TextLCD_CMD
         _TextLCD_4Bits_Write
         _TextLCD_Enable
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      33       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     23      25       6       46.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      33      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sun Aug 20 15:51:24 2017

                            __CFG_CP$OFF 0000                                       l54 048B  
                    ___wmul@multiplicand 0072                                      l140 06A2  
                                    l158 074B                                      l259 04EB  
                           __CFG_CPD$OFF 0000                                      u605 0583  
                                    u615 058B                                      u535 04EC  
                                    u545 04F1                                      u485 04D2  
                                    u645 0541                                      u575 056F  
                                    u665 0550                                      u595 0579  
                                    u675 0557                                      u835 075A  
                                    u795 0735                                      u957 0644  
                                    u967 059D                                      u977 05AE  
                                    u987 05B6                                      u997 05D8  
                           __CFG_BORV$LO 0000                                      wreg 0009  
                           __CFG_IESO$ON 0000                  __size_of_TextLCD_Enable 000C  
                           __CFG_LVP$OFF 0000                                     l1024 04E5  
                                   l1018 04B8                                     l1132 0657  
                                   l1142 0660                                     l1134 065F  
                                   l1054 058A                                     l1046 056C  
                                   l1070 053E                                     l1206 0767  
                                   l1128 064B                                     l1048 0578  
                                   l1072 054A                                     l1080 055F  
                                   l1232 07A6                                     l1216 077B  
                                   l1224 078F                                     l1208 076A  
                                   l1160 06B0                                     l1152 069E  
                                   l1058 0593                                     l1226 0793  
                                   l1250 07F3                                     l1076 0556  
                                   l1164 06BD                                     l1246 07B9  
                                   l1238 07B5                                     l1174 06EB  
                                   l1158 06A7                                     l1192 0720  
                                   l1176 0703                                     l1248 067B  
                                   l1098 04CC                                     l1186 071A  
                                   l1258 05F0                                     l1198 073F  
                                   STR_1 082A                                     STR_2 0815  
                                   STR_3 0804                                     u1007 04A3  
                                   u1017 04A8                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   _LATE 0110                                     _PLLR 04D6  
                                   _WPUB 020D                                     _WPUE 0210  
                           __CFG_WRT$OFF 0000                            __CFG_FCMEN$ON 0000  
                                   _main 05E0                          TextLCD_Puts@idx 0074  
                                   fsr0h 0005                                     fsr1h 0007  
                                   indf0 0000                                     fsr0l 0004  
                                   indf1 0001                                     fsr1l 0006  
                                   btemp 007E                            __CFG_BOREN$ON 0000  
                                   start 0002                            __CFG_MCLRE$ON 0000  
                          __CFG_PLLEN$ON 0000           __size_of_OSCILLATOR_Initialize 0007  
          __end_of_OSCILLATOR_Initialize 048E                                    ?_main 0070  
                          __CFG_WDTE$OFF 0000                 __size_of_TextLCD_PutChar 0009  
                        __end_of___lwdiv 0598                          __end_of___lwmod 0564  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _TRISE 0090  
                       TextLCD_Puts@data 0075                          __end_of_dpowers 082A  
                         _WDT_Initialize 0483                         TextLCD_Puts@line 0079  
                        __end_of_isdigit 04BA                                    main@i 0043  
                                  status 0003                                    wtemp0 007E  
                        __end_of_sprintf 07F9                           _BT1_Is_Pressed 04BA  
                        __initialization 07F9                             __end_of_main 062A  
                                 ??_main 0031                   __end_of_WDT_Initialize 0487  
                                 _APFCON 011D                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _OSCCON 0099  
                                 _WDTCON 0097                   __end_of_BT1_Is_Pressed 04CE  
                         __CFG_PWRTE$OFF 0000                            ??_TextLCD_CMD 0071  
             TextLCD_Puts@length_or_type 0077                                   ___wmul 04E3  
                         __CFG_STVREN$ON 0000                                ??___lwdiv 0074  
                              ??___lwmod 007C                                ??_isdigit 0070  
                        ?_WDT_Initialize 0070                           _TextLCD_Enable 04A0  
                      ??_TextLCD_PutChar 0073                                ??_sprintf 0024  
                      _SYSTEM_Initialize 048E                  __end_of__initialization 07FD  
                        ?_BT1_Is_Pressed 0070                       ?_SYSTEM_Initialize 0070  
                         __pcstackCOMMON 0070                             __pidataBANK0 0482  
                    ??_SYSTEM_Initialize 0070                      __end_of_TextLCD_CMD 04E3  
            __end_of_TextLCD_4Bits_Write 0538                   __end_of_TextLCD_Enable 04AC  
                         _OPTION_REGbits 0095                __end_of_SYSTEM_Initialize 0497  
                           sprintf@width 002D                               __pbssBANK0 0043  
                 TextLCD_4Bits_Write@nib 0070                          __CFG_VCAPEN$OFF 0000  
                             __pmaintext 05E0                                  ?___wmul 0070  
                          ?_TextLCD_Init 0070                            ?_TextLCD_Puts 0074  
                        ?_TextLCD_Enable 0070                                  _OSCTUNE 0098  
                      BT1_Is_Pressed@lat 0044                              _TextLCD_CMD 04CE  
                         ??_TextLCD_Init 0073                           ??_TextLCD_Puts 0078  
                        __size_of___wmul 001B                                  ___lwdiv 0564  
                                ___lwmod 0538                                  __ptext1 0675  
                                __ptext2 04AC                                  __ptext3 04E3  
                                __ptext4 0538                                  __ptext5 0564  
                                __ptext6 062A                                  __ptext7 0497  
                                __ptext8 0598                                  __ptext9 04CE  
                                _dpowers 0820                    _OSCILLATOR_Initialize 0487  
                                _isdigit 04AC                 ??_PIN_MANAGER_Initialize 0070  
             __size_of_SYSTEM_Initialize 0009                                  _sprintf 0675  
                   end_of_initialization 07FD                          _TextLCD_PutChar 0497  
                       ??_WDT_Initialize 0070                                _PORTBbits 000D  
                       __CFG_FOSC$INTOSC 0000                         ??_BT1_Is_Pressed 0070  
                             main@buffer 0033                      BT1_Is_Pressed@state 0071  
                         __end_of___wmul 04FE                   ?_OSCILLATOR_Initialize 0070  
                    start_initialization 07F9          __size_of_PIN_MANAGER_Initialize 001D  
                   __end_of_TextLCD_Init 05E0                     __end_of_TextLCD_Puts 0675  
                __end_of_TextLCD_PutChar 04A0                                 ??___wmul 0074  
                            __pdataBANK0 0044                         ??_TextLCD_Enable 0070  
                              ___latbits 0002                            __pcstackBANK0 0020  
           __size_of_TextLCD_4Bits_Write 001D                              sprintf@flag 002C  
                            sprintf@prec 0029                         ___lwdiv@dividend 0072  
                 _PIN_MANAGER_Initialize 04FE                             ?_TextLCD_CMD 0070  
                               ?___lwdiv 0070                                 ?___lwmod 0078  
                               ?_isdigit 0070                         ___lwdiv@quotient 0075  
                               ?_sprintf 0020                      TextLCD_PutChar@data 0073  
                         ___wmul@product 0074                                 _LATCbits 010E  
                       ?_TextLCD_PutChar 0070                        ___wmul@multiplier 0070  
                  __size_of_TextLCD_Init 0048                    __size_of_TextLCD_Puts 004B  
                ??_OSCILLATOR_Initialize 0070                             _TextLCD_Init 0598  
                           _TextLCD_Puts 062A                         __size_of___lwdiv 0034  
                       __size_of___lwmod 002C                              _isdigit$426 0070  
                             sprintf@val 002A                         __size_of_isdigit 000E  
                        ___lwdiv@divisor 0070                          ___lwdiv@counter 0077  
                               __ptext10 04A0                                 __ptext11 051B  
                               __ptext12 048E                                 __ptext13 0483  
                               __ptext14 04FE                                 __ptext15 0487  
                               __ptext16 04BA                      TextLCD_Puts@address 007A  
                       __size_of_sprintf 0184                            __size_of_main 004A  
__end_ofTextLCD_Puts@DDRAM_Start_Address 0804          TextLCD_Puts@DDRAM_Start_Address 0800  
                    _TextLCD_4Bits_Write 051B                     __size_of_TextLCD_CMD 0015  
                               isdigit@c 0071                  __size_of_WDT_Initialize 0004  
                   ?_TextLCD_4Bits_Write 0070                                sprintf@ap 0028  
                              sprintf@sp 002F                         ___lwmod@dividend 007A  
                ?_PIN_MANAGER_Initialize 0070                        __CFG_CLKOUTEN$OFF 0000  
                __size_of_BT1_Is_Pressed 0014                            __pstringtext1 0820  
                          __pstringtext2 0800                            __pstringtext3 0815  
                          __pstringtext4 082A                            __pstringtext5 0000  
                               sprintf@c 0030                                 sprintf@f 0020  
                        ___lwmod@divisor 0078                          ___lwmod@counter 007D  
                  ??_TextLCD_4Bits_Write 0070                           TextLCD_CMD@cmd 0072  
         __end_of_PIN_MANAGER_Initialize 051B  
